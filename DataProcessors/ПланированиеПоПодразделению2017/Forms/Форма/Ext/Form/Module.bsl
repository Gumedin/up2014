
#Область ОбработчикиФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьНормуЧасов();
КонецПроцедуры

&НаКлиенте
Процедура ПериодПланированияПриИзменении(Элемент)
	УстановитьНормуЧасов();
	ОбнулитьДанныеРасчета();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ОбнулитьДанныеРасчета();
КонецПроцедуры


#КонецОбласти


#Область Флажки

&НаКлиенте
Процедура УстановитьФлажки( Коллекция, Флажок )
	Для Каждого ЭлК ИЗ Коллекция Цикл
		ЭлК.Пометка = Флажок;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВсеИсполнители(Команда)
	УстановитьФлажки( ИсполнителиПлановРабот, Истина );
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеИсполнители(Команда)
	УстановитьФлажки( ИсполнителиПлановРабот, Ложь );
КонецПроцедуры

&НаКлиенте
Процедура ВсеПланыРабот(Команда)
	УстановитьФлажки( ИтогиПоПланамРабот, Истина );
КонецПроцедуры


&НаКлиенте
Процедура СнятьВсеПланыРабот(Команда)
	УстановитьФлажки( ИтогиПоПланамРабот, Ложь );
КонецПроцедуры


#КонецОбласти


#Область Прочее

&НаСервереБезКонтекста
Функция РасчитатьНормуЗаПериод( ПериодПланирования )
	//НормаЧасов 		= 0;
	//Сутки 			= 24 * 60 * 60;
	//Д1 				= НачалоДня( ПериодПланирования.ДатаНачала );
	//КонецПериода 	= НачалоДня( ПериодПланирования.ДатаОкончания );
	//Пока Д1 <= ПериодПланирования.ДатаОкончания Цикл
	//	НормаЧасов = НормаЧасов + УП_ПланыРаботПоПроектам.КоличествоРабочихЧасовВДне( Д1 );
	//	Д1 = Д1 + Сутки;
	//КонецЦикла;
	НормаЧасов = УП_РаботаСРабочимКалендаремСервер.РасчитатьНормуЗаПериод( ПериодПланирования );
	Возврат НормаЧасов;
КонецФункции


&НаСервере
Процедура ОбновитьНаСервере()
	// сотрудники
	//ЗаполнитьИсполителейПлановРабот( Подразделение, ПериодПланирования );
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	Если НЕ ЗначениеЗаполнено( ПериодПланирования ) Тогда
		ПоказатьПредупреждение(, "Не указан период планирования!");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено( Подразделение ) Тогда
		ПоказатьПредупреждение(, "Не указано подразделение!");
		Возврат;
	КонецЕсли;
	
	ОбновитьНаСервере();
КонецПроцедуры

#КонецОбласти


#Область ЗаполнениеИсходныхДанных

// упрощенный вариант, год проекта по дате начала планирования
&НаСервереБезКонтекста
Функция СтавкаФОТ( Подразделение, ТарифнаяСтавка, Месяц )
	// 2015 10 02
	Если Год( Месяц ) >= 2017 Тогда
	// 2017 01 10
		Возврат ПоказательТарифнойСтавки( ТарифнаяСтавка, Месяц,  "СтавкаФОТ");
	
	Иначе
		// 2014 10 25 
		Возврат СтавкаФОТПодразделения( Подразделение, ТарифнаяСтавка, Месяц );
	КонецЕсли;
КонецФункции


&НаСервереБезКонтекста
Функция КодТарифнойСтавки( ТарифнаяСтавка )
	Тариф = "ТАРИФ";
	Если ЗначениеЗаполнено( ТарифнаяСтавка ) Тогда
		Если СтрНайти( ТарифнаяСтавка.Код, Тариф )= 0 Тогда
			Возврат СокрЛП( ТарифнаяСтавка.Код );
		Иначе
			Возврат СокрЛП( СтрЗаменить( ТарифнаяСтавка.Код, Тариф, ""));
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

// первоначальный список исполнителей
// - сотрудников подразделения
&НаСервере
Процедура ЗаполнитьИсполителейПлановРабот( Подразделение, ПериодПланирования, Пометка = Ложь )
	//Сотрудники 	= УП_КадрыСервер.СотрудникиПодразделенияНаДату( Подразделение, ПериодПланирования.Дата,,Ложь);
	Сотрудники 	= УП_КадрыСервер.СотрудникиПодразделенияЗаПериод( Подразделение, ПериодПланирования, Ложь,, ВключатьНеДоступныхСотрудников );
	ИсполнителиПлановРабот.Загрузить( Сотрудники );
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Исполнитель.Пометка 	= Пометка;
		Исполнитель.СтавкаФОТ 	= СтавкаФОТ( Подразделение, Исполнитель.ТарифнаяСтавка, ПериодПланирования.ДатаНачала );
		Исполнитель.КодТС 		= КодТарифнойСтавки( Исполнитель.ТарифнаяСтавка );
		
	КонецЦикла;
	ИсполнителиПлановРабот.Сортировать("КодТС Убыв,ФизическоеЛицо");
	
КонецПроцедуры



// планы работ, у которых есть фронт работ в указанном периоде.
// Для начала период - месяц
&НаСервере
Процедура ЗаполнитьПланыРабот_НаСервере( Подразделение, ПериодПланирования, Пометка = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФронтРаботОбороты.ПланРабот КАК ПланРабот,
		|	ФронтРаботОбороты.ТарифнаяСтавка КАК ТарифнаяСтавка,
		|	СУММА(ВЫБОР
		|			КОГДА ФронтРаботОбороты.ТипСуммы = 0
		|				ТОГДА ФронтРаботОбороты.КоличествоОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧасовПлан,
		|	СУММА(ВЫБОР
		|			КОГДА ФронтРаботОбороты.ТипСуммы <> 0
		|				ТОГДА ФронтРаботОбороты.КоличествоОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧасовФакт,
		|	СУММА(ВЫБОР
		|			КОГДА ФронтРаботОбороты.ТипСуммы = 0
		|				ТОГДА ФронтРаботОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПлан,
		|	СУММА(ВЫБОР
		|			КОГДА ФронтРаботОбороты.ТипСуммы <> 0
		|				ТОГДА ФронтРаботОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаФакт,
		|	ПоказателиТарифныхСтавокСрезПоследних.СтавкаФОТ КАК СтавкаФОТСтандартная,
		|	ВЫБОР
		|		КОГДА ФронтРаботОбороты.ПланРабот.ЗадачаПроекта.Владелец.ГодПроекта >= 2017
		|			ТОГДА 1
		|		ИНАЧЕ КоэффПодр.КоэффициентПланирования
		|	КОНЕЦ КАК КоэффициентПланирования,
		|	ВЫБОР
		|		КОГДА ФронтРаботОбороты.ПланРабот.ЗадачаПроекта.Владелец.ГодПроекта >= 2017
		|			ТОГДА 1
		|		ИНАЧЕ КоэффПодр.КоэффициентПланирования
		|	КОНЕЦ * ПоказателиТарифныхСтавокСрезПоследних.СтавкаФОТ КАК СтавкаФОТ,
		|	&Пометка КАК Пометка,
		|	ФронтРаботОбороты.ПланРабот.Номер КАК ПланРаботНомер,
		|	ФронтРаботОбороты.ПланРабот.ЗадачаПроекта.Владелец.Код КАК КодПроекта
		|ИЗ
		|	РегистрНакопления.ФронтРабот.Обороты КАК ФронтРаботОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиТарифныхСтавок.СрезПоследних(&Месяц, ) КАК ПоказателиТарифныхСтавокСрезПоследних
		|		ПО ФронтРаботОбороты.ТарифнаяСтавка = ПоказателиТарифныхСтавокСрезПоследних.ТарифнаяСтавка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентФОТПодразделений.СрезПоследних(&Месяц, ) КАК КоэффПодр
		|		ПО ФронтРаботОбороты.ПланРабот.Подразделение = КоэффПодр.Подразделение
		|ГДЕ
		|	НЕ ФронтРаботОбороты.ПланРабот.Закрыт
		|	И ФронтРаботОбороты.ПланРабот.Подразделение = &Подразделение
		|	И ФронтРаботОбороты.Месяц МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ФронтРаботОбороты.ПланРабот,
		|	ФронтРаботОбороты.ТарифнаяСтавка,
		|	ПоказателиТарифныхСтавокСрезПоследних.СтавкаФОТ,
		|	ВЫБОР
		|		КОГДА ФронтРаботОбороты.ПланРабот.ЗадачаПроекта.Владелец.ГодПроекта >= 2017
		|			ТОГДА 1
		|		ИНАЧЕ КоэффПодр.КоэффициентПланирования
		|	КОНЕЦ,
		|	ФронтРаботОбороты.ПланРабот.Номер,
		|	ФронтРаботОбороты.ПланРабот.ЗадачаПроекта.Владелец.Код,
		|	ВЫБОР
		|		КОГДА ФронтРаботОбороты.ПланРабот.ЗадачаПроекта.Владелец.ГодПроекта >= 2017
		|			ТОГДА 1
		|		ИНАЧЕ КоэффПодр.КоэффициентПланирования
		|	КОНЕЦ * ПоказателиТарифныхСтавокСрезПоследних.СтавкаФОТ";
	
	Запрос.УстановитьПараметр("Месяц", 			НачалоМесяца( ПериодПланирования.ДатаНачала));
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца( ПериодПланирования.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца( ПериодПланирования.ДатаОкончания));
	Запрос.УстановитьПараметр("Подразделение", 	Подразделение);
	Запрос.УстановитьПараметр("Пометка", 		Пометка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ИтогиФР			 = РезультатЗапроса.Скопировать();
	ИтогиФР.Свернуть("ПланРабот,Пометка,ПланРаботНомер,КодПроекта",  "СуммаПлан");
	//ИтогиФР.Сортировать("ПланРабот");
	ИтогиПоПланамРабот.Загрузить( ИтогиФР );
	ИтогиПоПланамРабот.Сортировать( "КодПроекта,ПланРаботНомер" );
	
	Для Каждого СтрИПР ИЗ ИтогиПоПланамРабот Цикл 
		Отбор = Новый Структура;
		Отбор.Вставить("ПланРабот", СтрИПР.ПланРабот );
		СтрокиПланаРабот = РезультатЗапроса.НайтиСтроки( Отбор );
		Для Каждого СтрПР ИЗ СтрокиПланаРабот Цикл
			СтрФР = СтрИПР.ФронтРабот.Добавить();
			ЗаполнитьЗначенияСвойств( СтрФР, СтрПР );
			СтрФР.КодТС = КодТарифнойСтавки( СтрФР.ТарифнаяСтавка );
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПлановРабот( мПлановРаботПоПосещениям )
	Для Каждого ПР ИЗ мПлановРаботПоПосещениям Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("ПланРабот", ПР );
		мПР = ИтогиПоПланамРабот.НайтиСтроки( Отбор );
		Если мПР.Количество() = 0 Тогда
			НовСтр = ИтогиПоПланамРабот.Добавить();
			НовСтр.ПланРабот 		= ПР;
			НовСтр.ПланРаботНомер 	= ПР.Номер;
			НовСтр.КодПроекта 		= ПР.ЗадачаПроекта.Владелец.Код;
		КонецЕсли;
	КонецЦикла;
	//
	ИтогиПоПланамРабот.Сортировать( "КодПроекта,ПланРаботНомер" );
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланыРабот(Команда)
	ЗаполнитьПланыРабот_НаСервере( Подразделение, ПериодПланирования);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНормуЧасов()
	НормаЧасовЗаМесяц = РасчитатьНормуЗаПериод( ПериодПланирования );
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПосещения(Команда)
	ЗаполнитьПосещения_ПоПланамРабот( ПериодПланирования );
	// заполнить непроизводственные часы
	ЗаполнитьПосещения_ПоПредметамПосещения( ПериодПланирования );
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПосещения_ПоПредметамПосещения(ПериодПланирования )
	мФизЛиц = ИсполнителиПлановРабот.Выгрузить(,"ФизическоеЛицо").ВыгрузитьКолонку("ФизическоеЛицо");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.ПредметПосещения КАК ПредметПосещения,
		|	ПосещенияКонтрагентов.ФизическоеЛицо,
		|	СУММА(ПосещенияКонтрагентов.Часов) КАК Часов,
		|	ПосещенияКонтрагентов.Контрагент
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПосещенияКонтрагентов.ПредметПосещения) <> ТИП(Документ.ПланРабот)
		|	И НЕ ПосещенияКонтрагентов.ПометкаУдаления
		|	И ПосещенияКонтрагентов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПосещенияКонтрагентов.ФизическоеЛицо В(&ФизическиеЛица)
		//|	И (&ВсеКонтрагенты
		//|			ИЛИ ПосещенияКонтрагентов.Контрагент = &Контрагент)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПосещенияКонтрагентов.ФизическоеЛицо,
		|	ПосещенияКонтрагентов.ПредметПосещения,
		|	ПосещенияКонтрагентов.Контрагент";
	
	Запрос.УстановитьПараметр("ФизическиеЛица", мФизЛиц);
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца( ПериодПланирования.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца( ПериодПланирования.ДатаОкончания));
	// 2017 03 06 фильтр по контрагентам
	//Запрос.УстановитьПараметр("Контрагент", 	Контрагент );
	//Запрос.УстановитьПараметр("ВсеКонтрагенты", НЕ ЗначениеЗаполнено(Контрагент));
	
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	НеПроизводственныеЧасы.Загрузить( РезультатЗапроса );	
	НеПроизводственныеЧасы.Сортировать("Контрагент,ФизическоеЛицо");
	
	
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ТарифнаяСтавкаПосещения( Посещение, СотрудникиПодразделения, НачалоПериода )
	МинимальнаяТарифнаяСтавка 	= Справочники.ТарифныеСтавки.НайтиПоКоду("ТАРИФ 01");	
			
	ТарифнаяСтавка = Посещение.ТарифнаяСтавка;
	Если НЕ ЗначениеЗаполнено( ТарифнаяСтавка ) Тогда
		Если ЗначениеЗаполнено( Посещение.Должность ) Тогда
		// находим тарифную ставку по должности
			ТарифнаяСтавка = УП_КадрыСервер.СтавкаПоДолжности( Посещение.Должность );
		Иначе 
			// если должность не указана, пытаемся найти его в сотрудниках подразделения
			Стр = СотрудникиПодразделения.Найти( Посещение.ФизическоеЛицо, "ФизическоеЛицо");
			Если Стр <> Неопределено Тогда
			// работает в подразделении, ТС без должности не может быть
				ТарифнаяСтавка = УП_КадрыСервер.СтавкаПоДолжности( Стр.Должность );
			КонецЕсли;
		КонецЕсли;
		
		// все еще не заполнено, тогда по по личным данным
		Если НЕ ЗначениеЗаполнено( ТарифнаяСтавка ) Тогда
			ТарифнаяСтавка = УП_КадрыСервер.ТарифнаяСтавкаФизЛица( Посещение.ФизическоеЛицо, НачалоПериода );
		КонецЕсли;
			
		// все еще не заполнено, тогда по по личным данным
		Если НЕ ЗначениеЗаполнено( ТарифнаяСтавка ) Тогда
			ТарифнаяСтавка = МинимальнаяТарифнаяСтавка;
		КонецЕсли;
	КонецЕсли;
	Возврат ТарифнаяСтавка;
КонецФункции

&НаСервереБезКонтекста
Функция ТарифнаяСтавкаПосещенияV2(Посещение)
	МинимальнаяТарифнаяСтавка 	= Справочники.ТарифныеСтавки.НайтиПоКоду("ТАРИФ 01");	
			
	ТарифнаяСтавка = Посещение.ТарифнаяСтавка;
	Если НЕ ЗначениеЗаполнено( ТарифнаяСтавка ) Тогда
		Если ЗначениеЗаполнено( Посещение.Должность ) Тогда
		// находим тарифную ставку по должности
			ТарифнаяСтавка = УП_КадрыСервер.СтавкаПоДолжности(Посещение.Должность);
		Иначе 
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	СотрудникиСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
				|	СотрудникиСрезПоследних.Должность КАК Должность,
				|	СотрудникиСрезПоследних.ТарифнаяСтавка КАК ТарифнаяСтавка
				|ИЗ
				|	РегистрСведений.Сотрудники.СрезПоследних(&Дата,
				|			ФизическоеЛицо = &ФизическоеЛицо И	Подразделение = &Подразделение)
				|		КАК СотрудникиСрезПоследних";
			
			Запрос.УстановитьПараметр("Дата", Посещение.Дата);
			Запрос.УстановитьПараметр("ФизическоеЛицо", Посещение.ФизическоеЛицо);
			Запрос.УстановитьПараметр("Подразделение", Посещение.Подразделение);
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ТарифнаяСтавка = ВыборкаДетальныеЗаписи.ТарифнаяСтавка;
			КонецЦикла;
		КонецЕсли;
		
		// все еще не заполнено, тогда по по личным данным
		Если НЕ ЗначениеЗаполнено( ТарифнаяСтавка ) Тогда
			ТарифнаяСтавка = УП_КадрыСервер.ТарифнаяСтавкаФизЛица( Посещение.ФизическоеЛицо, Посещение.Дата );
		КонецЕсли;
			
		// все еще не заполнено, тогда по по личным данным
		Если НЕ ЗначениеЗаполнено( ТарифнаяСтавка ) Тогда
			ТарифнаяСтавка = МинимальнаяТарифнаяСтавка;
		КонецЕсли;
	КонецЕсли;
	Возврат ТарифнаяСтавка;
КонецФункции

// список исполнителей пока полностью пуст
&НаСервере
Процедура ЗаполнитьПосещения_ПоПланамРабот(ПериодПланирования )
	// если нет тарифной ставки
	МинимальнаяТарифнаяСтавка = Справочники.ТарифныеСтавки.НайтиПоКоду("ТАРИФ 01");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.ПредметПосещения КАК ПланРабот,
		|	ПосещенияКонтрагентов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ВЫБОР
		|			КОГДА ПосещенияКонтрагентов.Отработано
		|				ТОГДА ПосещенияКонтрагентов.Часов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧасовФакт,
		|	СУММА(ВЫБОР
		|			КОГДА ПосещенияКонтрагентов.Отработано
		|				ТОГДА 0
		|			ИНАЧЕ ПосещенияКонтрагентов.Часов
		|		КОНЕЦ) КАК ЧасовПлан,
		|	ПосещенияКонтрагентов.Уточнение.ТарифнаяСтавка КАК ТарифнаяСтавка,
		|	ПосещенияКонтрагентов.Подразделение,
		|	ПосещенияКонтрагентов.Уточнение КАК Должность,
		|	ПосещенияКонтрагентов.Дата КАК Дата
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПосещенияКонтрагентов.ПредметПосещения) = ТИП(Документ.ПланРабот)
		|	И НЕ ПосещенияКонтрагентов.ПометкаУдаления
		|	И ПосещенияКонтрагентов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПосещенияКонтрагентов.Подразделение = &Подразделение
		|	И (&ВсеКонтрагенты
		|			ИЛИ ПосещенияКонтрагентов.Контрагент = &Контрагент)
		|	И (&ВсеПроекты
		|			ИЛИ ПосещенияКонтрагентов.ПредметПосещения.ЗадачаПроекта.Владелец = &Проект)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПосещенияКонтрагентов.Подразделение,
		|	ПосещенияКонтрагентов.ФизическоеЛицо,
		|	ПосещенияКонтрагентов.ПредметПосещения,
		|	ПосещенияКонтрагентов.Уточнение.ТарифнаяСтавка,
		|	ПосещенияКонтрагентов.Уточнение,
		|	ПосещенияКонтрагентов.Дата";
		
		
	НачалоПериода = НачалоМесяца(ПериодПланирования.ДатаНачала);
	Запрос.УстановитьПараметр("Подразделение", 	Подразделение);
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца( ПериодПланирования.ДатаОкончания));
	// 2017 03 06 фильтр по контрагентам
	Запрос.УстановитьПараметр("Контрагент", 	Контрагент );
	Запрос.УстановитьПараметр("ВсеКонтрагенты", НЕ ЗначениеЗаполнено(Контрагент));
	// 20180119 фильтр по проекту
	Запрос.УстановитьПараметр("Проект", 		Проект );
	Запрос.УстановитьПараметр("ВсеПроекты", 	НЕ ЗначениеЗаполнено(Проект));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Посещение ИЗ РезультатЗапроса Цикл
		Если НЕ ЗначениеЗаполнено(Посещение.ТарифнаяСтавка) Тогда 
			// если в посещении не указана тарифная ставка, заполняем её по условиям		
			Посещение.ТарифнаяСтавка 	= ТарифнаяСтавкаПосещенияV2(Посещение);
		КонецЕсли;
			
		Отбор = Новый Структура( "ФизическоеЛицо, ТарифнаяСтавка", Посещение.ФизическоеЛицо, Посещение.ТарифнаяСтавка);
		Стр = ИсполнителиПлановРабот.НайтиСтроки( Отбор );
		Если Стр.Количество() = 0 Тогда 
			Исполнитель = ИсполнителиПлановРабот.Добавить();
			Исполнитель.ФизическоеЛицо	= Посещение.ФизическоеЛицо;
			Исполнитель.ТарифнаяСтавка	= Посещение.ТарифнаяСтавка;
			Исполнитель.СтавкаФОТ 		= СтавкаФОТ( Посещение.Подразделение, Посещение.ТарифнаяСтавка, Посещение.Дата);
			Исполнитель.КодТС 			= КодТарифнойСтавки( Посещение.ТарифнаяСтавка );
			Исполнитель.Пометка			= Истина;
		КонецЕсли;
	КонецЦикла;
	
	ИсполнителиПлановРабот.Сортировать("ФизическоеЛицо, КодТС Убыв");
	
	РезультатЗапроса.Свернуть("ФизическоеЛицо,ПланРабот,ТарифнаяСтавка", "ЧасовФакт,ЧасовПлан");
	
	// заполняем посещения по планам работ
	ПосещенияПоПланамРабот.Загрузить( РезультатЗапроса );
	
	// обновляем таблицу с остатками по планам работ
	ПланыРаботПоПосещениям = РезультатЗапроса.ВыгрузитьКолонку("ПланРабот");
	ОбновитьТаблицуПлановРабот( ПланыРаботПоПосещениям );
КонецПроцедуры

&НаСервере
Процедура ОбнулитьДанныеРасчета()
	ИсполнителиПлановРабот.Очистить();
	ИтогиПоПланамРабот.Очистить();
	НеПроизводственныеЧасы.Очистить();
	ПосещенияПоПланамРабот.Очистить();
	ТаблицаРезультат.Очистить();	
КонецПроцедуры

#КонецОбласти


#Область ВыводРезультатаПланирования

&НаСервере
Функция ПолучитьИспользуемыеТарифныеСтавки()
	// теперь сортируем по коду тарифной ставки в направлении убывания
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("КодТС");
	тз.Колонки.Добавить("ТарифнаяСтавка");
	тз.Колонки.Добавить("СтавкаФОТ");
	тз.Колонки.Добавить("ИтогоПоПлануЧасов");
	тз.Колонки.Добавить("ИтогоЛимитЧасов");
	
	// по планам работ
	Для Каждого ПР ИЗ ИтогиПоПланамРабот Цикл
		Для Каждого ФР ИЗ ПР.ФронтРабот Цикл
			Если тз.Найти( ФР.ТарифнаяСтавка, "ТарифнаяСтавка" ) = Неопределено Тогда
				Стр 					= тз.Добавить();
				ЗаполнитьСтрокуТарифнойСтавки( Стр, ФР.ТарифнаяСтавка, ФР.СтавкаФОТ );
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// по исполнителям
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Если тз.Найти( Исполнитель.ТарифнаяСтавка, "ТарифнаяСтавка"  ) = Неопределено Тогда
			Стр 					= тз.Добавить();
			ЗаполнитьСтрокуТарифнойСтавки( Стр, Исполнитель.ТарифнаяСтавка, Исполнитель.СтавкаФОТ );
		КонецЕсли;
	КонецЦикла;
	тз.Сортировать("КодТС Убыв");
	Возврат тз;
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуТарифнойСтавки( Стр, ТарифнаяСтавка, СтавкаФОТ )
	Стр.КодТС 				= КодТарифнойСтавки( ТарифнаяСтавка);
	Стр.ТарифнаяСтавка 		= ТарифнаяСтавка;
	Стр.СтавкаФОТ 			= СтавкаФОТ;
	Стр.ИтогоПоПлануЧасов 	= 0;
	Стр.ИтогоЛимитЧасов		= 0;
КонецПроцедуры

&НаСервере
Функция ПосещенияПоПлануРабот( ПланРабот )
	Отбор = Новый Структура;
	Отбор.Вставить("ПланРабот", ПланРабот );
	ПосещенияПоПлануРабот = ПосещенияПоПланамРабот.Выгрузить( Отбор );
	Возврат ПосещенияПоПлануРабот;
КонецФункции

&НаСервере
Функция ПосещенияПоТарифнымСтавкам( Посещения )
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("ТарифнаяСтавка");
	тз.Колонки.Добавить("Часов");
	тз.Колонки.Добавить("СуммаПлан");
	Для Каждого Посещение ИЗ Посещения Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("ТарифнаяСтавка", Посещение.ТарифнаяСтавка);
		Отбор.Вставить("ФизическоеЛицо", Посещение.ФизическоеЛицо);
		СтрИсполнители = ИсполнителиПлановРабот.НайтиСтроки( Отбор );
		Для Каждого СтрИ ИЗ СтрИсполнители Цикл
			СтрПП = тз.Найти( СтрИ.ТарифнаяСтавка, "ТарифнаяСтавка");
			Если СтрПП = Неопределено Тогда
				СтрПП = тз.Добавить();
				СтрПП.ТарифнаяСтавка 	= СтрИ.ТарифнаяСтавка;
				СтрПП.Часов 			= 0;
				СтрПП.СуммаПлан			= 0;
			КонецЕсли;
			СтрПП.Часов 	= СтрПП.Часов + Посещение.ЧасовФакт + Посещение.ЧасовПлан;
			СтрПП.СуммаПлан	= СтрПП.Часов * СтрИ.СтавкаФОТ;
		КонецЦикла;
	КонецЦикла;
	
	Возврат тз;
КонецФункции

&НаСервере
Функция ПланИсполнителяПоПлануРабот( Исполнитель, Посещения )
	Отбор = Новый Структура("ФизическоеЛицо,ТарифнаяСтавка", Исполнитель.ФизическоеЛицо, Исполнитель.ТарифнаяСтавка);
	мСтр = Посещения.НайтиСтроки( Отбор );
	Если мСтр.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	Возврат мСтр[0].ЧасовФакт + мСтр[0].ЧасовПлан;
		
КонецФункции                                                                                  

// +СИТ 20180328
//&НаСервере
//Функция ПланИсполнителяВсего( ФизическоеЛицо)
//	Отбор = Новый Структура;
//	Отбор.Вставить("ФизическоеЛицо", ФизическоеЛицо );
//	ПосещенияФизическоеЛицо = ПосещенияПоПланамРабот.Выгрузить( Отбор );
//	ВсегоЧасов = ПосещенияФизическоеЛицо.Итог("ЧасовФакт") + ПосещенияФизическоеЛицо.Итог("ЧасовПлан");
//	Возврат ВсегоЧасов;
//КонецФункции
&НаСервере
Функция ПланИсполнителяВсего( ФизическоеЛицо, ТарифнаяСтавка = Неопределено)
	Отбор = Новый Структура;
	Отбор.Вставить("ФизическоеЛицо", ФизическоеЛицо );
	Если НЕ ТарифнаяСтавка = Неопределено Тогда
		Отбор.Вставить("ТарифнаяСтавка", ТарифнаяСтавка );
	КонецЕсли;
	ПосещенияФизическоеЛицо = ПосещенияПоПланамРабот.Выгрузить( Отбор );
	ВсегоЧасов = ПосещенияФизическоеЛицо.Итог("ЧасовФакт") + ПосещенияФизическоеЛицо.Итог("ЧасовПлан");
	Возврат ВсегоЧасов;
КонецФункции
//-СИТ

&НаСервере
Функция ПолучитьПредметыПосещения()
	тз = НеПроизводственныеЧасы.Выгрузить();
	тз.Свернуть("Контрагент,ПредметПосещения", "Часов" );
	тз.Сортировать("Контрагент,ПредметПосещения" );
	Возврат тз;
КонецФункции

&НаСервере
Функция ЧасовИсполнителяПоПредметамПосещения( Посещение, ФизическоеЛицо)
	Отбор = Новый Структура;
	Отбор.Вставить("ПредметПосещения", 	Посещение.ПредметПосещения );
	Отбор.Вставить("Контрагент", 		Посещение.Контрагент);
	Отбор.Вставить("ФизическоеЛицо", 	ФизическоеЛицо );
	НеПроизвЧасы = НеПроизводственныеЧасы.Выгрузить( Отбор );
	ВсегоЧасов = НеПроизвЧасы.Итог("Часов");
	Возврат ВсегоЧасов;
КонецФункции

&НаСервере
Функция ЧасовИсполнителяПоНорме( ФизическоеЛицо)
	Отбор = Новый Структура;
	Отбор.Вставить("ФизическоеЛицо", 	ФизическоеЛицо );
	НеПроизвЧасы = НеПроизводственныеЧасы.Выгрузить( Отбор );
	ЧасовПоПланамРабот 	= ПланИсполнителяВсего( ФизическоеЛицо);
	ВсегоЧасов 			= НеПроизвЧасы.Итог("Часов");
	Возврат НормаЧасовЗаМесяц - ВсегоЧасов - ЧасовПоПланамРабот;
	
КонецФункции

&НаСервере
Процедура ВывестиШапку( Макет, ИспользуемыеТС, ТаблицаРезультат )
	ПрефиксСтроки = "Шапка";
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ПланыРабот");
	ТаблицаРезультат.Вывести( Область );
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ЛимитыНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого ТС ИЗ ИспользуемыеТС Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ЛимитПоТарифнойСтавке");
		ЗаполнитьЗначенияСвойств( Область.Параметры, ТС );
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|Баланс");
	ТаблицаРезультат.Присоединить( Область );
	
	//Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ПланыНачало");
	//ТаблицаРезультат.Присоединить( Область );
	//Для Каждого ТС ИЗ ИспользуемыеТС Цикл
	//	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ПланПоТарифнойСтавке");
	//	ЗаполнитьЗначенияСвойств( Область.Параметры, ТС );
	//	ТаблицаРезультат.Присоединить( Область );
	//КонецЦикла;
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ИсполнителиНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|Исполнитель");
		ЗаполнитьЗначенияСвойств( Область.Параметры, Исполнитель );
		
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиСтрокуПоПлануРабот( НомерПоПорядку, СтрокаПланаРабот, Макет, ИспользуемыеТС, ТаблицаРезультат )
	сБаланс = Новый Структура("Баланс,БалансЧасов", 0, 0);
	
	// показатели строки плана работ
	ПланРабот	= СтрокаПланаРабот.ПланРабот;
	// 2017 03 06 фильтр по контрагентам
	ЗадачаПроекта 		= СтрокаПланаРабот.ПланРабот.ЗадачаПроекта;
	КонтрагентПосещения = УП_ПланыРаботПоПроектам.КонтрагентЗадачиПроекта( ЗадачаПроекта );
	Если ЗначениеЗаполнено( Контрагент ) И Контрагент <> КонтрагентПосещения Тогда
		Возврат сБаланс;
	КонецЕсли;
	// + 20180126 фильтр по проекту
	ПроектПР			= СтрокаПланаРабот.ПланРабот.ЗадачаПроекта.Владелец;
	Если ЗначениеЗаполнено( Проект ) И Проект <> ПроектПР Тогда
		Возврат сБаланс;
	КонецЕсли;
	// -
	
	// лимиты
	ФронтРабот 	= СтрокаПланаРабот.ФронтРабот.Выгрузить();
	// запланированные и отработанные посещения
	Посещения	= ПосещенияПоПлануРабот( ПланРабот );
	Если Посещения.Количество() = 0 и ТолькоСдвижениемПоПредмету Тогда
		Возврат сБаланс;
	КонецЕсли;
	
	// 2017 03 03
	Если Посещения.Количество() <> 0 и ТолькоБезДвиженийПоПредмету Тогда
		Возврат сБаланс;
	КонецЕсли;
	
	
	// в разрезе тарифных ставок
	//ПланПосещений 	= ПланПосещений( Посещения );
	ПосещенияПоТарифнымСтавкам 	= ПосещенияПоТарифнымСтавкам( Посещения );
	
	ПрефиксСтроки = "ПланРабот";
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланыРабот");
	// 
	Область.Параметры.НомерПоПорядку 	= НомерПоПорядку;
	НомерПоПорядку						= НомерПоПорядку + 1;
	
	Область.Параметры.ПланРабот			= ПланРабот;
	Область.Параметры.НомерПланаРабот 	= ПланРабот.Номер;
	Область.Параметры.ЗадачаПроекта		= ЗадачаПроекта;
	Область.Параметры.КодПроекта 		= ЗадачаПроекта.Владелец.Код;
	Область.Параметры.Контрагент		= КонтрагентПосещения;
	ТаблицаРезультат.Вывести( Область );
	
	
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ЛимитыНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого ТС ИЗ ИспользуемыеТС Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ЛимитПоТарифнойСтавке");
		СтрФР   = ФронтРабот.Найти( ТС.ТарифнаяСтавка, "ТарифнаяСтавка" );
		Если СтрФР <> Неопределено Тогда
			Область.Параметры.Лимит = СтрФР.ЧасовПлан;
			ТС.ИтогоЛимитЧасов		= ТС.ИтогоЛимитЧасов + СтрФР.ЧасовПлан;
		КонецЕсли;
		СтрПП   = ПосещенияПоТарифнымСтавкам.Найти( ТС.ТарифнаяСтавка, "ТарифнаяСтавка" );
		Если СтрПП <> Неопределено Тогда
			Область.Параметры.План 	= СтрПП.Часов;
			ТС.ИтогоПоПлануЧасов	= ТС.ИтогоПоПлануЧасов + СтрПП.Часов;
		КонецЕсли;
		
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	//
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|Баланс");
	//
	сБаланс.Баланс 	= ФронтРабот.Итог("СуммаПлан") - ПосещенияПоТарифнымСтавкам.Итог("СуммаПлан");
	Область.Параметры.Баланс = сБаланс.Баланс;
	//
	сБаланс.БалансЧасов	= ФронтРабот.Итог("ЧасовПлан") - ПосещенияПоТарифнымСтавкам.Итог("Часов");
	Область.Параметры.БалансЧасов = сБаланс.БалансЧасов;
	
	ТаблицаРезультат.Присоединить( Область );
	//
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ИсполнителиНачало");
	ТаблицаРезультат.Присоединить( Область );
	
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|Исполнитель");
		Область.Параметры.ПланИсполнителя = ПланИсполнителяПоПлануРабот( Исполнитель, Посещения);
		//+СИТ 20180405
		СтруктураРасшифровкаПосещений = Новый Структура;		
		СтруктураРасшифровкаПосещений.Вставить("Подразделение",	 ЭтотОбъект.Подразделение);
		СтруктураРасшифровкаПосещений.Вставить("ФизическоеЛицо", Исполнитель.ФизическоеЛицо);
		СтруктураРасшифровкаПосещений.Вставить("ПланРабот",		 ПланРабот);
		СтруктураРасшифровкаПосещений.Вставить("ДатаС", 		 ЭтотОбъект.ПериодПланирования.ДатаНачала);
		СтруктураРасшифровкаПосещений.Вставить("ДатаПО", 		 ЭтотОбъект.ПериодПланирования.ДатаОкончания);
		Область.Параметры.РасшифровкаПосещений = СтруктураРасшифровкаПосещений;
		//-СИТ
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	
	Возврат сБаланс;
КонецФункции

&НаСервере
Процедура ВывестиСтрокуПоПредметуПосещения( Посещение, Макет, ИспользуемыеТС, ТаблицаРезультат );
	ПрефиксСтроки = "ПоТабелю";
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланыРабот");
	ЗаполнитьЗначенияСвойств( Область.Параметры, Посещение );
	//Область.Параметры.ПредметПосещения 	= Отметка.ПредметПосещения;
	ТаблицаРезультат.Вывести( Область );
	
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ЛимитыНачало");
	ЗаполнитьЗначенияСвойств( Область.Параметры, Посещение );
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого ТС ИЗ ИспользуемыеТС Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ЛимитПоТарифнойСтавке");
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	//
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|Баланс");
	ТаблицаРезультат.Присоединить( Область );
	//
	//Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланыНачало");
	//ТаблицаРезультат.Присоединить( Область );
	//Для Каждого ТС ИЗ ИспользуемыеТС Цикл
	//	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланПоТарифнойСтавке");
	//	ТаблицаРезультат.Присоединить( Область );
	//КонецЦикла;
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ИсполнителиНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|Исполнитель");
		Область.Параметры.Часов = ЧасовИсполнителяПоПредметамПосещения( Посещение, Исполнитель.ФизическоеЛицо);
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуПоНормеЧасов( Макет, ИспользуемыеТС, ТаблицаРезультат );
	ПрефиксСтроки = "ОстатокЧасов";
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланыРабот");
	ТаблицаРезультат.Вывести( Область );
	
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ЛимитыНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого ТС ИЗ ИспользуемыеТС Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ЛимитПоТарифнойСтавке");
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	//
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|Баланс");
	ТаблицаРезультат.Присоединить( Область );
	//
	//Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланыНачало");
	//ТаблицаРезультат.Присоединить( Область );
	//Для Каждого ТС ИЗ ИспользуемыеТС Цикл
	//	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланПоТарифнойСтавке");
	//	ТаблицаРезультат.Присоединить( Область );
	//КонецЦикла;
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ИсполнителиНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|Исполнитель");
		Область.Параметры.Часов = ЧасовИсполнителяПоНорме( Исполнитель.ФизическоеЛицо);
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЧасовПереработкиИсполнителя( ФизическоеЛицо)
	Запрос = Новый Запрос;
	Запрос.Текст = 	
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПосещенияКонтрагентов.Подразделение КАК Подразделение,
		|	НАЧАЛОПЕРИОДА(ПосещенияКонтрагентов.Дата, ДЕНЬ) КАК Дата,
		|	//ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня,
		|	СУММА(ПосещенияКонтрагентов.Часов) КАК Часов,
		|	ВЫБОР
		|		КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|			ТОГДА СУММА(ПосещенияКонтрагентов.Часов) - 8
		|		ИНАЧЕ СУММА(ПосещенияКонтрагентов.Часов)
		|	КОНЕЦ КАК Переработка
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО (НАЧАЛОПЕРИОДА(ПосещенияКонтрагентов.Дата, ДЕНЬ) = ДанныеПроизводственногоКалендаря.Дата)
		|ГДЕ
		|	ПосещенияКонтрагентов.Дата МЕЖДУ &Дата1 И &Дата2
		|	И ПосещенияКонтрагентов.ПометкаУдаления = ЛОЖЬ
		|	И ПосещенияКонтрагентов.ФизическоеЛицо = &ФизическоеЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ПосещенияКонтрагентов.ФизическоеЛицо,
		|	ПосещенияКонтрагентов.Подразделение,
		|	НАЧАЛОПЕРИОДА(ПосещенияКонтрагентов.Дата, ДЕНЬ),
		|	ДанныеПроизводственногоКалендаря.ВидДня
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ПосещенияКонтрагентов.Часов) > 8
		|		ИЛИ ДанныеПроизводственногоКалендаря.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Подразделение,
		|	Дата";
		
	Запрос.УстановитьПараметр("Дата1", 			НачалоМесяца( ПериодПланирования.ДатаНачала));
	Запрос.УстановитьПараметр("Дата2", 			КонецМесяца( ПериодПланирования.ДатаОкончания));
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ЧасыПереработки = 0;
	для каждого Переработка из РезультатЗапроса цикл
		ЧасыПереработки = ЧасыПереработки + Переработка.Переработка;
	КонецЦикла;
	
	Возврат ЧасыПереработки;
	
КонецФункции

&НаСервере
Процедура ВывестиСтрокуПереработкаЧасов( Макет, ИспользуемыеТС, ТаблицаРезультат );
	ПрефиксСтроки = "ПереработкаЧасов";
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланыРабот");
	ТаблицаРезультат.Вывести( Область );
	
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ЛимитыНачало");
	ТаблицаРезультат.Присоединить( Область );
	
	Для Каждого ТС ИЗ ИспользуемыеТС Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ЛимитПоТарифнойСтавке");
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|Баланс");
	ТаблицаРезультат.Присоединить( Область );
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ИсполнителиНачало");
	ТаблицаРезультат.Присоединить( Область );
	
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|Исполнитель");
		Область.Параметры.Часов = ЧасовПереработкиИсполнителя( Исполнитель.ФизическоеЛицо);
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИтогиПоПлануРабот( Баланс, БалансЧасов, Макет, ИспользуемыеТС, ТаблицаРезультат )
	ПрефиксСтроки = "ИтогоПоПланамРабот";
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ПланыРабот");
	ТаблицаРезультат.Вывести( Область );
	
	//
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ЛимитыНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого ТС ИЗ ИспользуемыеТС Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ЛимитПоТарифнойСтавке");
		Область.Параметры.Лимит = ТС.ИтогоЛимитЧасов;
		Область.Параметры.План 	= ТС.ИтогоПоПлануЧасов;
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	//
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|Баланс");
	Область.Параметры.Баланс 		= Баланс;
	Область.Параметры.БалансЧасов 	= БалансЧасов;
	ТаблицаРезультат.Присоединить( Область );
	
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки +"|ИсполнителиНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки +"|Исполнитель");
		// +СИТ 20180328
		//Область.Параметры.ПланИсполнителя = ПланИсполнителяВсего( Исполнитель.ФизическоеЛицо);
		Область.Параметры.ПланИсполнителя = ПланИсполнителяВсего( Исполнитель.ФизическоеЛицо, Исполнитель.ТарифнаяСтавка);
		Если ИтогиПоПланамРаботВСумме Тогда
			Область.Параметры.СуммаИсполнителя = Область.Параметры.ПланИсполнителя * Исполнитель.СтавкаФОТ;
		КонецЕсли;
		// -СИТ
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОтчет( ТаблицаРезультат, ОчищатьДокумент = Истина )
	Если ОчищатьДокумент Тогда
		ТаблицаРезультат.Очистить();
	КонецЕсли;
	// планы работ подразделения, имеющие остатки фронта работ на период планирования
	// исполнителей не заполняем
	ЗаполнитьПланыРабот_НаСервере( Подразделение, ПериодПланирования, Истина );
	
	// посещения по планам работ, с учетом уточнения по подразделению
	ЗаполнитьПосещения_ПоПланамРабот( ПериодПланирования );
	
	Если НЕ ТолькоПоПланамРабот Тогда
		// для исполнителей, остальные посещения, не по планам работ
		ЗаполнитьПосещения_ПоПредметамПосещения( ПериодПланирования );
	КонецЕсли;	
	
	Макет 			= РеквизитФормыВЗначение("Объект").ПолучитьМакет("План");
	ИспользуемыеТС 	= ПолучитьИспользуемыеТарифныеСтавки( );
	
	ВывестиШапку( Макет, ИспользуемыеТС, ТаблицаРезультат );
	
	// выводим по планам работ
	БалансИтого 		= 0;
	БалансЧасовИтого 	= 0;
	НомерПоПорядку 	= 1;
	
	Для Каждого СтрокаПланаРабот ИЗ ИтогиПоПланамРабот Цикл
		сБаланс 			= ВывестиСтрокуПоПлануРабот( НомерПоПорядку, СтрокаПланаРабот, Макет, ИспользуемыеТС, ТаблицаРезультат );
		БалансИтого			= БалансИтого + сБаланс.Баланс;
		БалансЧасовИтого	= БалансЧасовИтого + сБаланс.БалансЧасов;
	КонецЦикла;
	
	Если ИтогиПоПланамРабот.Количество() <> 0 Тогда
		// итог по планам работ
		ВывестиИтогиПоПлануРабот( БалансИтого, БалансЧасовИтого, Макет, ИспользуемыеТС, ТаблицаРезультат );
	КонецЕсли;	
	
	Если НЕ ТолькоПоПланамРабот Тогда
		// выводим по отметкам табеля
		Посещения = ПолучитьПредметыПосещения();
		Для Каждого Посещение ИЗ Посещения Цикл
			ВывестиСтрокуПоПредметуПосещения( Посещение, Макет, ИспользуемыеТС, ТаблицаРезультат );
		КонецЦикла;
		
	КонецЕсли;	
	// отклонение от нормы часов
	ВывестиСтрокуПоНормеЧасов( Макет, ИспользуемыеТС, ТаблицаРезультат );
	
	//+СИТ 20180403
	ВывестиСтрокуПереработкаЧасов( Макет, ИспользуемыеТС, ТаблицаРезультат );
	//-СИТ
	
	// скроллинг
	ТаблицаРезультат.ФиксацияСверху = 3;
	ТаблицаРезультат.ФиксацияСлева  = 6 + ИспользуемыеТС.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРезультатПланирования(Команда)
	// 2016 04 29
	ОбнулитьДанныеРасчета();
	
	ПодготовитьОтчет( ТаблицаРезультат );
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьРасчет(Команда)
	ОбнулитьДанныеРасчета();
КонецПроцедуры


#КонецОбласти

#Область ПечатьПлана


&НаСервере
Процедура ПечатьПланаНаСервере( ТабДок )
	Макет 	= РеквизитФормыВЗначение("Объект").ПолучитьМакет("План");
	Область = Макет.ПолучитьОбласть( "Заголовок|ПланыРабот");
	Область.Параметры.Подразделение 		= Подразделение;
	Область.Параметры.ПериодПланирования 	= ПредставлениеПериода( ПериодПланирования.ДатаНачала, 
																	ПериодПланирования.ДатаОкончания,
																	"ФП = Истина ");
	Область.Параметры.НормаРабочегоВремени 	= НормаЧасовЗаМесяц;
	ТабДок.Вывести( Область );
	ПодготовитьОтчет( ТабДок, Ложь );
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПлана(Команда)
	// 2016 04 29
	ОбнулитьДанныеРасчета();
	
	ТабДок = Новый ТабличныйДокумент;
	
	ПечатьПланаНаСервере( ТабДок );
	
	ТабДок.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб 			= Истина;
	ТабДок.ФиксацияСверху 		= 9;
	ТабДок.Показать();
	
КонецПроцедуры

//+СИТ 20180405
&НаКлиенте
Процедура ТаблицаРезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ТипЗнч(Элемент.ТекущаяОбласть.Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь; 
		
		Посещения = ПолучитьФорму("Справочник.ПосещенияКонтрагентов.ФормаСписка"); 
		
		НовыйОтбор = Посещения.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФизическоеЛицо");
		НовыйОтбор.ПравоеЗначение = Расшифровка.ФизическоеЛицо;
		НовыйОтбор.Использование = Истина;
		
		НовыйОтбор = Посещения.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
		НовыйОтбор.ПравоеЗначение = Расшифровка.Подразделение;
		НовыйОтбор.Использование = Истина;
		
		НовыйОтбор = Посещения.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредметПосещения");
		НовыйОтбор.ПравоеЗначение = Расшифровка.ПланРабот;
		НовыйОтбор.Использование = Истина;
		
		НовыйОтборГруппа = Посещения.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НовыйОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		НовыйОтбор = НовыйОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
		НовыйОтбор.ПравоеЗначение = Расшифровка.ДатаС;
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		НовыйОтбор.Использование = Истина;
		
		НовыйОтбор = НовыйОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
		НовыйОтбор.ПравоеЗначение = НачалоДня(Расшифровка.ДатаПО+60*60*24);
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		НовыйОтбор.Использование = Истина;
		
		Посещения.Открыть();		
	КонецЕсли;	

КонецПроцедуры
//-СИТ

#КонецОбласти


