&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	Если Элемент.ВыделенныеЭлементы.Количество()>0 Тогда
		ИзменитьПосещение( Элемент.ВыделенныеЭлементы[0] );
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокКонтрагентов()
	
	// по регистру сведений контрагенты посещений
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыПосещений.Контрагент,
		|	КонтрагентыПосещений.ПредметПосещения,
		|	КонтрагентыПосещений.Часов,
		|	КонтрагентыПосещений.Количество,
		|	КонтрагентыПосещений.Цвет,
		|	КонтрагентыПосещений.Расходы,
		|	КонтрагентыПосещений.Уточнение
		|ИЗ
		|	РегистрСведений.КонтрагентыПосещений КАК КонтрагентыПосещений
		|ГДЕ
		|	КонтрагентыПосещений.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	// таблица на форме
	КонтрагентыПосещений.Очистить();
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(); //.ВыгрузитьКолонку("Контрагент");
	Для Каждого Стр ИЗ РезультатЗапроса Цикл
		СтрКП = КонтрагентыПосещений.Добавить();
		ЗаполнитьЗначенияСвойств( СтрКП, Стр );
		СтрКП.ИндексЦвета = УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьИндексЦвета( Стр.Цвет);
	КонецЦикла;
	
	ОбновитьСписокКонтрагентовПоКалендарю();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокКонтрагентовПоКалендарю()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.Контрагент,
		|	ПосещенияКонтрагентов.ПредметПосещения,
		//|	МАКСИМУМ(ПосещенияКонтрагентов.Часов) КАК Часов,
		|	ПосещенияКонтрагентов.Цвет,
		|	СУММА(ПосещенияКонтрагентов.Часов) КАК ЧасовПоПлану,
		|	СУММА(ПосещенияКонтрагентов.Количество) КАК КоличествоПоПлану,
		|	ПосещенияКонтрагентов.Уточнение
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	ПосещенияКонтрагентов.ФизическоеЛицо = &ФизическоеЛицо
		|	И НЕ ПосещенияКонтрагентов.ПометкаУдаления
		|	И ПосещенияКонтрагентов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ПосещенияКонтрагентов.ПредметПосещения,
		|	ПосещенияКонтрагентов.Цвет,
		|	ПосещенияКонтрагентов.Контрагент,
		|	ПосещенияКонтрагентов.Уточнение";
		
		
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Период = ПериодПланирования();
	Запрос.УстановитьПараметр("НачалоПериода", 	Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", 	Период.ДатаОкончания);
	
	//КонтрагентыПосещений.Очистить();
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(); //.ВыгрузитьКолонку("Контрагент");
	Для Каждого Стр ИЗ РезультатЗапроса Цикл
		Отбор = Новый Структура("Контрагент,ПредметПосещения,Уточнение,Цвет");
		ЗаполнитьЗначенияСвойств( Отбор, Стр );
	
		мС = КонтрагентыПосещений.НайтиСтроки( Отбор );
		Если мС.Количество() = 0 Тогда
			СтрКП = КонтрагентыПосещений.Добавить();
		Иначе
			СтрКП = мС[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств( СтрКП, Стр );
		//
		СтрКП.ИндексЦвета = УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьИндексЦвета( Стр.Цвет);
		
		
	КонецЦикла;
	НормаЧасов 	 = РасчитатьНормуЗаПериод( Период );
	ОстатокНормы = НормаЧасов - РезультатЗапроса.Итог("ЧасовПоПлану");
	
	КонтрагентыПосещений.Сортировать("Контрагент,ПредметПосещения,Уточнение,Цвет");
	
КонецПроцедуры


&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	ФизическоеЛицо = ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо;
	
	УстановитьУсловноеОформление();
	
	
	//Если Не ОбщегоНазначения.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Тогда
	//	Возврат;
	//КонецЕсли;
	
	ОтображаемаяДата 	= НачалоДня(ТекущаяДата());
	// 2016 05 13
	ПериодОтображения 	= Перечисления.ПериодОтображенияРабочегоКалендаря.Месяц;
	ОтображатьЛегенду 	= Ложь;
	
	УстановитьВариантРаботыФормы();
	
	ОбновитьОтображениеСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантРаботыФормы()
	
	КлючНазначенияИспользования = "МойКалендарь";
	Заголовок = НСтр("ru = 'Мой календарь'");
	ФизическоеЛицо = ПользователиКлиентСервер.ТекущийПользователь().ФизическоеЛицо;
	Элементы.ФизическоеЛицо.Видимость = Истина;

КонецПроцедуры


#Область РедактированиеПосещения

// 2015 12 23
// все реквизиты посещения, кроме ключа передаем в параметре РеквизитыПосещения

&НаСервереБезКонтекста
Процедура УстановитьПосещениеОтработано( ПосещениеСс )
	Посещение = ПосещениеСс.Ссылка.ПолучитьОбъект();
	Если НЕ Посещение.Отработано Тогда
		Посещение.Отработано = Истина;
		Попытка
			Посещение.Записать();
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось установить отработано для " + Символы.ПС + 
							  Посещение;
							  
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлючПосещения( Посещение )
	Ключ = ?(Посещение = Неопределено, Неопределено, Посещение.Ссылка);
	Возврат Ключ;
КонецФункции


&НаКлиенте
Процедура ИзменитьПосещение( Событие, РеквизитыПосещения = Неопределено )
	Парам = Новый Структура();
	//// ключ - ссылка на посещение, если неопределено, то новый элемент
	Ключ = КлючПосещения( Событие.Значение );
	Если Ключ <> Неопределено Тогда 
		Парам.Вставить("Ключ", 	Ключ );
	КонецЕсли;
	Парам.Вставить("Начало", 					Событие.Начало );
	Парам.Вставить("Конец", 					Событие.Конец );
	
	// определяет права пользователя
	//+СИТ 20180212 У руководителя меняется форма словаря выбора сотрудника. Зачем???
	//ПользовательНачальникПодразделения();
	//-СИТ
	Парам.Вставить("НачальникПодразделения", 	НачальникПодразделения );
	// реквизиты посещения
	Если РеквизитыПосещения = Неопределено Тогда
		РеквизитыПосещения = Новый Структура;
		РеквизитыПосещения.Вставить("ФизическоеЛицо", ФизическоеЛицо );
		РеквизитыПосещения.Вставить("Подразделение", ГдеРаботает( ФизическоеЛицо, Событие.Начало ));
		
	КонецЕсли;
	Парам.Вставить("РеквизитыПосещения", 		РеквизитыПосещения );
	
	ОткрытьФорму("Справочник.ПосещенияКонтрагентов.Форма.ФормаЭлемента", Парам, ЭтаФорма, УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	Если Элемент.ВыделенныеЭлементы.Количество() <> 0 Тогда
		
		ИзменитьПосещение( Элемент.ВыделенныеЭлементы[0] );
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПосещениеОтработано(Команда)
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() <> 0 Тогда
		Посещение = Элементы.Планировщик.ВыделенныеЭлементы[0];
		УстановитьПосещениеОтработано( Посещение.Значение );
		ОбновитьДанныеКалендаря();

	КонецЕсли;
КонецПроцедуры

#КонецОбласти
	
&НаСервере
Процедура ПользовательНачальникПодразделения()
	НачальникПодразделения = РольДоступна( Метаданные.Роли.НачальникПодразделения );
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасчитатьНормуЗаПериод( ПериодПланирования )
	НормаЧасов = УП_РаботаСРабочимКалендаремСервер.РасчитатьНормуЗаПериод( ПериодПланирования );
	Возврат НормаЧасов;
КонецФункции


&НаКлиенте
Процедура УстановитьЗаголовок()
	ПериодПланирования	= ПериодПланирования();
	НормаЧасов			= РасчитатьНормуЗаПериод( ПериодПланирования );
	
	ЭтаФорма.Заголовок 	= "Календарь посещений на " + ПериодСтрокой( ПериодПланирования ) + " (норма " + НормаЧасов +"ч.)"; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗаголовок();
	ИзмененоФизическоеЛицо(ФизическоеЛицо);
	// вышибает Web-клиента
	#Если Не ВебКлиент Тогда
		ОбновитьДанныеКалендаря();
	//#Иначе
	//	ОбновитьСписокКонтрагентов();					
	#КонецЕсли
		
	
КонецПроцедуры



&НаКлиенте
Процедура ИзмененоФизическоеЛицо(ФизическоеЛицо)
	ОбновитьСписокКонтрагентов();
	НастройкиОтображения.ФизическиеЛица.Очистить();
	НастройкиОтображения.ФизическиеЛица.Добавить( ФизическоеЛицо );

КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	ИзмененоФизическоеЛицо(ФизическоеЛицо);
	ОбновитьДанныеКалендаря();
	
КонецПроцедуры


 #Область ОбработкаЗаполнения

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеПосещение( Посещение )
	Если ЗначениеЗаполнено( Посещение ) Тогда
		СпрОб = Посещение.Ссылка.ПолучитьОбъект();
		Если СпрОб.Отработано Тогда
			Сообщить("Посещение отработано");
			Возврат;
		КонецЕсли;
		СпрОб.УстановитьПометкуУдаления( Истина );
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	Если Элемент.ВыделенныеЭлементы.Количество() > 0 Тогда
		ПометитьНаУдалениеПосещение( Элемент.ВыделенныеЭлементы[0].Значение);
		ОбновитьДанныеКалендаря();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьДанныеКалендаря();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если Параметр <> ФизическоеЛицо Тогда
		Возврат;
	КонецЕсли;
	Если 		ИмяСобытия = "ИзмененоПосещение" Тогда
		ОбновитьДанныеКалендаря();
	ИначеЕсли 	ИмяСобытия = "ИзмененКонтрагентПосещения" Тогда
		//ОбновитьСписокКонтрагентов();
		//ОбновитьДанныеКалендаря();
		
	КонецЕсли;
	ОбновитьСписокКонтрагентов();
	
КонецПроцедуры

#КонецОбласти
 

 #Область ОбработкаПеретаскивания

 
&НаКлиенте
Процедура ПланировщикПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры                                                                                    

&НаКлиенте
Процедура ПланировщикПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	// заполняем событие 
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// номер в списке контрагентов
	РеквизитыПосещения = Новый Структура;

	// индекс с 0
	РеквизитыПосещения.Вставить("Контрагент", 		ПараметрыПеретаскивания.Значение[0].Контрагент);
	РеквизитыПосещения.Вставить("ПредметПосещения", ПараметрыПеретаскивания.Значение[0].ПредметПосещения);
	РеквизитыПосещения.Вставить("Уточнение", 		ПараметрыПеретаскивания.Значение[0].Уточнение);
	РеквизитыПосещения.Вставить("Количество", 		ПараметрыПеретаскивания.Значение[0].Количество);
	РеквизитыПосещения.Вставить("Цвет", 			ПараметрыПеретаскивания.Значение[0].Цвет);
	РеквизитыПосещения.Вставить("Расходы", 			ПараметрыПеретаскивания.Значение[0].Расходы);
	//
	Часов = Макс( 1, ПараметрыПеретаскивания.Значение[0].Часов);
	РеквизитыПосещения.Вставить("Часов", 			Часов );
	РеквизитыПосещения.Вставить("ФизическоеЛицо", 	ФизическоеЛицо);
	РеквизитыПосещения.Вставить("Подразделение", 	ГдеРаботает( ФизическоеЛицо, Дата ));
	//
	ИзменитьПосещение( НовоеСобытие(Дата, Часов), РеквизитыПосещения );
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГдеРаботает( ФизическоеЛицо, Дата )
	м = УП_КадрыСервер.ГдеРаботает( ФизическоеЛицо, Дата );
	Если м.Количество() > 0 Тогда 
		Возврат м[0];
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ФизическоеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыПР = Новый Структура;
	
	Если НачальникПодразделения Тогда
		ФормаВыбора = ПолучитьФорму( "Справочник.ФизическиеЛица.Форма.ФормаВыбораПодразделения", ПараметрыПР, Элемент );
	Иначе
		ФормаВыбора = ПолучитьФорму( "Справочник.ФизическиеЛица.Форма.ФормаВыбораФЛ", ПараметрыПР, Элемент );
	КонецЕсли;
	ФормаВыбора.Открыть();
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НовоеСобытие( ДатаСобытия, Часов = 1 )
	Событие = Новый Структура;
	Событие.Вставить("Значение", Неопределено );
	Событие.Вставить("Начало",  НачалоПосещения( ДатаСобытия ));
	Событие.Вставить("Конец",  	Событие.Начало + 3600 * Часов );
	Возврат Событие;
	
КонецФункции

#КонецОбласти


#Область ФормированиеТабеляРВ

&НаСервереБезКонтекста
Функция ПолучитьСписокОтработанныхПосещенийЗаПериод( ПериодРегистрации, ФизическоеЛицо )
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	ПосещенияКонтрагентов.ФизическоеЛицо = &ФизическоеЛицо
		|	И НЕ ПосещенияКонтрагентов.ПометкаУдаления
		|	И ПосещенияКонтрагентов.Отработано
		|	И ПосещенияКонтрагентов.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца";
	
	Запрос.УстановитьПараметр("НачалоМесяца", 	НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецМесяца", 	КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат РезультатЗапроса;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьТабелиПоФизическомуЛиц( ПериодРегистрации, ФизическоеЛицо )
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабельУчетаРабочегоВремени.Ссылка
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени
		|ГДЕ
		|	ТабельУчетаРабочегоВремени.Проведен
		|	И ТабельУчетаРабочегоВремени.ФизическоеЛицо = &ФизическоеЛицо
		|	И ТабельУчетаРабочегоВремени.ПериодРегистрации = &ПериодРегистрации";
	
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

// если предмет посещения по типу входит в основание записи ТРВ
// то предмет посщения, иначе контрагент
&НаСервереБезКонтекста
Функция ОснованиеПосещенияДляТРВ( Посещение )
	ТипПосещения = ТипЗнч( Посещение.ПредметПосещения );
	Если 	ТипПосещения = Тип("ДокументСсылка.ПланРабот")
	или		ТипПосещения = Тип("ДокументСсылка.ПланРаботТиражный")
	или		ТипПосещения = Тип("СправочникСсылка.ПроектыТиражные") Тогда
		Возврат Посещение.ПредметПосещения;
		
	ИначеЕсли ТипПосещения = Тип("СправочникСсылка.ОтметкиТабеля")	Тогда
		Возврат "";
		
	КонецЕсли;
	
	Возврат Посещение.Контрагент; 
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьТабельРВ( Параметры, Подразделение, ПосещенияПоПодразделению )
	// для красоты
	КонсультацияУКлиента	= Справочники.ОтметкиТабеля.НайтиПоКоду("02");
	ФизическоеЛицо 			= Параметры.ФизическоеЛицо;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабельУчетаРабочегоВремени.Ссылка
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени
		|ГДЕ
		|	ТабельУчетаРабочегоВремени.Подразделение = &Подразделение
		|	И ТабельУчетаРабочегоВремени.ФизическоеЛицо = &ФизическоеЛицо
		|	И ТабельУчетаРабочегоВремени.ПериодРегистрации = &ПериодРегистрации
		|	И НЕ ТабельУчетаРабочегоВремени.ПометкаУдаления
		|	И НЕ ТабельУчетаРабочегоВремени.Проведен";
	
	Запрос.УстановитьПараметр("ПериодРегистрации", 	Параметры.ПериодРегистрации);
	Запрос.УстановитьПараметр("Подразделение", 		Подразделение);
	Запрос.УстановитьПараметр("ФизическоеЛицо", 	ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДокОб = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокОб = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Текст = "Изменили ";
	КонецЦикла;
	//
	Если ДокОб = Неопределено Тогда
		Текст = "Добавили ";
		ДокОб = Документы.ТабельУчетаРабочегоВремени.СоздатьДокумент();
		ДокОб.ПериодРегистрации = Параметры.ПериодРегистрации;
		ДокОб.Организация		= ФизическоеЛицо.Организация;
		ДокОб.Подразделение	 	= Подразделение;
		ДокОб.ФизическоеЛицо 	= ФизическоеЛицо;
	КонецЕсли;
	
	ДокОб.Дата = ТекущаяДата();
	ДокОб.ИсполнительДокумента	= ПараметрыСеанса.ТекущийПользователь;
	// должности
	ТарифнаяСтавка  = Справочники.ТарифныеСтавки.ПустаяСсылка();
	
	Сотрудник 	= УП_КадрыСервер.СотрудникиФизЛица( ФизическоеЛицо, Параметры.ПериодРегистрации ).Найти( Подразделение, "Подразделение" ); 
	Если Сотрудник <> Неопределено Тогда
		ДокОб.Должность = Сотрудник.Должность;
		ТарифнаяСтавка  = Сотрудник.ТарифнаяСтавка;
	КонецЕсли;
	
	ДокОб.РабочееВремя.Очистить();
	Для Каждого СтрПосещение ИЗ ПосещенияПоПодразделению Цикл
		Посещение = СтрПосещение.Посещение;
		
		СтрДок = ДокОб.РабочееВремя.Добавить();
		СтрДок.ДатаТабеля 		= Посещение.Дата;
		СтрДок.Начало			= Час( Посещение.Дата );
		СтрДок.ОтметкаТабеля	= ОтметкаТабеляПоПоПосещению( Посещение, КонсультацияУКлиента);
		СтрДок.КоличествоЧасов	= Посещение.Часов;
		СтрДок.СодержаниеРабот	= Посещение.Результат;
		СтрДок.ТарифнаяСтавка	= ТарифнаяСтавка;
		СтрДок.Основание		= ОснованиеПосещенияДляТРВ( Посещение);
	КонецЦикла;
	// 2016 04 29
	// сортировка по дате + начало
	ДокОб.РабочееВремя.Сортировать("ДатаТабеля,Начало");
	
	Попытка
		ДокОб.Записать( РежимЗаписиДокумента.Запись );
		Сообщение		= Новый СообщениеПользователю;
		Сообщение.Текст = Текст + "табель рабочего времени № " + ДокОб.Номер + " за " + Формат( Параметры.ПериодРегистрации, "ДФ = 'ММММ гггг'") + Символы.ПС +
						  ДокОб.ФизическоеЛицо + Символы.пс + ДокОб.Подразделение;
		Сообщение.Сообщить();
	Исключение
		Сообщение 		= Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось записать табель рабочего времени за " + Формат( Параметры.ПериодРегистрации, "ДФ = 'ММММ гггг'") + 
						 Символы.ПС + ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;

	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтметкаТабеляПоПоПосещению( Посещение, КонсультацияУКлиента)
	Если ТипЗнч( Посещение.ПредметПосещения ) = Тип("СправочникСсылка.ОтметкиТабеля") Тогда
		Возврат Посещение.ПредметПосещения;
	КонецЕсли;
	Возврат КонсультацияУКлиента;
КонецФункции

&НаСервереБезКонтекста
Процедура СформироватьТабельРВ_НаСервере( Параметры )
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.Ссылка КАК Посещение,
		|	ПосещенияКонтрагентов.Подразделение
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	ПосещенияКонтрагентов.Ссылка В(&мПосещений)";
	
	Запрос.УстановитьПараметр("мПосещений", Параметры.Посещения );
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Подразделения	 = РезультатЗапроса.Скопировать(,"Подразделение");
	Подразделения.Свернуть( "Подразделение", );
	
	Для Каждого СтрП ИЗ Подразделения Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("Подразделение", СтрП.Подразделение );
		ПосещенияПоПодразделению = РезультатЗапроса.НайтиСтроки( Отбор );
		
		ОбновитьТабельРВ( Параметры, СтрП.Подразделение, ПосещенияПоПодразделению );
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса( Результат, Параметры ) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СформироватьТабельРВ_НаСервере( Параметры );
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура СформироватьТабельРВ(Команда)
	ПериодРегистрации 		= НачалоМесяца( ОтображаемаяДата );
	ПериодРегистрацииСтр 	= Формат( ПериодРегистрации, "ДФ='ММММ гггг'");
	
	
	//
	мСписокПосещений = ПолучитьСписокОтработанныхПосещенийЗаПериод( ПериодРегистрации, ФизическоеЛицо );
	Если мСписокПосещений.Количество() = 0 Тогда
		ПоказатьПредупреждение(,"За " + ПериодРегистрацииСтр + " нет отработанных посещений");
		Возврат;
	КонецЕсли;
	// за период регистрации есть проведенные табели по сотруднику
	Если ЕстьТабелиПоФизическомуЛиц( ПериодРегистрации, ФизическоеЛицо ) Тогда
		ПоказатьПредупреждение(,"За " + ПериодРегистрацииСтр + " есть проведенные табели");
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПериодРегистрации", 	ПериодРегистрации );
	ДопПараметры.Вставить("ФизическоеЛицо", 	ФизическоеЛицо );
	ДопПараметры.Вставить("Посещения", 			мСписокПосещений );

	ОпОпов = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, ДопПараметры);
	ПоказатьВопрос(ОпОпов, "Сформировать табель рабочего времени за " + ПериодРегистрацииСтр + Символы.ПС + 
					"для " + ФизическоеЛицо+"?", РежимДиалогаВопрос.ДаНет );
					
КонецПроцедуры

#КонецОбласти


#Область ФункционалИзДО


&НаСервере
Процедура ОбновитьОтображениеСервер(Параметр = Неопределено, ИзмененнаяНастройка = Неопределено,
	ОбновитьНастройкиАвтообновления = Ложь)
	
	УП_РаботаСРабочимКалендаремСервер.СохранитьНастройку(НастройкиОтображения, ИзмененнаяНастройка);
	
	НастройкиОтображения = УП_РаботаСРабочимКалендаремСервер.ПолучитьНастройкиОтображения();
	НастройкиОтображения.ВыделенныеДаты 	= ВыделенныеДаты.ВыгрузитьЗначения();
	НастройкиОтображения.ПериодОтображения 	= ПериодОтображения;
	
	УП_РаботаСРабочимКалендаремСервер.ОтобразитьКалендарь(Планировщик, НастройкиОтображения);
	
	ИспользоватьБыстроеРедактирование =  Истина;
		
	
	Если ОбновитьНастройкиАвтообновления Тогда
		//УстановитьАвтообновление();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНастройкиОтображения()
	
	НастройкиОтображения.ФизическиеЛица.Очистить();
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		НастройкиОтображения.ФизическиеЛица.Добавить(ФизическоеЛицо);
	КонецЕсли;
	НастройкиОтображения.ОтображаемаяДата 	= ОтображаемаяДата;
	НастройкиОтображения.ВыделенныеДаты 	= ВыделенныеДаты.ВыгрузитьЗначения();
	НастройкиОтображения.ПериодОтображения 	= ПериодОтображения;
	//
	
КонецПроцедуры



&НаКлиенте
Процедура УстановитьОтображаемуюДату(НоваяОтображаемаяДата)
	
	Элементы.ОтображаемаяДата.ВыделенныеДаты.Очистить();
	ОтображаемаяДата 		= НоваяОтображаемаяДата;
	Элементы.ОтображаемаяДата.ВыделенныеДаты.Добавить(ОтображаемаяДата);
	ВыделенныеДаты.ЗагрузитьЗначения(Элементы.ОтображаемаяДата.ВыделенныеДаты);
	
	ОбновитьНастройкиОтображения();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьЭлементыПланировщика(Планировщик)
	Планировщик.Элементы.Очистить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция КартинкаПосещения( Значение, КартинкаОтработано, КартинкаНеОтработано )
	Возврат ?(Значение.Ссылка.Отработано, КартинкаОтработано, КартинкаНеОтработано);
КонецФункции

&НаКлиенте
Процедура ОбновитьКартинкиПланировщика()
	КартинкаНеОтработано 	= БиблиотекаКартинок.ЗапланированноеВзаимодействие;
	КартинкаОтработано		= БиблиотекаКартинок.Успешно;
	Для Каждого Эл ИЗ Планировщик.Элементы Цикл
		Эл.Картинка = КартинкаПосещения( Эл.Значение, КартинкаОтработано, КартинкаНеОтработано  );
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКалендаря( ИзмененнаяНастройка = Неопределено)
	
	//ИзмененнаяНастройка = Неопределено;
	УП_РаботаСРабочимКалендаремКлиент.ОбновитьОтображениеПланировщика(
			Планировщик, НастройкиОтображения, ИзмененнаяНастройка);
			
	#Если ВебКлиент Тогда
		ОбновитьКартинкиПланировщика();
	#КонецЕсли
	

	ОбновитьСписокКонтрагентов();			
	//
КонецПроцедуры


&НаКлиенте
Процедура ПериодОтображенияПриИзменении(Элемент)
	
	УстановитьОтображаемуюДату(ОтображаемаяДата);
	
	ОбновитьДанныеКалендаря("ПериодОтображения");
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСегодня(Команда)
	УстановитьОтображаемуюДату(ТекущаяДата());
	
	ОбновитьДанныеКалендаря();
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПредыдущийПериод(Команда)
	УстановитьОтображаемуюДату(
		УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаПредыдущегоПериода(
			ПериодОтображения, ОтображаемаяДата));
	
	ОбновитьДанныеКалендаря();
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСледующийПериод(Команда)
	УстановитьОтображаемуюДату(
		УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаСледующегоПериода(
			ПериодОтображения, ОтображаемаяДата));
	
	ОбновитьДанныеКалендаря();
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбновитьДанныеКалендаря();	
КонецПроцедуры


#КонецОбласти



#Область МассовоеЗаполнение

&НаСервереБезКонтекста
Функция ЗаписатьНовоеПосещение( сПосещение )
	СпрОб = Справочники.ПосещенияКонтрагентов.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств( СпрОб, сПосещение );
	
	Попытка
		СпрОб.Записать();
		Возврат Истина;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь 
	КонецПопытки;
	
КонецФункции


&НаСервереБезКонтекста
Процедура УдалитьПосещенияЗаПериод( ФизическоеЛицо, мПредметыПосещений, ПериодПланирования )
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	ПосещенияКонтрагентов.ФизическоеЛицо = &ФизическоеЛицо
		|	И ПосещенияКонтрагентов.ПредметПосещения В(&ПредметыПосещения)
		|	И ПосещенияКонтрагентов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		
		
	Запрос.УстановитьПараметр("ДатаНачала", 		ПериодПланирования.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 		ПериодПланирования.ДатаОкончания);
	Запрос.УстановитьПараметр("ПредметыПосещения", 	мПредметыПосещений);
	Запрос.УстановитьПараметр("ФизическоеЛицо", 	ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпрОб = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		СпрОб.УстановитьПометкуУдаления( Истина );
		Попытка
			СпрОб.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьОтпускаФизическогоЛица( ФизическоеЛицо, Период )
	Сутки = 24 * 60 * 60;
	НачалоМесяцаПосещений = НачалоМесяцаПосещений();
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КадрыОтсутствиеСотрудник.Ссылка.ФизическоеЛицо,
		|	КадрыОтсутствиеСотрудник.Ссылка.ДатаНачала,
		|	КадрыОтсутствиеСотрудник.Ссылка.ДатаОкончания,
		|	КадрыОтсутствиеСотрудник.Ссылка.Факт КАК Отработано,
		|	КадрыОтсутствиеСотрудник.Подразделение,
		|	КадрыОтсутствиеСотрудник.Ссылка.ФизическоеЛицо.Организация.Контрагент КАК Контрагент,
		|	КадрыОтсутствиеСотрудник.Ссылка.СтатусОтсутствия.ОтметкаТабеля КАК ПредметПосещения,
		|	КадрыОтсутствиеСотрудник.Ссылка.СтатусОтсутствия.Цвет КАК Цвет
		|ИЗ
		|	Документ.КадрыОтсутствие.Сотрудник КАК КадрыОтсутствиеСотрудник
		|ГДЕ
		|	КадрыОтсутствиеСотрудник.Ссылка.ФизическоеЛицо = &ФизическоеЛицо
		|	И НЕ КадрыОтсутствиеСотрудник.Ссылка.ПометкаУдаления
		|	И КадрыОтсутствиеСотрудник.Ссылка.ДатаНачала <= &ОкончаниеПериода
		|	И КадрыОтсутствиеСотрудник.Ссылка.ДатаОкончания >= &НачалоПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	КадрыОтсутствиеСотрудник.Ссылка.ДатаОкончания,
		|	КадрыОтсутствиеСотрудник.Ссылка.ДатаНачала,
		|	КадрыОтсутствиеСотрудник.Ссылка.ФизическоеЛицо,
		|	КадрыОтсутствиеСотрудник.Ссылка.Факт,
		|	КадрыОтсутствиеСотрудник.Подразделение,
		|	КадрыОтсутствиеСотрудник.Ссылка.СтатусОтсутствия.ОтметкаТабеля,
		|	КадрыОтсутствиеСотрудник.Ссылка.ФизическоеЛицо.Организация.Контрагент,
		|	КадрыОтсутствиеСотрудник.Ссылка.СтатусОтсутствия.Цвет";
		
		
	
	Запрос.УстановитьПараметр("НачалоПериода", 		Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", 	Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ФизическоеЛицо", 	ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	// предметы посещений, по которым происходит обновление планировщика
	мПредметыПосещений = Новый Массив;
	
	// переводим отпуска в посещения
	ОтсутствияПоДокументам = Новый Соответствие;
	Для Каждого Отпуск ИЗ РезультатЗапроса Цикл
		Д1 = Отпуск.ДатаНачала;
		// 2016 04 26		
		// Пока Д1 <= Отпуск.ДатаОкончания Цикл
		Пока Д1 >= НачалоМесяцаПосещений И Д1 <= Отпуск.ДатаОкончания Цикл
			Если ДатаМежду( Д1, Период.ДатаНачала, Период.ДатаОкончания ) Тогда
			// добавляем посещение
				Часов = УП_ПланыРаботПоПроектам.КоличествоРабочихЧасовВДне( Д1 );
				// 2017 04 17 Мажукин О.
				Если Часов = 7 Тогда
					Часов = 8;
				КонецЕсли;
				
				
				// рабочий день
				Если Часов <> 0 Тогда
					сПосещение = Новый Структура("Подразделение,Контрагент,ПредметПосещения,ФизическоеЛицо,Отработано,Цвет");
					ЗаполнитьЗначенияСвойств( сПосещение, Отпуск );
					сПосещение.Вставить("Часов", 	Часов );
					
					ОтсутствияПоДокументам.Вставить( Д1, сПосещение );
					Если мПредметыПосещений.Найти( Отпуск.ПредметПосещения ) = Неопределено Тогда
						мПредметыПосещений.Добавить( Отпуск.ПредметПосещения );
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Д1 = Д1 + Сутки;
		КонецЦикла;
	КонецЦикла;
	// удаляем посещения с указанными предметами посещений
	Если мПредметыПосещений.Количество() <> 0 Тогда
		УдалитьПосещенияЗаПериод( ФизическоеЛицо, мПредметыПосещений, Период );
		
	КонецЕсли;
	
	//
	Для  Каждого Отсутствие ИЗ ОтсутствияПоДокументам Цикл
		//
		СпрОб = Справочники.ПосещенияКонтрагентов.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств( СпрОб, Отсутствие.Значение );
		// начиная с 9 часов
		СпрОб.Дата = НачалоДня( Отсутствие.Ключ  ) + 3600 * 9;
		
		Попытка
			СпрОб.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	Возврат Истина
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОтсутствиеПослеПодтверждения( Результат, Параметры ) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьОтпускаФизическогоЛица( Параметры.ФизическоеЛицо, Параметры.Период);
		ОбновитьДанныеКалендаря();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПериодПланирования()
	НачалоМесяцаПосещений = НачалоМесяцаПосещений();
	Период	= Новый СтандартныйПериод( НачалоМесяца(НачалоМесяцаПосещений), КонецМесяца(НачалоМесяцаПосещений));

	Возврат Период;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОтпуск(Команда)
	Парам	= Новый Структура;
	Период	= ПериодПланирования();
	Парам.Вставить("Период",  Период );
	Парам.Вставить("ФизическоеЛицо", ФизическоеЛицо );
	ОпОпов 	= Новый ОписаниеОповещения("ЗаполнитьОтсутствиеПослеПодтверждения", ЭтаФорма, Парам );
	ПоказатьВопрос(ОпОпов, "Заполнить отсутствия по кадровым документам за период " + ПериодСтрокой( Период )+"?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПоЛичномуПлануФизическогоЛица( ФизическоеЛицо, Период )
	ОдинЧас	= 60 * 60;
	Сутки 	= 24 * ОдинЧас;
	НачалоМесяцаПосещений = НачалоМесяцаПосещений();
	
	//
	Подразделение	= ГдеРаботает( ФизическоеЛицо, Период.ДатаНачала );
	ЛичныйПлан		= ФизическоеЛицо.РасписаниеРаботы.Выгрузить();
	Дата 			= НачалоДня( Период.ДатаНачала) - Сутки;
	Пока Дата < НачалоДня( Период.ДатаОкончания ) Цикл
		Дата =  Дата  + Сутки;
		Если Дата <  НачалоМесяцаПосещений Тогда 
			Продолжить;
		КонецЕсли;
	
		// рабочий день
		Часов = УП_ПланыРаботПоПроектам.КоличествоРабочихЧасовВДне( Дата );
		Если Часов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// 
		ПланНаДень	= ЛичныйПлан.НайтиСтроки( Новый Структура("ДеньНедели", ДеньНедели(Дата)));
		Для Каждого СтрокаПлана Из ПланНаДень Цикл
			Если 		ЗначениеЗаполнено( СтрокаПлана.Основание ) 		Тогда
				ПредметПосещения = СтрокаПлана.Основание;
			ИначеЕсли 	ЗначениеЗаполнено( СтрокаПлана.ОтметкаТабеля ) 	Тогда
				ПредметПосещения = СтрокаПлана.ОтметкаТабеля;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Контрагент = КонтрагентПоПредмету( ПредметПосещения, ФизическоеЛицо );
			Если НЕ ЗначениеЗаполнено( Контрагент ) Тогда
				Продолжить;
			КонецЕсли;
			//
			сПосещение = Новый Структура;
			сПосещение.Вставить("Подразделение", 	Подразделение);
			сПосещение.Вставить("Контрагент",	 	Контрагент);
			сПосещение.Вставить("ПредметПосещения",	ПредметПосещения);
			сПосещение.Вставить("Уточнение",		СтрокаПлана.Уточнение);
			сПосещение.Вставить("ФизическоеЛицо",	ФизическоеЛицо);
			сПосещение.Вставить("Дата",				Дата + СтрокаПлана.Начало * ОдинЧас);
			сПосещение.Вставить("Часов",			МИН( Часов, СтрокаПлана.КоличествоЧасов));
			сПосещение.Вставить("Задание",			СтрокаПлана.СодержаниеРабот);
			сПосещение.Вставить("Цвет",				СтрокаПлана.Цвет);
			сПосещение.Вставить("Расходы",			СтрокаПлана.Расходы);
	
			ЗаписатьНовоеПосещение( сПосещение );
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоЛичномуПлануПослеПодтверждения( Результат, Параметры ) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоЛичномуПлануФизическогоЛица( Параметры.ФизическоеЛицо, Параметры.Период);
		ОбновитьДанныеКалендаря();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоЛичномуПлану(Команда)
	//Период	= Новый СтандартныйПериод( НачалоМесяца(ОтображаемаяДата), КонецМесяца(ОтображаемаяДата));
	Парам	= Новый Структура;
	Период	= ПериодПланирования();
	Парам.Вставить("Период", Период );
	Парам.Вставить("ФизическоеЛицо", ФизическоеЛицо );
	ОпОпов 	= Новый ОписаниеОповещения("ЗаполнитьПоЛичномуПлануПослеПодтверждения", ЭтаФорма, Парам );
	ПоказатьВопрос(ОпОпов, "Заполнить план посещений по личному плану за период " + ПериодСтрокой( Период )+"?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ВвестиЗаПериодПоЛичномуПлануПослеПодтверждения( Период, Параметры ) Экспорт
	Если Период <> Неопределено Тогда
		// теперь справшиваем 
		Параметры.Вставить("Период", Период );
		ОпОпов 	= Новый ОписаниеОповещения("ЗаполнитьПоЛичномуПлануПослеПодтверждения", ЭтаФорма, Параметры );
		ПоказатьВопрос(ОпОпов, "Заполнить план посещений по личному плану за период " + ПериодСтрокой( Период )+"?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьЗаПериодПоЛичномуПлану(Команда)
	Парам	= Новый Структура;
	Парам.Вставить("ФизическоеЛицо", ФизическоеЛицо );
	
	ОпОпов 	= Новый ОписаниеОповещения("ВвестиЗаПериодПоЛичномуПлануПослеПодтверждения", ЭтаФорма, Парам );
		
	ВыбранныйПериод 		= Новый ДиалогРедактированияСтандартногоПериода();
	ВыбранныйПериод.Период 	= ПериодПланирования();
	ВыбранныйПериод.Показать( ОпОпов );
КонецПроцедуры




&НаСервереБезКонтекста
Процедура ОчиститьПланыПосещенийНаСервере( Параметры )
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	НЕ ПосещенияКонтрагентов.ПометкаУдаления
		|	И НЕ ПосещенияКонтрагентов.Отработано
		|	И ПосещенияКонтрагентов.ФизическоеЛицо = &ФизическоеЛицо
		|	И ПосещенияКонтрагентов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", 	Параметры.Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	Параметры.Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ФизическоеЛицо", Параметры.ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпрОб = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		СпрОб.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПослеПодтверждения( Результат, Параметры ) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОчиститьПланыПосещенийНаСервере( Параметры );
		ОбновитьДанныеКалендаря();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПериодСтрокой( Период )
	Возврат ПредставлениеПериода( Период.ДатаНачала, Период.ДатаОкончания, "ФП = Истина");
КонецФункции

&НаКлиенте
Процедура ОчиститьПланПосещений(Команда)
	// т.к. удаляться будут только запланированные посещения, то ограничений по переоиду посещений ставить не будем
	//Период	= Новый СтандартныйПериод( НачалоМесяца(ОтображаемаяДата), КонецМесяца(ОтображаемаяДата));
	Период	= ПериодПланирования();
	Парам	= Новый Структура;
	Парам.Вставить("Период", Период );
	Парам.Вставить("ФизическоеЛицо", ФизическоеЛицо );
	ОпОпов 	= Новый ОписаниеОповещения("ОчиститьПослеПодтверждения", ЭтаФорма, Парам );
	ПоказатьВопрос(ОпОпов, "Очистить планы посещений за период " + ПериодСтрокой( Период )+"?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаполнитьЗаПериодНаСервере( ФизическоеЛицо, Период, Параметры )
	ОдинЧас	= 60 * 60;
	Сутки 	= 24 * ОдинЧас;
	НачалоМесяцаПосещений = НачалоМесяцаПосещений();
	
	// подразделение
	Параметры.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	Параметры.Вставить("Подразделение", ГдеРаботает( ФизическоеЛицо, Период.ДатаНачала ));
	Дата = НачалоДня( Период.ДатаНачала) - Сутки;
	Пока Дата < НачалоДня( Период.ДатаОкончания ) Цикл
		Дата =  Дата  + Сутки;
		Если Дата < НачалоМесяцаПосещений Тогда 
			Продолжить;
		КонецЕсли;
		// рабочий день
		Часов = УП_ПланыРаботПоПроектам.КоличествоРабочихЧасовВДне( Дата );
		Если Часов = 0 Тогда
			Продолжить;
		КонецЕсли;
		Параметры.Вставить("Дата", НачалоДня( Дата ) + ОдинЧас * 9);
		ЗаписатьНовоеПосещение( Параметры );
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиЗаПериодПослеПодтверждения( Период, Параметры ) Экспорт
	Если Период <> Неопределено Тогда
		// вводим за период
		ЗаполнитьЗаПериодНаСервере( ФизическоеЛицо,  Период, Параметры );
		ОбновитьДанныеКалендаря();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьЗаПериод(Команда)
	
	ТекущиеДанные = Элементы.КонтрагентыПосещений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
	
		Парам	= Новый Структура("Контрагент,ПредметПосещения,Уточнение,Часов,Количество,Цвет,Расходы");
		ЗаполнитьЗначенияСвойств( Парам, ТекущиеДанные );
		
		ОпОпов 	= Новый ОписаниеОповещения("ВвестиЗаПериодПослеПодтверждения", ЭтаФорма, Парам );
		
		ВыбранныйПериод 		= Новый ДиалогРедактированияСтандартногоПериода();
		//ВыбранныйПериод.Период 	= Новый СтандартныйПериод( НачалоМесяца(ОтображаемаяДата), КонецМесяца(ОтображаемаяДата));
		ВыбранныйПериод.Период 	= ПериодПланирования();
		
		ВыбранныйПериод.Показать( ОпОпов );
	КонецЕсли;	
	
КонецПроцедуры


// установить отработано

&НаСервереБезКонтекста
Процедура УстановитьОтработаноЗаПериодПланированияНаСервере( Параметры )
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	НЕ ПосещенияКонтрагентов.ПометкаУдаления
		|	И ПосещенияКонтрагентов.ФизическоеЛицо = &ФизическоеЛицо
		|	И ПосещенияКонтрагентов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПосещенияКонтрагентов.Отработано <> &УстановитьОтработано";
		
		
	Запрос.УстановитьПараметр("НачалоПериода", 			Параметры.Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", 			Параметры.Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ФизическоеЛицо", 		Параметры.ФизическоеЛицо);
	Запрос.УстановитьПараметр("УстановитьОтработано", 	Параметры.УстановитьОтработано);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпрОб = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		СпрОб.Отработано = Параметры.УстановитьОтработано;
		Попытка
			СпрОб.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтработаноПослеПодтверждения( Результат, Параметры ) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьОтработаноЗаПериодПланированияНаСервере( Параметры );
		ОбновитьДанныеКалендаря();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура УстановитьОтработаноЗаПериодПланирования(Команда)
	// т.к. удаляться будут только запланированные посещения, то ограничений по переоиду посещений ставить не будем
	Период	= ПериодПланирования();
	
	Парам	= Новый Структура;
	Парам.Вставить("Период", Период );
	Парам.Вставить("ФизическоеЛицо", ФизическоеЛицо );
	Парам.Вставить("УстановитьОтработано", Истина );
	ОпОпов 	= Новый ОписаниеОповещения("УстановитьОтработаноПослеПодтверждения", ЭтаФорма, Парам );
	ПоказатьВопрос(ОпОпов, "Установить отработано за период " + ПериодСтрокой( Период )+"?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНеОтработаноЗаПериодПланирования(Команда)
	Период	= ПериодПланирования();
	
	
	Парам	= Новый Структура;
	Парам.Вставить("Период", Период );
	Парам.Вставить("ФизическоеЛицо", ФизическоеЛицо );
	Парам.Вставить("УстановитьОтработано", Ложь );
	ОпОпов 	= Новый ОписаниеОповещения("УстановитьОтработаноПослеПодтверждения", ЭтаФорма, Парам );
	ПоказатьВопрос(ОпОпов, "Отменить отработано за период " + ПериодСтрокой( Период )+"?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры



#КонецОбласти

#Область ЗаполнениеЗаявкиНаРасходы

&НаСервереБезКонтекста
Процедура ЗаполнитьЗаявкуНаРасходыНаСервере(ФизическоеЛицо, Период)
	СтатьяРасходов = Константы.СтатьяРасходовПоСотруднику.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.Дата,
		|	ПосещенияКонтрагентов.Расходы КАК Сумма,
		|	ПосещенияКонтрагентов.Подразделение,
		|	ПосещенияКонтрагентов.ПредметПосещения,
		|	ПосещенияКонтрагентов.Результат,
		|	ПосещенияКонтрагентов.Задание,
		|	ПосещенияКонтрагентов.Уточнение
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	ПосещенияКонтрагентов.ФизическоеЛицо = &ФизическоеЛицо
		|	И ПосещенияКонтрагентов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПосещенияКонтрагентов.Отработано
		|	И НЕ ПосещенияКонтрагентов.ПометкаУдаления
		|	И ТИПЗНАЧЕНИЯ(ПосещенияКонтрагентов.ПредметПосещения) В (&ТипыПредметов)
		|	И ПосещенияКонтрагентов.Расходы <> 0";
		
	Запрос.УстановитьПараметр("НачалоПериода", 	Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", 	Период.ДатаОкончания);
	//
	ТипыПредметов = Новый Массив;
	ТипыПредметов.Добавить(Тип("ДокументСсылка.ПланРабот"));
	ТипыПредметов.Добавить(Тип("ДокументСсылка.ПланРаботТиражный"));
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ЗадачиПроектов"));
	
	Запрос.УстановитьПараметр("ТипыПредметов", 	ТипыПредметов);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	//  2016 07 20 - пересчитываем сумму с учетом РКО
	ПроцентРКО = ПлановыйПоказательСметы( Год( ТекущаяДата() ), "СтавкаРКО" )/100;

	// могут быть заявки на разное подразделение
	тз = РезультатЗапроса.Скопировать(,"Подразделение");
	тз.Свернуть("Подразделение", "");
	мПодразделений = тз.ВыгрузитьКолонку( "Подразделение" );
	Для Каждого Подразделение ИЗ мПодразделений Цикл
	
		ДокОб = Документы.ЗаявкаНаРасходПоСотруднику.СоздатьДокумент();
		ДокОб.Дата 					= ТекущаяДата();
		ДокОб.ИсполнительДокумента 	= ПараметрыСеанса.ТекущийПользователь;
		ДокОб.РКО					= Истина;
		ДокОб.ПериодРегистрации		= НачалоМесяца( Период.ДатаНачала );
		ДокОб.ФизическоеЛицо		= ФизическоеЛицо;
		ДокОб.СтатьяСметы			= Справочники.СтатьиСметы.РасходыППпоПроекту;
		// 
		ДокОб.СуммаДокумента		= Окр( РезультатЗапроса.Итог("Сумма") * (1+ ПроцентРКО),2);
		
		ДокОб.Подразделение			= Подразделение;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Подразделение", Подразделение );
		тзПосещениеПоПодразделению = РезультатЗапроса.НайтиСтроки( Отбор );
		Для Каждого Посещение ИЗ  тзПосещениеПоПодразделению Цикл
			Если 		ТипЗнч( Посещение.ПредметПосещения ) = Тип("ДокументСсылка.ПланРабот")
			Или	 		ТипЗнч( Посещение.ПредметПосещения ) = Тип("ДокументСсылка.ПланРаботТиражный") Тогда
				ЗадачаПроекта = Посещение.ПредметПосещения.ЗадачаПроекта;
			ИначеЕсли 	ТипЗнч( Посещение.ПредметПосещения ) = Тип("СправочникСсылка.ЗадачиПроектов") Тогда
				ЗадачаПроекта = Посещение.ПредметПосещения;
			Иначе
				Продолжить;
			КонецЕсли;
			
			СтрДок = ДокОб.Расходы.Добавить();
			СтрДок.Дата 			= Посещение.Дата;
			СтрДок.ЗадачаПроекта 	= ЗадачаПроекта;
			СтрДок.СтатьяРасходов 	= СтатьяРасходов;
			СтрДок.Сумма			= Посещение.Сумма;
			СтрДок.Комментарий		= Посещение.Задание;
		КонецЦикла;
		
		Попытка
			ДокОб.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось записать расходы по посещениям" + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаявкуПослеПодтверждения( Результат, Параметры ) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьЗаявкуНаРасходыНаСервере( Параметры.ФизическоеЛицо, Параметры.Период);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте 
Процедура ЗаполнитьЗаявкуПослеВыбораПериода( Период, Параметры ) Экспорт
	Если Период <> Неопределено Тогда
		// теперь справшиваем 
		Параметры.Вставить("Период", Период );
		ОпОпов 	= Новый ОписаниеОповещения("ЗаполнитьЗаявкуПослеПодтверждения", ЭтаФорма, Параметры );
		ПоказатьВопрос(ОпОпов, "Заполнить заявку на расходы за период " + ПериодСтрокой( Период )+"?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура ЗаполнитьЗаявкуНаРасходы(Команда)
	
	Парам	= Новый Структура;
	Парам.Вставить("ФизическоеЛицо", ФизическоеЛицо );
	
	ОпОпов 	= Новый ОписаниеОповещения("ЗаполнитьЗаявкуПослеВыбораПериода", ЭтаФорма, Парам );
		
	ВыбранныйПериод 		= Новый ДиалогРедактированияСтандартногоПериода();
	ВыбранныйПериод.Период 	= ПериодПланирования();
	ВыбранныйПериод.Показать( ОпОпов );
КонецПроцедуры

#КонецОбласти
