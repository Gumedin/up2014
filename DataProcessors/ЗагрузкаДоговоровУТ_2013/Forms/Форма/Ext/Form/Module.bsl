&НаСервереБезКонтекста
Функция ЗагрузитьВидДокумента( ВидДокумента )
	Попытка
		Возврат Перечисления.ВидыДокументовУТ[ВидДокумента];
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось записать вид документа " + ВидДокумента + ", " + ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
Конецфункции	

&НаСервереБезКонтекста
Функция ЗагрузитьПодразделение_НаСервере( НаименованиеПодразделения )
	СпрСс = Справочники.Подразделения.НайтиПоНаименованию( НаименованиеПодразделения, Истина);
	Если СпрСс.Пустая() Тогда 
		Сообщить("Добавляем подразделение " + НаименованиеПодразделения);
		СпРОб = Справочники.Подразделения.СоздатьЭлемент();
		СпрОб.Наименование = НаименованиеПодразделения;
		Попытка
			СпрОб.Записать();
			Возврат СпрОб.Ссылка;
		Исключение
			Сообщить("Не удалось записать подразделение " + НаименованиеПодразделения + ", " + ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	Конецесли;
	Возврат СпрСс;
КонецФункции

&НаКлиенте
Функция ЗагрузитьПодразделение( ОЛЕПодразделение )
	Если ОЛЕПодразделение.Пустая() Тогда Возврат Неопределено; КонецЕсли;
	НаименованиеПодразделения = СокрЛП( ОЛЕПодразделение.Наименование );
	Если НЕ ЗначениеЗаполнено(НаименованиеПодразделения) Тогда Возврат Неопределено; КонецЕсли;
	
	Возврат ЗагрузитьПодразделение_НаСервере( НаименованиеПодразделения );
КонецФункции


&НаСервереБезКонтекста
Функция НайтиДоговорПоНомеру( НомерДоговора, ДатаДоговора )
	ДокСс = Документы.Договор.НайтиПоНомеру( НомерДоговора, ДатаДоговора );
	Если ДокСс.Пустая() Тогда Возврат Неопределено; КонецЕсли;
	Возврат ДокСс;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиОплатуПоНомеру(  НомерПлатежа, ДатаПлатежа )
	ДокСс = Документы.Оплата.НайтиПоНомеру(  НомерПлатежа, ДатаПлатежа );
	Если ДокСс.Пустая() Тогда Возврат Неопределено; КонецЕсли;
	Возврат ДокСс;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиОрганизациюПоПрефиксу( Префикс );		
	Возврат Справочники.Организации.НайтиПоРеквизиту( "Префикс", Префикс);
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьПорядокРасчетов( Название )
	
	Если Название = "По заказам"	Тогда
		Возврат Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	Иначе
		Возврат Перечисления.ПорядокРасчетов.ПоНакладным;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция КлиентНайтиКонтрагентаПоИННКПП(ИННКонтрагента, КППКонтрагента)
	Отбор = НОВЫЙ Структура("ИНН");
	Отбор.ИНН = ИННКонтрагента;
	
	Выборка = Справочники.Контрагенты.Выбрать( , , Отбор);
	Пока Выборка.Следующий() Цикл
		Если Выборка.КПП = КППКонтрагента Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// 21,10,2014
// ищем по заголовку в УТ 11
&НаКлиенте
Функция КлиентЗначениеДопР( БазаОЛЕ, ОбъектДопРекв, НазваниеДопРеквизита ) Экспорт
	ПВХ = БазаОЛЕ.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Заголовок", НазваниеДопРеквизита);
	Для Каждого СтрокаДР ИЗ ОбъектДопРекв.ДополнительныеРеквизиты Цикл
		Если СокрЛП(ПВХ.Заголовок)	=	СокрЛП(СтрокаДР.Свойство.Заголовок) Тогда
			Возврат СтрокаДР.Значение;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции



//*******************************************************************************
//	
//

&НаСервереБезКонтекста
Функция ЗагрузитьСоглашениеСКлиентом( Наименование, ДоговорПоППЛО = Ложь, ПорядокРасчетов )
	СпрСс = Справочники.СоглашенияСКлиентами.НайтиПоНаименованию( Наименование, Истина );
	Если НЕ СпрСс.Пустая() Тогда
		Если СпрСс.ППЛО 			= ДоговорПоППЛО 
		и	 СпрСс.ПорядокРасчетов 	= ПорядокРасчетов Тогда
			Возврат СпрСс;
		Иначе
			СпрОб = СпрСс.ПолучитьОбъект();
		КонецЕсли;
	
	Иначе
		
		СпрОб = Справочники.СоглашенияСКлиентами.СоздатьЭлемент();
		СпрОб.Наименование 	= Наименование;
	КонецЕсли;
	СпрОб.ППЛО				= ДоговорПоППЛО;
	СпрОб.ПорядокРасчетов	= ПорядокРасчетов;
		
		
	Попытка
		СпрОб.Записать();
		Возврат СпрОб.Ссылка;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицу_НаКлиенте(  БазаОЛЕ  )
	Объект.ТабДоговоров.Очистить();
	Объект.ТабГрафикиОплатыДоговоров.Очистить();
	Объект.ТабОтгрузкиПоДоговору.Очистить();	
	
	ВыборкаОЛЕ 	= БазаОЛЕ.Документы.ЗаказКлиента.Выбрать( НачалоДня(ПериодОтбора.ДатаНачала), КонецДня( ПериодОтбора.ДатаОкончания ));
	
	Пока ВыборкаОЛЕ.Следующий()  Цикл
		Если НЕ ВыборкаОЛЕ.Проведен Тогда Продолжить; КонецЕсли;
		
		Аннулирован	= КлиентЗначениеДопР( БазаОЛЕ, ВыборкаОЛЕ.Ссылка, "Аннулирован");
		Если Аннулирован <> Неопределено И Аннулирован Тогда Продолжить; КонецЕсли;
		
		//Добавлено. Гумеидн Артур 12.12.2017
		//По требованию задачи #122980
		НеЗаполненоПолеВозвращен = Истина;
		Для Каждого ДопСвойство из ВыборкаОЛЕ.ДополнительныеРеквизиты Цикл 
			Если ДопСвойство.Свойство.Description = "Возвращен (Заказ клиента)" Тогда
				НеЗаполненоПолеВозвращен = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если НеЗаполненоПолеВозвращен Тогда Продолжить; КонецЕсли;
		//Конец добавления
		
		ИННКонтрагента 	= СокрЛП(ВыборкаОЛЕ.Контрагент.ИНН);
		КППКонтрагента 	= СокрЛП(ВыборкаОЛЕ.Контрагент.КПП);
		Контрагент 		= КлиентНайтиКонтрагентаПоИННКПП( ИННКонтрагента,  КППКонтрагента);
		Если Контрагент = Неопределено Тогда
			Сообщить("Нет контрагента с ИНН [" + ИННКонтрагента + "], КПП [" + КППКонтрагента +"]");
			Продолжить;
		КонецЕсли;
		
		НомерДоговора 	= ВыборкаОЛЕ.Номер;
		ДатаДоговора	= ВыборкаОЛЕ.Дата;
		Договор 		= НайтиДоговорПоНомеру( НомерДоговора,ДатаДоговора);
		Переносить		= ?(Договор = Неопределено, Истина, Ложь);
		
		СтрДог 						= Объект.ТабДоговоров.Добавить();
		СтрДог.Переносить			= Переносить;
		СтрДог.Номер				= НомерДоговора;
		СтрДог.Дата			 		= ДатаДоговора; 
		СтрДог.Организация			= НайтиОрганизациюПоПрефиксу( СокрЛП(ВыборкаОЛЕ.Организация.Префикс) + "-" );
	
		СтрДог.НачалоДоговора		= КлиентЗначениеДопР( БазаОЛЕ, ВыборкаОЛЕ.Ссылка, "Начало");
		СтрДог.ОкончаниеДоговора	= КлиентЗначениеДопР( БазаОЛЕ, ВыборкаОЛЕ.Ссылка, "Окончание");
		СтрДог.Контрагент			= Контрагент;
		СтрДог.СуммаДокумента 		= ВыборкаОЛЕ.СуммаДокумента;
		//СтрДог.Аннулирован 			= Аннулирован;
		// проект ??? 21.10.2014
		СтрДог.Проект				= КлиентЗначениеДопР( БазаОЛЕ, ВыборкаОЛЕ.Ссылка, 			 "Проект");
		СтрДог.ДоговорПоППЛО 		= КлиентЗначениеДопР( БазаОЛЕ, ВыборкаОЛЕ.Ссылка.Соглашение, "Включает ПП(ЛО)");
		// в договор ставим из заказа клиента
		СтрДог.ПорядокРасчетов 		= ПолучитьПорядокРасчетов( БазаОЛЕ.String(ВыборкаОЛЕ.ПорядокРасчетов));
		// в справочник ставим из типового соглашения
		СтрДог.Соглашение			= ЗагрузитьСоглашениеСКлиентом( ВыборкаОЛЕ.Ссылка.Соглашение.Наименование, СтрДог.ДоговорПоППЛО, 
																	ПолучитьПорядокРасчетов( БазаОЛЕ.String(ВыборкаОЛЕ.Соглашение.ПорядокРасчетов)) );
		
		// Загружаем график оплаты
		//ГрафикОЛЕ = БазаОЛЕ.Справочники.ГрафикиОплаты.НайтиПоНаименованию( ВыборкаОЛЕ.ГрафикОплаты.Наименование);
		
		//Добавлено 22.05.2018 по задаче #000000 Гумедин А.Г.
//		Если СтрДог.ПорядокРасчетов = ПредопределенноеЗначение( "Перечисление.ПорядокРасчетов.ПоНакладным")
			Если ВыборкаОЛЕ.Соглашение.Наименование = "Государственный контракт" Тогда
				Запрос = БазаОЛЕ.NewObject("Запрос");
				
				//Обновлено 22.05.2018 по задаче #129999 Гумедин А.Г.
				Запрос.Текст = "ВЫБРАТЬ
	               |	АктВыполненныхРабот.Дата КАК Дата,
	               |	АктВыполненныхРабот.ДатаПлатежа,
	               |	АктВыполненныхРабот.СуммаДокумента,
	               |	""Услуга"" КАК ТипНоменклатуры
	               |ИЗ
	               |	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	               |ГДЕ
	               |	АктВыполненныхРабот.ЗаказКлиента = &ЗаказКлиента
	               |	И АктВыполненныхРабот.ПометкаУдаления = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	РеализацияТоваровУслуг.Дата,
	               |	РеализацияТоваровУслуг.ДатаПлатежа,
	               |	РеализацияТоваровУслуг.СуммаДокумента,
	               |	""Товар""
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента
	               |	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ";
				
				Запрос.УстановитьПараметр("ЗаказКлиента", ВыборкаОЛЕ.Ссылка);
		
				РезультатЗапроса = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СтрокаОД = Объект.ТабОтгрузкиПоДоговору.Добавить();
					СтрокаОД.Номер = НомерДоговора;
					СтрокаОД.ДатаОтгрузки = ВыборкаДетальныеЗаписи.Дата;
					СтрокаОД.ТипНоменклатуры = ТипНоменклатурыПоНазванию(ВыборкаДетальныеЗаписи.ТипНоменклатуры);
					СтрокаОД.Сумма = ВыборкаДетальныеЗаписи.СуммаДокумента;
					
					СтрГО = Объект.ТабГрафикиОплатыДоговоров.Добавить();
					СтрГО.Номер = НомерДоговора;
					СтрГО.ДатаПлатежа = ВыборкаДетальныеЗаписи.ДатаПлатежа;
					СтрГО.ТипНоменклатуры = ТипНоменклатурыПоНазванию(ВыборкаДетальныеЗаписи.ТипНоменклатуры);
					СтрГО.СуммаПлатежа = ВыборкаДетальныеЗаписи.СуммаДокумента;			
				КонецЦикла;					
			Иначе
				//Добавлено условие 23.05.2018 По задаче 129631 Гумедин А.Г. 
				//Требуется, что бы разбивать корректно вносить Договора с авансом в 30%
				Если СтрДог.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
					// 2017 03 24
					// график оплаты берем из соглашения 
					ГрафикОЛЕ = БазаОЛЕ.Справочники.ГрафикиОплаты.НайтиПоНаименованию( ВыборкаОЛЕ.Соглашение.ГрафикОплаты.Наименование);
							
					// Загружаем даты отгрузки
					НеОтгружатьЧастями  	= ВыборкаОЛЕ.НеОтгружатьЧастями;
					ДатаОтгрузкиДоговора 	= ВыборкаОЛЕ.ДатаОтгрузки;
					ДатаОтгрузкиДоговора    = ?(ЗначениеЗаполнено( ДатаОтгрузкиДоговора), ДатаОтгрузкиДоговора, ВыборкаОЛЕ.Дата );
					Для Каждого СтрТов ИЗ ВыборкаОЛЕ.Товары Цикл
						ТипНоменклатуры = ТипНоменклатурыПоНазванию(СтрТов.Номенклатура.ВидНоменклатуры.Description);
						// если дата
						ДатаОтгрузки =  ?( НеОтгружатьЧастями,  ДатаОтгрузкиДоговора, СтрТов.ДатаОтгрузки );
						// если дата не заполнена в строке
						ДатаОтгрузки = ?(ЗначениеЗаполнено( ДатаОтгрузки), ДатаОтгрузки, ВыборкаОЛЕ.Дата );
						
						Отбор = Новый Структура;
						Отбор.Вставить("Номер", 		НомерДоговора );
						Отбор.Вставить("ДатаОтгрузки",  ДатаОтгрузки );
						Отбор.Вставить("ТипНоменклатуры",  ТипНоменклатуры );
						
						мСтр = Объект.ТабОтгрузкиПоДоговору.НайтиСтроки( Отбор );
						Если мСтр.Количество() = 0 Тогда
							СтрокаОД = Объект.ТабОтгрузкиПоДоговору.Добавить();
							ЗаполнитьЗначенияСвойств( СтрокаОД, Отбор );
						Иначе
							СтрокаОД = мСтр[0];
						КонецЕсли;
						СтрокаОД.Сумма = СтрокаОД.Сумма + СтрТов.Сумма;
						
						Для Каждого Этап ИЗ ГрафикОЛЕ.Этапы Цикл
							// например предоплата 100%
							Если Этап.ПроцентПлатежа = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ДатаПлатежа =  ДатаОтгрузки + Этап.Сдвиг*24*60*60;
							Отбор = Новый Структура;
							Отбор.Вставить("Номер", НомерДоговора );
							Отбор.Вставить("ДатаПлатежа", ДатаПлатежа);
							Отбор.Вставить("ТипНоменклатуры",  ТипНоменклатуры );
							
							мСтр = Объект.ТабГрафикиОплатыДоговоров.НайтиСтроки( Отбор );
							Если мСтр.Количество() = 0 Тогда
								СтрГО = Объект.ТабГрафикиОплатыДоговоров.Добавить();
								СтрГО.Номер = НомерДоговора;
								СтрГО.ДатаПлатежа = ДатаПлатежа;
								СтрГО.ТипНоменклатуры = ТипНоменклатуры;
							Иначе
								СтрГО = мСтр[0];
							КонецЕсли;
							СтрГО.СуммаПлатежа = СтрокаОД.Сумма * Этап.ПроцентПлатежа / 100;			
						КонецЦикла;						
					КонецЦикла;
				Иначе
					//Добавлено 23.05.2018 По задаче 129631 Гумедин А.Г.
					//Работа с договоами с оплатой по авансу
					// 2017 03 24
					// график оплаты берем из соглашения 
					ГрафикОЛЕ = БазаОЛЕ.Справочники.ГрафикиОплаты.НайтиПоНаименованию( ВыборкаОЛЕ.Соглашение.ГрафикОплаты.Наименование);

					Если Найти(ГрафикОЛЕ.Description, "Предоплата") Тогда
						ГрафикОЛЕ =  ВыборкаОЛЕ.ЭтапыГрафикаОплаты;	
						ПоПлануПлатежа = Истина;
					Иначе
						ГрафикОЛЕ = ГрафикОЛЕ.Этапы;
						ПоПлануПлатежа = Ложь;
					КонецЕсли;	
							
					// Загружаем даты отгрузки
					НеОтгружатьЧастями  	= ВыборкаОЛЕ.НеОтгружатьЧастями;
					ДатаОтгрузкиДоговора 	= ВыборкаОЛЕ.ДатаОтгрузки;
					ДатаОтгрузкиДоговора    = ?(ЗначениеЗаполнено( ДатаОтгрузкиДоговора), ДатаОтгрузкиДоговора, ВыборкаОЛЕ.Дата );
					
					Для Каждого СтрТов ИЗ ВыборкаОЛЕ.Товары Цикл
						ТипНоменклатуры = ТипНоменклатурыПоНазванию(СтрТов.Номенклатура.ВидНоменклатуры.Description);
						// если дата
						ДатаОтгрузки =  ?( НеОтгружатьЧастями,  ДатаОтгрузкиДоговора, СтрТов.ДатаОтгрузки );
						// если дата не заполнена в строке
						ДатаОтгрузки = ?(ЗначениеЗаполнено( ДатаОтгрузки), ДатаОтгрузки, ВыборкаОЛЕ.Дата );
						
						Отбор = Новый Структура;
						Отбор.Вставить("Номер", 		НомерДоговора );
						Отбор.Вставить("ДатаОтгрузки",  ДатаОтгрузки );
						Отбор.Вставить("ТипНоменклатуры",  ТипНоменклатуры );
						
						мСтр = Объект.ТабОтгрузкиПоДоговору.НайтиСтроки( Отбор );
						Если мСтр.Количество() = 0 Тогда
							СтрокаОД = Объект.ТабОтгрузкиПоДоговору.Добавить();
							ЗаполнитьЗначенияСвойств( СтрокаОД, Отбор );
						Иначе
							СтрокаОД = мСтр[0];
						КонецЕсли;
						СтрокаОД.Сумма = СтрокаОД.Сумма + СтрТов.Сумма;
						
						
						Для Каждого Этап ИЗ ГрафикОЛЕ Цикл
							
							Если ПоПлануПлатежа Тогда 
								ДатаПлатежа =  Этап.ДатаПлатежа;
							Иначе 
								// например предоплата 100%
								Если Этап.ПроцентПлатежа = 0 Тогда
									Продолжить;
								КонецЕсли;
							
								ДатаПлатежа =  ДатаОтгрузки + Этап.Сдвиг*24*60*60;
							КонецЕсли;
							
							Отбор = Новый Структура;
							Отбор.Вставить("Номер", НомерДоговора );
							Отбор.Вставить("ДатаПлатежа", ДатаПлатежа);
							Отбор.Вставить("ТипНоменклатуры",  ТипНоменклатуры );
							
							мСтр = Объект.ТабГрафикиОплатыДоговоров.НайтиСтроки( Отбор );
							Если мСтр.Количество() = 0 Тогда
								СтрГО = Объект.ТабГрафикиОплатыДоговоров.Добавить();
								СтрГО.Номер = НомерДоговора;
								СтрГО.ДатаПлатежа = ДатаПлатежа;
								СтрГО.ТипНоменклатуры = ТипНоменклатуры;
							Иначе
								СтрГО = мСтр[0];
							КонецЕсли;
							
							Если ПоПлануПлатежа Тогда 
								СтрГО.СуммаПлатежа = Этап.СуммаПлатежа;
							Иначе
								СтрГО.СуммаПлатежа = СтрокаОД.Сумма * Этап.ПроцентПлатежа / 100;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;	
				КонецЕсли;
				// Конец добавления //////////////
			КонецЕсли;				
			
		//ИначеЕсли СтрДог.ПорядокРасчетов = "По заказам" Тогда
		//ИначеЕсли СтрДог.ПорядокРасчетов = ПредопределенноеЗначение( "Перечисление.ПорядокРасчетов.ПоЗаказамНакладным") Тогда 
		//	// просто переписываем индивидуальный график платежей по заказу
		//	Для Каждого ЭтапПлатежа ИЗ ВыборкаОЛЕ.ЭтапыГрафикаОплаты Цикл
		//		СтрГО = Объект.ТабГрафикиОплатыДоговоров.Добавить();
		//		СтрГО.Номер = НомерДоговора;
		//		// заполняются дата платежа, платежа и сумма
		//		ЗаполнитьЗначенияСвойств( СтрГО, ЭтапПлатежа );
		//	КонецЦикла;
		//	
		//КонецЕсли;
		
		
	КонецЦикла;
	
	//Добавлено 30.05.2018 по Задаче #129747 Гумедин А.Г.
	ПроверкаНаНеобходиомстьЗагрузки();
КонецПроцедуры

//Добавлено 30.05.2018 по Задаче #129747 Гумедин А.Г.
//Проверка договоров на необходимость загрузки (сравнение сумм, если изменились, требуется загрузка)
Процедура ПроверкаНаНеобходиомстьЗагрузки() 
	Отгрузки = Объект.ТабОтгрузкиПоДоговору;
	Оплаты = Объект.ТабГрафикиОплатыДоговоров;
	ТекущийДоговор = "";
	
	//Проверка отгрузок
	Для Каждого Отгрузка Из Отгрузки Цикл 		
		ТипНоменклатуры =  Отгрузка.ТипНоменклатуры;
		//Получаем текущий договор и объект уже загруженного договора
		Если НЕ ТекущийДоговор = Отгрузка.Номер Тогда
			ТекущийДоговор = Отгрузка.Номер;
			ДоговорЗагрузки = Объект.ТабДоговоров.НайтиСтроки(Новый Структура("Номер", ТекущийДоговор))[0];			
			Если ДоговорЗагрузки.Переносить Тогда Продолжить КонецЕсли;			
			
			Договор = Документы.Договор.НайтиПоНомеру(ТекущийДоговор);
			ОтгрузкиДоговора = Договор.ЭтапыГрафикаОтгрузкиПоДоговорам; 
		КонецЕсли;
		
		ИскомаяСтрокаОтгрузки = Неопределено;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ТипНоменклатуры", Отгрузка.ТипНоменклатуры);
		ПараметрыОтбора.Вставить("ДатаОтгрузки", Отгрузка.ДатаОтгрузки);
		
		МассивОтгрузки = ОтгрузкиДоговора.НайтиСтроки(ПараметрыОтбора);
		
		//Проверка на наличие сумм в загруженном договоре
		Если МассивОтгрузки.Количество() > 0 Тогда
      		СуммаОтгрузки = МассивОтгрузки[0].СуммаОтгрузки;
		Иначе 
			ДоговорЗагрузки.Переносить = Истина;
			Продолжить;
		КонецЕсли;
		//
		Если НЕ СуммаОтгрузки = Отгрузка.Сумма Тогда	
			ДоговорЗагрузки.Переносить = Истина;
			Если Договор.Проведен Тогда				
				Сообщить("Изменились суммы отгрузки/оплаты по договору " + ТекущийДоговор + ", будет распроведен для корректной загрузки");
			КонецЕсли;	
		КонецЕсли;		  
	КонецЦикла;	
	ТекущийДоговор = "";
	
	//Проверка отплаты
	Для Каждого Оплата Из Оплаты Цикл 		
		ТипНоменклатуры =  Отгрузка.ТипНоменклатуры;
		//Получаем текущий договор и объект уже загруженного договора
		Если НЕ ТекущийДоговор = Отгрузка.Номер Тогда
			ТекущийДоговор = Оплата.Номер;
			ДоговорЗагрузки = Объект.ТабДоговоров.НайтиСтроки(Новый Структура("Номер", ТекущийДоговор))[0];			
			Если ДоговорЗагрузки.Переносить Тогда Продолжить КонецЕсли;			
			
			Договор = Документы.Договор.НайтиПоНомеру(ТекущийДоговор);
			ОплатыДоговора = Договор.ЭтапыГрафикаОплатыПоДоговорам; 
		КонецЕсли;
		
		ИскомаяСтрокаОплаты = Неопределено;
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ТипНоменклатуры", Оплата.ТипНоменклатуры);
		ПараметрыОтбора.Вставить("ДатаПлатежа", Оплата.ДатаПлатежа);
		
		МассивОплаты = ОплатыДоговора.НайтиСтроки(ПараметрыОтбора);
		
		//Проверка на наличие сумм в загруженном договоре
		Если МассивОплаты.Количество() > 0 Тогда
      		СуммаОплаты = МассивОплаты[0].СуммаПлатежа;
		Иначе 
			ДоговорЗагрузки.Переносить = Истина;
			Продолжить;
		КонецЕсли;
		//
		Если НЕ СуммаОплаты = Оплата.СуммаПлатежа Тогда	
			ДоговорЗагрузки.Переносить = Истина;
			Если Договор.Проведен Тогда
				Сообщить("Изменились суммы отгрузки/оплаты по договору " + ТекущийДоговор + ", будет распроведен для корректной загрузки");
			КонецЕсли;	
		КонецЕсли;		  
	КонецЦикла;
КонецПроцедуры
///////////////////////////////////////////////////////////

&НаКлиенте
Процедура ЗаполнитьТаблицу(Команда)
	//
	БазаОЛЕ =  УП_Клиент.КлиентПодключитьсяКБазеОЛЕ_ПоИмени( "УправлениеТорговлей" );
	Если БазаОЛЕ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//
	ЗаполнитьТаблицу_НаКлиенте(  БазаОЛЕ );
	БазаОЛЕ = "";
	
	ПоказатьПредупреждение(,"Таблица договоров заполнена!", 10);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьОбластьДоговора( ОбластьДоговор, Дог, Результат, Примечание )
	
	ЗаполнитьЗначенияСвойств( ОбластьДоговор.Параметры, Дог );
	//
	ОбластьДоговор.Параметры.Результат		= Результат;
	ОбластьДоговор.Параметры.Примечание		= Примечание;
	
	
КонецПроцедуры


&НаСервере
Функция НормироватьКоэффициенты( МассивКоэфф, Норма )
	мНормированныйКоэфф = Новый Массив;
	Если МассивКоэфф.Количество() = 0 Тогда
		Возврат мНормированныйКоэфф;
	КонецЕсли;
	
	Если МассивКоэфф.Количество() = 1 Тогда
		мНормированныйКоэфф.Добавить( Норма );
		Возврат мНормированныйКоэфф;
	КонецЕсли;
	мРез	= РаспределитьПропорционально( Норма, МассивКоэфф, 2);
	мНормированныйКоэфф = Новый Массив;
	Для Каждого РезК ИЗ мРез Цикл
	    мНормированныйКоэфф.Добавить( РезК );
	КонецЦикла;
	Возврат мНормированныйКоэфф;
КонецФункции


// коэффициенты в этапах оплаты относятся к сумме документа
// вначале суммы по отгрузке нормируем по сумме документа
// затем для каждой дате отгрузке распределяем её на 100%
// после этого расставляем проценты по суммам на 100%
&НаСервере
Процедура РаспределитьСуммыПоОтгрузкамПоОплатам( ДокОб, ОтгрузкиПоДоговору, ЭтапыОплаты )
	//
	ДокОб.ЭтапыГрафикаОплаты.Очистить();
	Сутки 		= 24 * 60 * 60;

	СуммаДокумента = ДокОб.СуммаДокумента;
	Если СуммаДокумента = 0 Тогда
		Возврат;
	КонецЕсли;
	// одинаковы для всех отгрузок
	мКоэффОплаты = НормироватьКоэффициенты( ЭтапыОплаты.ВыгрузитьКолонку( "ПроцентПлатежа"), 100);
	
	// 
	ИндексСуммы	= 0;
	мСуммы 		= НормироватьКоэффициенты( ОтгрузкиПоДоговору.ВыгрузитьКолонку( "Сумма"), СуммаДокумента );
	Для Каждого СтрокаОпД ИЗ ОтгрузкиПоДоговору Цикл
		// вместо СтрокаОпД.Сумма
		мРез 	= РаспределитьПропорционально( мСуммы[ИндексСуммы], мКоэффОплаты, 2);
		Индекс 	= 0;
		Для Каждого Этап ИЗ ЭтапыОплаты Цикл
			ДатаПлатежа		= СтрокаОпД.ДатаОтгрузки + Сутки * Этап.Сдвиг;
			СуммаПлатежа	= мРез[Индекс];
			Индекс = Индекс + 1;
			
			Если Не ЗначениеЗаполнено( ДатаПлатежа ) Тогда
				Сообщить("Не заполнена дата платежа " + ДокОб.Номер);
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено( СуммаПлатежа ) Тогда
				Сообщить("Не заполнена сумма платежа на " + Формат(ДатаПлатежа, "ДЛФ=DD")+ " " + ДокОб.Номер);
				Продолжить;
			КонецЕсли;
			
			//Изменено 22.05.2018 по задачче #000000 Гумедин А.Г.
			//СтрокаЭГО 				= ДокОб.ЭтапыГрафикаОплаты.Добавить();
			СтрокаЭГО 				= ДокОб.ЭтапыГрафикаОплатыПоДоговорам.Добавить();
			//Конец изменения ///////////////////////////////////
			
			СтрокаЭГО.ДатаПлатежа 	= ДатаПлатежа;
			// Если
			СтрокаЭГО.СуммаПлатежа  = СуммаПлатежа;
			
		КонецЦикла;
		
		// 
		ИндексСуммы	= ИндексСуммы + 1;
	КонецЦикла;
	
	// теперь нормируем процент платежа по всему договору
	мНормированныйПП = НормироватьКоэффициенты( ДокОб.ЭтапыГрафикаОплаты.ВыгрузитьКолонку( "СуммаПлатежа"), 100);
	Индекс 	= 0;

	Для Каждого Этап ИЗ ДокОб.ЭтапыГрафикаОплаты Цикл
		Этап.ПроцентПлатежа = мНормированныйПП[Индекс];
		Индекс = Индекс + 1;
	КонецЦикла;
		
КонецПроцедуры


//*************************************************************************
//	Если договор аннулирован и его нет, он не переносится, если есть, то помечается на удаление
//	Если договор не аннулирован, и его нет, то он создается, если он есть и помечен на удаление, то он снимается с удаления
//
&НаСервере
Процедура ЗагрузитьДоговоры_НаСервере( ТабДок )
	Макет = Обработки.ЗагрузкаДоговоровУТ_2013.ПолучитьМакет("ПротоколПереноса");
	//
	ТабДок.Очистить();
	ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.ПечПериодПереноса = ПредставлениеПериода( НачалоДня(ПериодОтбора.ДатаНачала), КонецДня(ПериодОтбора.ДатаОкончания),  "ФП = Истина");//"ДЛФ=D")
	ТабДок.Вывести(ОбластьШапка);
	
	СуммаВсего = 0;
		
	Для Каждого Дог Из Объект.ТабДоговоров Цикл
		Если НЕ Дог.Переносить Тогда Продолжить; КонецЕсли;
		//Дог.Переносить = Ложь;
		
		//
		ОбластьДоговор = Макет.ПолучитьОбласть("СтрокаДоговора");
		ОбластьДоговор.Параметры.НомерСтроки 	= Объект.ТабДоговоров.Индекс(Дог)+1;
		
		СуммаВсего 	= СуммаВсего + Дог.СуммаДокумента;
		
		// у договора не может быть изменен контрагент !!!
		ДокСс = Документы.Договор.НайтиПоНомеру( Дог.Номер, Дог.Дата );
		Результат	= "";
		
		Если ДокСс.Пустая() Тогда
			ДокОб 				= Документы.Договор.СоздатьДокумент();
			ДокОб.Дата			= Дог.Дата;
			ДокОб.Номер			= Дог.Номер;
			ДокОб.Контрагент	= Дог.Контрагент;
			Примечание			= "Новый документ";
			Результат 			= "Создан новый договор";
			//
			ОбластьДоговор.Параметры.СуммаДоговора	= 0;
		Иначе
			//			
			ДокОб 			= ДокСс.ПолучитьОбъект();
			
			//Добавлено по задаче #133742 от 25.10.2018 ГумединАГ
			УстановитьПривилегированныйРежим(Истина);
			ДокОб.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			УстановитьПривилегированныйРежим(Ложь);	
			/////////////////////////////////////////////////////
			
			ОбластьДоговор.Параметры.СуммаДоговора	= ДокОб.СуммаДокумента;
			
			Примечание		= "Существующий документ";
			Если ДокОб.Дата <> Дог.Дата Тогда
				Результат = Результат + ?(ЗначениеЗаполнено(Результат),",","") + " изменена дата ("+ Формат(ДокОб.Дата, "ДЛФ=D")+")";
			КонецЕсли;
			
			Если ДокОб.СуммаДокумента <> Дог.СуммаДокумента  Тогда
				Результат = Результат + ?(ЗначениеЗаполнено(Результат),",","") + " изменена сумма ("+ Формат(ДокОб.СуммаДокумента, "ЧЦ=15; ЧДЦ=2")+")";
			КонецЕсли;
			
			Если ДокОб.Контрагент <> Дог.Контрагент  Тогда
				Результат = Результат + ?(ЗначениеЗаполнено(Результат),",","") + " изменен контрагент ("+ ДокОб.Контрагент + "), ИЗМЕНЕНИЕ ПРЕРВАНО";
				//
				ЗаполнитьОбластьДоговора( ОбластьДоговор, Дог, Результат, Примечание );
				ТабДок.Вывести( ОбластьДоговор );
				Продолжить;
				
			КонецЕсли;
			//
		КонецЕсли;
		
		Если Дог.Аннулирован Тогда
			Примечание		= "Договор аннулирован";
			Если НЕ ДокСс.Пустая() Тогда 	// нет в базе
				ДокОб.УстановитьПометкуУдаления( Истина );   // может надо записать?
				Результат = Результат + ?(ЗначениеЗаполнено(Результат),",","") + " помечен на удаление";
			Иначе
				Результат = Результат + ?(ЗначениеЗаполнено(Результат),",","") + " не создавался";
				
			КонецЕсли;
			//
			ЗаполнитьОбластьДоговора( ОбластьДоговор, Дог, Результат, Примечание );
			ТабДок.Вывести(ОбластьДоговор);
			Продолжить;
			
			
		Иначе // не аннулирован
			Если НЕ Дог.Переносить Тогда 
				Результат		= "Пропущен";
				Примечание		= "Нет отметки переносить";
				ЗаполнитьОбластьДоговора( ОбластьДоговор, Дог, Результат, Примечание );
				ТабДок.Вывести(ОбластьДоговор);
				
				Продолжить; 
				
			КонецЕсли;
			
			// может быть 
			Если НЕ ДокСс.Пустая() Тогда
				Если ДокОб.ПометкаУдаления Тогда
					Результат = Результат + ?(ЗначениеЗаполнено(Результат),",","") + " снята пометка на удаление";
					ДокОб.УстановитьПометкуУдаления( Ложь );   		// может надо записать?
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		//
		ДокОб.Организация			= Дог.Организация;
		ДокОб.СуммаДокумента		= Дог.СуммаДокумента;
		ДокОб.Соглашение 			= Дог.Соглашение;
		//ДокОб.ДоговорПоППЛО			= Дог.ДоговорПоППЛО;
		//ДокОб.ДоговорПоУслугам		= НЕ Дог.ДоговорПоППЛО;
		//
		ДокОб.ИсполнительДокумента 	= ПараметрыСеанса.ТекущийПользователь;
		//
		ДокОб.ПорядокРасчетов		= Дог.ПорядокРасчетов;
		
		
		//Изменено 22.05.2018 По задаче #000000 Гумедин А.Г.
		ЭтапыОплаты = Объект.ТабГрафикиОплатыДоговоров.Выгрузить( Новый Структура("Номер", Дог.Номер) );
		ЭтапыОтгрузки = Объект.ТабОтгрузкиПоДоговору.Выгрузить( Новый Структура("Номер", Дог.Номер) ); 
		 
		ДокОб.ЭтапыГрафикаОплатыПоДоговорам.Очистить();
		ДокОб.ЭтапыГрафикаОтгрузкиПоДоговорам.Очистить();
		
		Если 		Дог.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда //"По заказам" Тогда
			//ДокОб.ЭтапыГрафикаОплаты.Загрузить( ЭтапыОплаты );
			РаспределитьСуммыИПроцентыПоОтгрузке(ДокОб, ЭтапыОтгрузки);
			РаспределитьСуммыИПроцентыПоОплате(ДокОб, ЭтапыОплаты);

			
		ИначеЕсли 	Дог.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда // "По накладным" Тогда
			// 2016 11 09 
			// заполняем Этапы графика оплаты
			ДатыОтгрузки = Объект.ТабОтгрузкиПоДоговору.Выгрузить(  Новый Структура("Номер", Дог.Номер ));
			
			// каждую сумму отгрузки  распределяем пропорционально по этапам оплаты
			РаспределитьСуммыИПроцентыПоОтгрузке(ДокОб, ЭтапыОтгрузки);
			РаспределитьСуммыИПроцентыПоОплате(ДокОб, ЭтапыОплаты);
//			РаспределитьСуммыПоОтгрузкамПоОплатам( ДокОб, ДатыОтгрузки, ЭтапыОплаты );
//			РаспределитьПроцентыПоОплате(ДокОб);
		КонецЕсли;

		//Конец изменения //////////////////////////////////////
		
		Дог.Переносить = Ложь;
		
		Попытка
			Если ДокОб.Проведен Тогда 
				Режим	  = РежимЗаписиДокумента.Проведение;
				Результат = Результат + ?(ЗначениеЗаполнено(Результат),",","") + " перепроведен";
			Иначе
				Режим	  = РежимЗаписиДокумента.Запись; 
				Результат = Результат + ?(ЗначениеЗаполнено(Результат),",","") + " записан";
			КонецЕсли;
			
			//Если 	ДокОб.Номер = "Г16/1С-0016"
			//или	    ДокОб.Номер = "Г16/К-00033"
			//или	    ДокОб.Номер = "Г16/КР-0010" Тогда
			//
			//	// не все задачи в статусе в работе
			//	с=4;
			//КонецЕсли;
			
			ДокОб.Записать( Режим );
		Исключение
			Результат = Результат + ?(ЗначениеЗаполнено(Результат),",","") + 
						"не удалось записать договор " + Дог.Номер+", " + ОписаниеОшибки();
		КонецПопытки;
					
		ЗаполнитьОбластьДоговора( ОбластьДоговор, Дог, Результат, Примечание );
		ТабДок.Вывести(ОбластьДоговор);
		
		
	КонецЦикла;		
	
	ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.СуммаВсего = СуммаВсего;
	ТабДок.Вывести(ОбластьПодвал);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДоговоры(Команда)
	ТабДок = Новый ТабличныйДокумент;
	
	//
    ЗагрузитьДоговоры_НаСервере(ТабДок);
	
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.Защита 				= Ложь;
	ТабДок.ТолькоПросмотр 		= Истина;
	ТабДок.ОтображатьЗаголовки 	= Ложь;
	ТабДок.Показать();
	
	
	//Предупреждение("Договоры загружены", 10);
КонецПроцедуры

//***********************************************************************************************
&НаСервере
Функция КлиентСоздатьИерархию( НазвСправочника, НаименованиеРодителя )
	Возврат СоздатьИерархию( НазвСправочника, НаименованиеРодителя );
	
КонецФункции

//***********************************************************************************************
//		КОНТРАГЕНТЫ
//***********************************************************************************************

&НаКлиенте
Процедура ЗаполнитьТаблицуКонтрагентов_НаКлиенте( БазаОЛЕ )
	Объект.ТаблицаКонтрагентов.Очистить();
	
	ВыборкаОЛЕ = БазаОЛЕ.Справочники.Контрагенты.Выбрать();
	Пока ВыборкаОЛЕ.Следующий() Цикл
		// документ анулирован
		Если 		ВыборкаОЛЕ.ЭтоГруппа		Тогда Продолжить; КонецЕсли;
		Если 		ВыборкаОЛЕ.ПометкаУдаления	Тогда Продолжить; КонецЕсли;
		
		// 		
		ИННКонтрагента 		= СокрЛП(ВыборкаОЛЕ.ИНН);
		КППКонтрагента 		= СокрЛП(ВыборкаОЛЕ.КПП);
		Контрагент 	= КлиентНайтиКонтрагентаПоИННКПП( ИННКонтрагента, КППКонтрагента);
		Переносить	= (Контрагент = Неопределено);
		Если ТолькоНовые и НЕ Переносить Тогда Продолжить; КонецЕсли;
		
		//
		СтрКонтр 						= Объект.ТаблицаКонтрагентов.Добавить();
		СтрКонтр.Переносить				= Переносить;
		СтрКонтр.Контрагент				= Контрагент;
		СтрКонтр.Наименование			= ВыборкаОЛЕ.Наименование;
		// справочник контрагенты не иерахический, 
		// иерархию строим по справочнику партнеров
		Если БазаОЛЕ.ЗначениеЗаполнено( ВыборкаОЛЕ.Партнер.Родитель) Тогда
			СтрКонтр.Родитель 				= КлиентСоздатьИерархию( "Контрагенты", ВыборкаОЛЕ.Партнер.Родитель.ПолноеНаименование());
		КонецЕсли;
		СтрКонтр.ИНН					= ИННКонтрагента;
		СтрКонтр.КПП					= КППКонтрагента;
		СтрКонтр.КодПоОКПО				= ВыборкаОЛЕ.КодПоОКПО;
		СтрКонтр.НаименованиеПолное		= ВыборкаОЛЕ.НаименованиеПолное;
		СтрКонтр.Комментарий			= ВыборкаОЛЕ.ДополнительнаяИнформация;
		
	КонецЦикла;

	БазаОЛЕ = "";
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуКонтрагентов(Команда)
	//
	БазаОЛЕ =  УП_Клиент.КлиентПодключитьсяКБазеОЛЕ_ПоИмени( "УправлениеТорговлей" );
	Если БазаОЛЕ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ЗаполнитьТаблицуКонтрагентов_НаКлиенте(БазаОЛЕ);
	БазаОЛЕ = "";
	ПоказатьПредупреждение(,"Таблица контрагентов заполнена!", 10);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьфлажкиКонтрагентов(Команда)
	ИзменитьФлажки( Объект.ТаблицаКонтрагентов,  Ложь );
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиКонтрагентов(Команда)
	ИзменитьФлажки( Объект.ТаблицаКонтрагентов,  Истина );
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКонтрагентов_НаСервере( )
	Для Каждого Стр Из Объект.ТаблицаКонтрагентов Цикл
		Если НЕ Стр.Переносить Тогда Продолжить; КонецЕсли;
		
		Если Стр.Контрагент.Пустая() Тогда
			КонтрОб = Справочники.Контрагенты.СоздатьЭлемент();
		Иначе
			КонтрОб = Стр.Контрагент.ПолучитьОбъект();
		КонецЕсли;
		
		КонтрОб.Родитель			= Стр.Родитель;
		КонтрОб.Наименование 		= Стр.Наименование;
		КонтрОб.ИНН					= Стр.ИНН;
		КонтрОб.КПП					= Стр.КПП;
		КонтрОб.КодПоОКПО			= Стр.КодПоОКПО;
		КонтрОб.НаименованиеПолное	= Стр.НаименованиеПолное;
		КонтрОб.Комментарий			= Стр.Комментарий;
		//
		Стр.Переносить				= Ложь;
		
		Попытка
			КонтрОб.Записать();
		Исключение
			
			Сообщить("Не удалось записать контрагента " + Стр.Наименование + ", " + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКонтргентов(Команда)
	ЗагрузитьКонтрагентов_НаСервере();
	ПоказатьПредупреждение(,"Контрагенты загружены", 10);
КонецПроцедуры

//***********************************************************************************************
//		УПРАВЛЕНЧЕСКАЯ РЕАЛИЗАЦИЯ
//***********************************************************************************************

//&НаКлиенте
//Процедура ЗаполнитьТаблицуПоВидуДокумента_НаКлиенте(БазаОЛЕ, ВидДокумента, НазваниеТабЧасти )
//	
//	
//	ВыборкаОЛЕ = БазаОЛЕ.Документы[ВидДокумента].Выбрать( НачалоДня(ПериодОтбора.ДатаНачала), КонецДня( ПериодОтбора.ДатаОкончания )); 

//	Пока ВыборкаОЛЕ.Следующий()  Цикл
//		// не проведен
//		Если НЕ ВыборкаОЛЕ.Проведен	Тогда Продолжить; КонецЕсли;
//		
//		// аннулирован
//		Аннулирован	= КлиентЗначениеДопР( БазаОЛЕ, ВыборкаОЛЕ.Ссылка, "Аннулирован");
//		Если Аннулирован = Неопределено Тогда
//		// не указано, т.е не аннулирован
//		ИначеЕсли Аннулирован 			Тогда 
//			Продолжить; 
//		КонецЕсли;
//		ИННКонтрагента 	= СокрЛП(ВыборкаОЛЕ.Контрагент.ИНН);
//		КППКонтрагента 	= СокрЛП(ВыборкаОЛЕ.Контрагент.КПП);
//		Контрагент 		= КлиентНайтиКонтрагентаПоИННКПП( ИННКонтрагента,  КППКонтрагента);
//		Если Контрагент = Неопределено Тогда
//			Сообщить("Нет контрагента с ИНН [" + ИННКонтрагента + "], КПП [" + КППКонтрагента +"]");
//			Продолжить;
//		КонецЕсли;
//		//
//		Префикс		= СокрЛП(ВыборкаОЛЕ.Организация.Префикс) + "-";
//		Организация	= НайтиОрганизациюПоПрефиксу(Префикс);
//		Если Организация.Пустая() Тогда
//			Сообщить("Не найдена организация с префиксом  " + Префикс );
//			Продолжить;
//		КонецЕсли;
//		
//		// 
//		ДоговорКонтрагента			= НайтиДоговорПоНомеру( ВыборкаОЛЕ.ЗаказКлиента.Номер,	Контрагент );
//		Если ДоговорКонтрагента = Неопределено Тогда
//			Сообщить("У контрагента " + Контрагент + " не найден договор " + ВыборкаОЛЕ.ЗаказКлиента.Номер);
//			//Продолжить; 
//		КонецЕсли;									
//		
//		СтрДок 						= ТабУправленческаяРеализация.Добавить();
//		СтрДок.Переносить			= Истина;
//		СтрДок.GUID 				= БазаОЛЕ.String(ВыборкаОЛЕ.Ссылка.УникальныйИдентификатор());
//		СтрДок.ВидДокумента 		= ВидДокумента;
//		СтрДок.Дата					= ВыборкаОЛЕ.Дата;
//		СтрДок.Номер				= ВыборкаОЛЕ.Номер;
//		СтрДок.ДоговорКонтрагента	= ДоговорКонтрагента;
//		СтрДок.Контрагент 			= Контрагент;
//		СтрДок.Организация 			= Организация;
//		СтрДок.СуммаДокумента		= ВыборкаОЛЕ.СуммаДокумента;
//		
//		Подразделение 	= ЗагрузитьПодразделение( ВыборкаОЛЕ.Подразделение );
//		Для Каждого ТоварОЛЕ ИЗ ВыборкаОЛЕ[НазваниеТабЧасти] Цикл
//			КатегорияНоменклатуры = КлиентЗначениеДопР( БазаОЛЕ, ТоварОЛЕ.Номенклатура, "Категория номенклатуры");
//			Если КатегорияНоменклатуры = Неопределено Тогда
//				КатегорияНоменклатуры 	= "Не указана";
//			Иначе
//				КатегорияНоменклатуры 	= КатегорияНоменклатуры.Наименование;
//			КонецЕсли;
//			СтрТов = СтрДок.Распределение.Добавить();
//			СтрТов.Подразделение 			= Подразделение;
//			// ??
//			СтрТов.КатегорияНоменклатуры	= КатегорияНоменклатуры;
//			СтрТов.Сумма					= ТоварОЛЕ.СуммаСНДС;
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПосчитатьСуммуПереносимойРеализации()
//	ИтогоСуммаПереносимыхДокументов = 0;
//	Для Каждого СтрУР ИЗ ТабУправленческаяРеализация Цикл
//		ИтогоСуммаПереносимыхДокументов = ИтогоСуммаПереносимыхДокументов+ ?(СтрУР.Переносить, СтрУР.СуммаДокумента, 0);
//	КонецЦикла;
//КонецПроцедуры



//***********************************************************************************************
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлажки( Таб,  Переносить )
	Для Каждого Стр Из Таб Цикл
		Стр.Переносить = Переносить;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	//Если ЭтаФорма.Элементы
	ИзменитьФлажки( Объект.ТабДоговоров, Истина );
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	ИзменитьФлажки( Объект.ТабДоговоров,  Ложь );
КонецПроцедуры



//&НаКлиенте
//Процедура ТабУправленческаяРеализацияПереноситьПриИзменении(Элемент)
//	ПосчитатьСуммуПереносимойРеализации();
//КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиОпл(Команда)
	ИзменитьФлажки( Объект.ТабОплаты,  Ложь );
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиОпл(Команда)
	ИзменитьФлажки( Объект.ТабОплаты,  Истина );
КонецПроцедуры

//**************************************************************************
// оплата договоров


// ???
&НаКлиенте
Функция АктПоОплате( БазаОЛЕ, ОплатаОЛЕ )
	Отбор = БазаОЛЕ.NewObject("Структура");
	Отбор.Вставить( "ПоступлениеБезналичныхДенежныхСредств", ОплатаОЛЕ );
	ВыбОплаты = БазаОЛЕ.РегистрыСведений.ПлатежиПоДокументамЗаказа.Выбрать( Отбор );
	Пока ВыбОплаты.Следующий() Цикл
		// guid акта
		Попытка
			GUIDАкта = БазаОЛЕ.String(ВыбОплаты.АктРеализация.УникальныйИдентификатор());
			Возврат АктПоGUID(GUIDАкта);
		Исключение
			
		КонецПопытки;
	КонецЦикла;
	ВОзврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОплату_НаКлиенте(  БазаОЛЕ )
	Объект.ТабОплаты.Очистить();
	
	ВыборкаОЛЕ 	= БазаОЛЕ.Документы.ПоступлениеБезналичныхДенежныхСредств.Выбрать( НачалоДня(ПериодОтбора.ДатаНачала), КонецДня( ПериодОтбора.ДатаОкончания )); 
	Пока ВыборкаОЛЕ.Следующий()  Цикл
		Если НЕ ВыборкаОЛЕ.Проведен Тогда Продолжить; КонецЕсли;
		
		// 		
		ИННКонтрагента 	= СокрЛП(ВыборкаОЛЕ.Контрагент.ИНН);
		КППКонтрагента 	= СокрЛП(ВыборкаОЛЕ.Контрагент.КПП);
		Контрагент 		= КлиентНайтиКонтрагентаПоИННКПП( ИННКонтрагента,  КППКонтрагента);
		Если Контрагент = Неопределено Тогда
			Сообщить("Нет контрагента с ИНН [" + ИННКонтрагента + "], КПП [" + КППКонтрагента +"]");
			Продолжить;
		КонецЕсли;
		Организация			= НайтиОрганизациюПоПрефиксу( СокрЛП(ВыборкаОЛЕ.Организация.Префикс) + "-" );
		
		НомерПлатежа 	= ВыборкаОЛЕ.Номер;
		ДатаПлатежа		= ВыборкаОЛЕ.Дата;
		//
		ДокументОплаты  = НайтиОплатуПоНомеру( НомерПлатежа, ДатаПлатежа );
		Для Каждого СтрОЛЕ ИЗ ВыборкаОЛЕ.РасшифровкаПлатежа Цикл
			// если нет договора, то не переносим платеж
			ИмяОснования = СтрОЛЕ.ОснованиеПлатежа.Метаданные().Имя;
			Если  		ИмяОснования = "АктВыполненныхРабот" 
			или 		ИмяОснования = "РеализацияТоваровУслуг" Тогда
				Если БазаОЛЕ.ЗначениеЗАполнено( СтрОЛЕ.ОснованиеПлатежа.ЗаказКлиента ) Тогда
					НомерДоговора 	= СтрОЛЕ.ОснованиеПлатежа.ЗаказКлиента.Номер;
					ДатаДоговора	= СтрОЛЕ.ОснованиеПлатежа.ЗаказКлиента.Дата;
					
					GUIDАкта 		= БазаОЛЕ.String(СтрОЛЕ.ОснованиеПлатежа.УникальныйИдентификатор());
					ДокументУТ 		= АктПоGUID(GUIDАкта);
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "В документе № " + НомерПлатежа + " от " + ДатаПлатежа + Символы.ПС + 
									  "в основании платежа не заполнен заказ клиента";
					Сообщение.Сообщить();
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли 	ИмяОснования = "ЗаказКлиента" Тогда
				НомерДоговора 	= СтрОЛЕ.ОснованиеПлатежа.Номер;
				ДатаДоговора	= СтрОЛЕ.ОснованиеПлатежа.Дата;
				
				ДокументУТ 		= АктПоОплате( БазаОЛЕ, ВыборкаОЛЕ.Ссылка );
				
			ИначеЕсли 	ИмяОснования = "СчетНаОплатуКлиенту" Тогда
				НомерДоговора 	= СтрОЛЕ.ОснованиеПлатежа.ДокументОснование.Номер;
				ДатаДоговора	= СтрОЛЕ.ОснованиеПлатежа.ДокументОснование.Дата;
				
				// может и не быть
				ДокументУТ 		= АктПоОплате( БазаОЛЕ, ВыборкаОЛЕ.Ссылка );
				
			Иначе
				Сообщить("Номер договора неопределен для " + ИмяОснования );
				Продолжить;
			КонецЕсли;
			Договор 		= НайтиДоговорПоНомеру( НомерДоговора, ДатаДоговора);
			Если Договор = Неопределено Тогда 
				Сообщить("Не найден договор №" + СтрОЛЕ.ОснованиеПлатежа.Номер + " от " + СтрОЛЕ.ОснованиеПлатежа.Дата);
				Продолжить;
			КонецЕсли;
		
			// платеж !!!
			СтрДок 						= Объект.ТабОплаты.Добавить();
			СтрДок.Переносить			= (ДокументОплаты = Неопределено);
			СтрДок.Номер				= НомерПлатежа;
			СтрДок.Дата			 		= ДатаПлатежа; 
			//
			СтрДок.Контрагент			= Контрагент;
			СтрДок.Организация			= Организация;
			СтрДок.СуммаДокумента 		= ВыборкаОЛЕ.СуммаДокумента;
			СтрДок.Договор				= Договор;
			СтрДок.НазначениеПлатежа	= ВыборкаОЛЕ.НазначениеПлатежа;
			СтрДок.Акт 					= ДокументУТ; 
			
		КонецЦикла;
	КонецЦикла;
	
	
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОплату(Команда)
	//
	БазаОЛЕ =  УП_Клиент.КлиентПодключитьсяКБазеОЛЕ_ПоИмени( "УправлениеТорговлей" );
	Если БазаОЛЕ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//
	ЗаполнитьОплату_НаКлиенте(  БазаОЛЕ );
	БазаОЛЕ = "";
	
	ПоказатьПредупреждение(,"Таблица документов оплаты заполнена!", 10);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьОплату_НаСервере()
	Для Каждого СтрДок Из Объект.ТабОплаты Цикл
		//
		Если НЕ СтрДок.Переносить Тогда Продолжить; КонецЕсли;
		СтрДок.Переносить = Ложь;
		
		
		ДокСс = Документы.Оплата.НайтиПоНомеру( СтрДок.Номер, СтрДок.Дата );
		Если ДокСс.Пустая() Тогда
			ДокОб 				= Документы.Оплата.СоздатьДокумент();
		Иначе
			//			
			Если ДокСс.Проведен Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Документ " + ДокСс + " проведен, исправление запрещено!";
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			ДокОб 	= ДокСс.ПолучитьОбъект();
		КонецЕсли;				
		// 			
		ДокОб.ИсполнительДокумента 	= ПараметрыСеанса.ТекущийПользователь;
		ЗаполнитьЗначенияСвойств( ДокОб, СтрДок );
		
		
		Попытка
			ДокОб.Записать( РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить("Не удалось записать документ " + ДокСс + ", " + ОписаниеОшибки());
		КонецПопытки;
					
	КонецЦикла;		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОплату(Команда)
	ЗагрузитьОплату_НаСервере();
	ПоказатьПредупреждение(,"Оплата договоров загружена!", 10);
КонецПроцедуры


//*****************************************************************************
// акты оказания услуг
&НаКлиенте
Процедура УстановитьФлАктов(Команда)
	ИзменитьФлажки( Объект.ТабАкты,  Истина );
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлАктов(Команда)
	ИзменитьФлажки( Объект.ТабАкты,  Ложь );
КонецПроцедуры

&НаСервереБезКонтекста
Функция МенеджерПоДоговору(Договор)
	//Если ЗначениеЗаполнено( Договор.Проект ) Тогда
		Возврат Договор.Проект.МенеджерПроекта;
	//КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция АктПоGUID( GUID )
	АктСс  = Документы.ДокументУТ.НайтиПоРеквизиту("GUID", GUID);
	Возврат АктСс;
КонецФункции

//&НаКлиенте
//Процедура ЗаполнитьАкты_НаКлиенте(  БазаОЛЕ )
//	Объект.ТабАкты.Очистить();
//	
//	ВыборкаОЛЕ 	= БазаОЛЕ.Документы.АктВыполненныхРабот.Выбрать( НачалоДня(ПериодОтбора.ДатаНачала), КонецДня( ПериодОтбора.ДатаОкончания )); 
//	Пока ВыборкаОЛЕ.Следующий()  Цикл
//		Если НЕ ВыборкаОЛЕ.Проведен Тогда Продолжить; КонецЕсли;
//		
//		// 		
//		ИННКонтрагента 	= СокрЛП(ВыборкаОЛЕ.Контрагент.ИНН);
//		КППКонтрагента 	= СокрЛП(ВыборкаОЛЕ.Контрагент.КПП);
//		Контрагент 		= КлиентНайтиКонтрагентаПоИННКПП( ИННКонтрагента,  КППКонтрагента);
//		Если Контрагент = Неопределено Тогда
//			Сообщить("Нет контрагента с ИНН [" + ИННКонтрагента + "], КПП [" + КППКонтрагента +"]");
//			Продолжить;
//		КонецЕсли;
//		Организация	= НайтиОрганизациюПоПрефиксу( СокрЛП(ВыборкаОЛЕ.Организация.Префикс) + "-" );
//		
//		// если нет договора, то не переносим платеж
//		Договор 		= НайтиДоговорПоНомеру( ВыборкаОЛЕ.ЗаказКлиента.Номер, ВыборкаОЛЕ.ЗаказКлиента.Дата);
//		Если Договор = Неопределено Тогда 
//			Сообщить("Не найден договор №" + ВыборкаОЛЕ.ЗаказКлиента.Номер + " от " + ВыборкаОЛЕ.ЗаказКлиента.Дата);
//			Продолжить;
//		КонецЕсли;
//		// guid акта
//		GUID  = БазаОЛЕ.String(ВыборкаОЛЕ.Ссылка.УникальныйИдентификатор());
//		// платеж !!!
//		СтрДок 						= Объект.ТабАкты.Добавить();
//		СтрДок.Переносить			= НЕ ЗначениеЗаполнено( АктПоGUID( GUID ));
//		СтрДок.GUID					= GUID;
//		СтрДок.Номер				= ВыборкаОЛЕ.Номер;
//		СтрДок.Дата			 		= ВыборкаОЛЕ.Дата; 
//		//
//		СтрДок.Контрагент			= Контрагент;
//		СтрДок.Организация			= Организация;
//		СтрДок.СуммаДокумента 		= ВыборкаОЛЕ.СуммаДокумента;
//		СтрДок.Договор				= Договор;
//		СтрДок.Менеджер  			= МенеджерПоДоговору(Договор);
//			
//	КонецЦикла;
//	
//КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументыУТ_НаКлиенте( КодВидаДокумента, БазаОЛЕ )
	ВидДокумента = ЗагрузитьВидДокумента( КодВидаДокумента );
	Если ВидДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаОЛЕ 	= БазаОЛЕ.Документы[КодВидаДокумента].Выбрать( НачалоДня(ПериодОтбора.ДатаНачала), КонецДня( ПериодОтбора.ДатаОкончания )); 
	Пока ВыборкаОЛЕ.Следующий()  Цикл
		Если НЕ ВыборкаОЛЕ.Проведен Тогда Продолжить; КонецЕсли;
		
		// 		
		ИННКонтрагента 	= СокрЛП(ВыборкаОЛЕ.Контрагент.ИНН);
		КППКонтрагента 	= СокрЛП(ВыборкаОЛЕ.Контрагент.КПП);
		Контрагент 		= КлиентНайтиКонтрагентаПоИННКПП( ИННКонтрагента,  КППКонтрагента);
		Если Контрагент = Неопределено Тогда
			Сообщить("Нет контрагента с ИНН [" + ИННКонтрагента + "], КПП [" + КППКонтрагента +"]");
			Продолжить;
		КонецЕсли;
		Организация	= НайтиОрганизациюПоПрефиксу( СокрЛП(ВыборкаОЛЕ.Организация.Префикс) + "-" );
		
		// если нет договора, то не переносим платеж
		Если БазаОЛЕ.ЗначениеЗаполнено( ВыборкаОЛЕ.ЗаказКлиента ) Тогда
			Договор 		= НайтиДоговорПоНомеру( ВыборкаОЛЕ.ЗаказКлиента.Номер, ВыборкаОЛЕ.ЗаказКлиента.Дата);
			Если Договор = Неопределено Тогда 
				Сообщить("Не найден договор №" + ВыборкаОЛЕ.ЗаказКлиента.Номер + " от " + ВыборкаОЛЕ.ЗаказКлиента.Дата);
				Продолжить;
			КонецЕсли;
		Иначе
			Сообщить("Не указан договор (заказ клиента) для " + ВидДокумента  + " № " + ВыборкаОЛЕ.Номер + " от " + ВыборкаОЛЕ.Дата);
			Продолжить;
			
		КонецЕсли;
		// guid акта
		GUID  = БазаОЛЕ.String(ВыборкаОЛЕ.Ссылка.УникальныйИдентификатор());
		// платеж !!!
		СтрДок 						= Объект.ТабАкты.Добавить();
		СтрДок.Переносить			= НЕ ЗначениеЗаполнено( АктПоGUID( GUID ));
		СтрДок.GUID					= GUID;
		СтрДок.Номер				= ВыборкаОЛЕ.Номер;
		СтрДок.Дата			 		= ВыборкаОЛЕ.Дата; 
		//
		СтрДок.Контрагент			= Контрагент;
		СтрДок.Организация			= Организация;
		СтрДок.СуммаДокумента 		= ВыборкаОЛЕ.СуммаДокумента;
		СтрДок.Договор				= Договор;
		// 20130807
		//СтрДок.Менеджер  			= МенеджерПоДоговору(Договор);
		СтрДок.ВидДокумента         = ВидДокумента;
			
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьАкты(Команда)

	БазаОЛЕ =  УП_Клиент.КлиентПодключитьсяКБазеОЛЕ_ПоИмени( "УправлениеТорговлей" );
	Если БазаОЛЕ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//
	Объект.ТабАкты.Очистить();
	
	ЗаполнитьДокументыУТ_НаКлиенте( "АктВыполненныхРабот", 		БазаОЛЕ );
	ЗаполнитьДокументыУТ_НаКлиенте( "РеализацияТоваровУслуг", 	БазаОЛЕ );
	БазаОЛЕ = "";
	Объект.ТабАкты.Сортировать("Дата,Номер");
	
	ПоказатьПредупреждение(,"Таблица документов заполнена!", 10);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьАкты_НаСервере()
	Для Каждого СтрДок Из Объект.ТабАкты Цикл
		//
		Если НЕ СтрДок.Переносить Тогда Продолжить; КонецЕсли;
		СтрДок.Переносить = Ложь;
		
		ДокСс = АктПоGUID( СтрДок.GUID );
		Если ДокСс.Пустая() Тогда
			ДокОб = Документы.ДокументУТ.СоздатьДокумент();
		Иначе
			//			
			Если ДокСс.Проведен Тогда
				Сообщить("Документ " + ДокСс + " проведен, исправление запрещено!");
				Продолжить;
			КонецЕсли;
			ДокОб 	= ДокСс.ПолучитьОбъект();
		КонецЕсли;				
		// 			
		ДокОб.ИсполнительДокумента 	= ПараметрыСеанса.ТекущийПользователь;
		ЗаполнитьЗначенияСвойств( ДокОб, СтрДок );
		
		
		Попытка
			ДокОб.Записать( РежимЗаписиДокумента.Запись);
		Исключение
			Сообщить("Не удалось записать документ " + ДокСс + ", " + ОписаниеОшибки());
		КонецПопытки;
					
	КонецЦикла;		
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьАкты(Команда)
	ЗагрузитьАкты_НаСервере();
	ПоказатьПредупреждение(,"Документы загружены!", 10);
	
КонецПроцедуры

//Добавлено 22.05.2018 по задаче #000000 Гумедин А.Г.
&НаСервере
Процедура РаспределитьСуммыИПроцентыПоОтгрузке(ДокОб, Элементы)
	
	//Подсчет общей суммы
	ОбщСумма = 0;
	Для Каждого Элемент ИЗ Элементы Цикл
		ОбщСумма = ОбщСумма + Элемент.Сумма;		
	КонецЦикла;	
	
	//Распределенеие
	Для Каждого Элемент ИЗ Элементы Цикл
		Если Не ЗначениеЗаполнено( Элемент.ДатаОтгрузки ) Тогда
			Сообщить("Не заполнена дата отгрузки " + ДокОб.Номер);
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено( Элемент.Сумма ) Тогда
			Сообщить("Не заполнена сумма отгрузки на " + Формат(Элемент.ДатаОтгрузки, "ДЛФ=DD")+ " " + ДокОб.Номер);
			Продолжить;
		КонецЕсли;
		
		ДокументОтгрузки = ДокОб.ЭтапыГрафикаОтгрузкиПоДоговорам.Добавить();
		ДокументОтгрузки.ДатаОтгрузки = Элемент.ДатаОтгрузки; 
		ДокументОтгрузки.ТипНоменклатуры = Элемент.ТипНоменклатуры;
		ДокументОтгрузки.СуммаОтгрузки = Элемент.Сумма;
		ДокументОтгрузки.ПроцентОтгрузки = Элемент.Сумма/ОбщСумма*100;		
	КонецЦикла; 
	
КонецПроцедуры

//Добавлено 22.05.2018 по задаче #000000 Гумедин А.Г.
&НаСервере
Процедура РаспределитьСуммыИПроцентыПоОплате(ДокОб, Элементы)
	
	//Подсчет общей суммы
	ОбщСумма = 0;
	Для Каждого Элемент ИЗ Элементы Цикл
		ОбщСумма = ОбщСумма + Элемент.СуммаПлатежа;		
	КонецЦикла;	
	
	//Распределенеие
	Для Каждого Элемент ИЗ Элементы Цикл

		Если Не ЗначениеЗаполнено( Элемент.ДатаПлатежа ) Тогда
			Сообщить("Не заполнена дата платежа " + ДокОб.Номер);
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено( Элемент.СуммаПлатежа ) Тогда
			Сообщить("Не заполнена сумма платежа на " + Формат(Элемент.Датаплатежа, "ДЛФ=DD")+ " " + ДокОб.Номер);
			Продолжить;
		КонецЕсли;
		
		ДокументОплаты = ДокОб.ЭтапыГрафикаОплатыПоДоговорам.Добавить();
		ДокументОплаты.ДатаПлатежа = Элемент.ДатаПлатежа; 
		ДокументОплаты.ТипНоменклатуры = Элемент.ТипНоменклатуры;
		ДокументОплаты.СуммаПлатежа = Элемент.СуммаПлатежа;
		ДокументОплаты.ПроцентПлатежа = Элемент.СуммаПлатежа/ОбщСумма*100;
	КонецЦикла; 
	
КонецПроцедуры

//Добавлено 22.05.2018 по задаче #000000 Гумедин А.Г.
&НаСервере
Процедура РаспределитьПроцентыПоОплате(ДокОб)
	
	ДокументОплаты = ДокОб.ЭтапыГрафикаОплатыПоДоговорам;
	ОбщаяСумма = 0;
	Для Каждого Элемент ИЗ ДокументОплаты Цикл
		ОбщаяСумма = ОбщаяСумма + Элемент.СуммаПлатежа;	
	КонецЦикла;
	
	Для Каждого Элемент ИЗ ДокументОплаты Цикл
		Элемент.ПроцентПлатежа = Элемент.СуммаПлатежа/ОбщаяСумма*100;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТипНоменклатурыПоНазванию(ТипНоменклатуры)
	Если ТипНоменклатуры = "Услуга" Тогда
		Возврат Перечисления.ТипыНоменклатуры.Услуга;
	Иначе 
		Возврат Перечисления.ТипыНоменклатуры.Товар;               
	КонецЕсли;
КонецФункции;