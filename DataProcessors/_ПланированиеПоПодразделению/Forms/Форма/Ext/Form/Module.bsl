
#Область ОбработчикиФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьНормуЧасов();
КонецПроцедуры

&НаКлиенте
Процедура ПериодПланированияПриИзменении(Элемент)
	УстановитьНормуЧасов();
	ОбнулитьДанныеРасчета();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ОбнулитьДанныеРасчета();
КонецПроцедуры


#КонецОбласти


#Область Флажки

&НаКлиенте
Процедура УстановитьФлажки( Коллекция, Флажок )
	Для Каждого ЭлК ИЗ Коллекция Цикл
		ЭлК.Пометка = Флажок;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВсеИсполнители(Команда)
	УстановитьФлажки( ИсполнителиПлановРабот, Истина );
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеИсполнители(Команда)
	УстановитьФлажки( ИсполнителиПлановРабот, Ложь );
КонецПроцедуры

&НаКлиенте
Процедура ВсеПланыРабот(Команда)
	УстановитьФлажки( ИтогиПоПланамРабот, Истина );
КонецПроцедуры


&НаКлиенте
Процедура СнятьВсеПланыРабот(Команда)
	УстановитьФлажки( ИтогиПоПланамРабот, Ложь );
КонецПроцедуры


#КонецОбласти


#Область Прочее

&НаСервереБезКонтекста
Функция РасчитатьНормуЗаПериод( ПериодПланирования )
	//НормаЧасов 		= 0;
	//Сутки 			= 24 * 60 * 60;
	//Д1 				= НачалоДня( ПериодПланирования.ДатаНачала );
	//КонецПериода 	= НачалоДня( ПериодПланирования.ДатаОкончания );
	//Пока Д1 <= ПериодПланирования.ДатаОкончания Цикл
	//	НормаЧасов = НормаЧасов + УП_ПланыРаботПоПроектам.КоличествоРабочихЧасовВДне( Д1 );
	//	Д1 = Д1 + Сутки;
	//КонецЦикла;
	НормаЧасов = УП_РаботаСРабочимКалендаремСервер.РасчитатьНормуЗаПериод( ПериодПланирования );
	Возврат НормаЧасов;
КонецФункции


&НаСервере
Процедура ОбновитьНаСервере()
	// сотрудники
	ЗаполнитьИсполителейПлановРабот( Подразделение, ПериодПланирования );
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	Если НЕ ЗначениеЗаполнено( ПериодПланирования ) Тогда
		ПоказатьПредупреждение(, "Не указан период планирования!");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено( Подразделение ) Тогда
		ПоказатьПредупреждение(, "Не указано подразделение!");
		Возврат;
	КонецЕсли;
	
	ОбновитьНаСервере();
КонецПроцедуры

#КонецОбласти


#Область ЗаполнениеИсходныхДанных

&НаСервереБезКонтекста
Функция КодТарифнойСтавки( ТарифнаяСтавка )
	Тариф = "ТАРИФ";
	Если ЗначениеЗаполнено( ТарифнаяСтавка ) Тогда
		Если СтрНайти( ТарифнаяСтавка.Код, Тариф )= 0 Тогда
			Возврат СокрЛП( ТарифнаяСтавка.Код );
		Иначе
			Возврат СокрЛП( СтрЗаменить( ТарифнаяСтавка.Код, Тариф, ""));
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции

&НаСервере
Процедура ЗаполнитьИсполителейПлановРабот( Подразделение, ПериодПланирования, Пометка = Ложь )
	//Сотрудники 	= УП_КадрыСервер.СотрудникиПодразделенияНаДату( Подразделение, ПериодПланирования.Дата,,Ложь);
	Сотрудники 	= УП_КадрыСервер.СотрудникиПодразделенияЗаПериод( Подразделение, ПериодПланирования, Ложь,, ВключатьНеДоступныхСотрудников );
	ИсполнителиПлановРабот.Загрузить( Сотрудники );
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Исполнитель.Пометка 	= Пометка;
		Исполнитель.СтавкаФОТ 	= СтавкаФОТПодразделения( Подразделение, Исполнитель.ТарифнаяСтавка, ПериодПланирования.ДатаНачала );
		Исполнитель.КодТС 		= КодТарифнойСтавки( Исполнитель.ТарифнаяСтавка );
		
	КонецЦикла;
	ИсполнителиПлановРабот.Сортировать("КодТС Убыв,ФизическоеЛицо");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителей(Команда)
	ЗаполнитьИсполителейПлановРабот( Подразделение, ПериодПланирования  );
КонецПроцедуры


// планы работ, у которых есть фронт работ в указанном периоде.
// Для начала период - месяц
&НаСервере
Процедура ЗаполнитьПланыРабот_НаСервере( Подразделение, ПериодПланирования, Пометка = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФронтРаботОбороты.ПланРабот КАК ПланРабот,
		|	ФронтРаботОбороты.ТарифнаяСтавка КАК ТарифнаяСтавка,
		|	СУММА(ВЫБОР
		|			КОГДА ФронтРаботОбороты.ТипСуммы = 0
		|				ТОГДА ФронтРаботОбороты.КоличествоОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧасовПлан,
		|	СУММА(ВЫБОР
		|			КОГДА ФронтРаботОбороты.ТипСуммы <> 0
		|				ТОГДА ФронтРаботОбороты.КоличествоОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧасовФакт,
		|	СУММА(ВЫБОР
		|			КОГДА ФронтРаботОбороты.ТипСуммы = 0
		|				ТОГДА ФронтРаботОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПлан,
		|	СУММА(ВЫБОР
		|			КОГДА ФронтРаботОбороты.ТипСуммы <> 0
		|				ТОГДА ФронтРаботОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаФакт,
		|	ПоказателиТарифныхСтавокСрезПоследних.СтавкаФОТ КАК СтавкаФОТСтандартная,
		|	КоэффициентФОТПодразделенийСрезПоследних.КоэффициентПланирования КАК КоэффициентПланирования,
		|	ПоказателиТарифныхСтавокСрезПоследних.СтавкаФОТ * КоэффициентФОТПодразделенийСрезПоследних.КоэффициентПланирования КАК СтавкаФОТ,
		|	&Пометка КАК Пометка,
		|	ФронтРаботОбороты.ПланРабот.Номер КАК ПланРаботНомер,
		|	ФронтРаботОбороты.ПланРабот.ЗадачаПроекта.Владелец.Код КАК КодПроекта
		|ИЗ
		|	РегистрНакопления.ФронтРабот.Обороты КАК ФронтРаботОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоказателиТарифныхСтавок.СрезПоследних(&Месяц, ) КАК ПоказателиТарифныхСтавокСрезПоследних
		|		ПО ФронтРаботОбороты.ТарифнаяСтавка = ПоказателиТарифныхСтавокСрезПоследних.ТарифнаяСтавка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КоэффициентФОТПодразделений.СрезПоследних(&Месяц, ) КАК КоэффициентФОТПодразделенийСрезПоследних
		|		ПО ФронтРаботОбороты.ПланРабот.Подразделение = КоэффициентФОТПодразделенийСрезПоследних.Подразделение
		|ГДЕ
		|	НЕ ФронтРаботОбороты.ПланРабот.Закрыт
		|	И ФронтРаботОбороты.ПланРабот.Подразделение = &Подразделение
		|	И ФронтРаботОбороты.Месяц МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ФронтРаботОбороты.ПланРабот,
		|	ФронтРаботОбороты.ТарифнаяСтавка,
		|	ПоказателиТарифныхСтавокСрезПоследних.СтавкаФОТ,
		|	КоэффициентФОТПодразделенийСрезПоследних.КоэффициентПланирования";
	
	Запрос.УстановитьПараметр("Месяц", 			НачалоМесяца( ПериодПланирования.ДатаНачала));
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца( ПериодПланирования.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца( ПериодПланирования.ДатаОкончания));
	Запрос.УстановитьПараметр("Подразделение", 	Подразделение);
	Запрос.УстановитьПараметр("Пометка", 		Пометка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ИтогиФР			 = РезультатЗапроса.Скопировать();
	ИтогиФР.Свернуть("ПланРабот,Пометка,ПланРаботНомер,КодПроекта",  "СуммаПлан");
	//ИтогиФР.Сортировать("ПланРабот");
	ИтогиПоПланамРабот.Загрузить( ИтогиФР );
	ИтогиПоПланамРабот.Сортировать( "КодПроекта,ПланРаботНомер" );
	
	Для Каждого СтрИПР ИЗ ИтогиПоПланамРабот Цикл 
		Отбор = Новый Структура;
		Отбор.Вставить("ПланРабот", СтрИПР.ПланРабот );
		СтрокиПланаРабот = РезультатЗапроса.НайтиСтроки( Отбор );
		Для Каждого СтрПР ИЗ СтрокиПланаРабот Цикл
			СтрФР = СтрИПР.ФронтРабот.Добавить();
			ЗаполнитьЗначенияСвойств( СтрФР, СтрПР );
			СтрФР.КодТС = КодТарифнойСтавки( СтрФР.ТарифнаяСтавка );
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПлановРабот( мПлановРаботПоПосещениям )
	Для Каждого ПР ИЗ мПлановРаботПоПосещениям Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("ПланРабот", ПР );
		мПР = ИтогиПоПланамРабот.НайтиСтроки( Отбор );
		Если мПР.Количество() = 0 Тогда
			НовСтр = ИтогиПоПланамРабот.Добавить();
			НовСтр.ПланРабот 		= ПР;
			НовСтр.ПланРаботНомер 	= ПР.Номер;
			НовСтр.КодПроекта 		= ПР.ЗадачаПроекта.Владелец.Код;
		КонецЕсли;
	КонецЦикла;
	//
	ИтогиПоПланамРабот.Сортировать( "КодПроекта,ПланРаботНомер" );
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланыРабот(Команда)
	ЗаполнитьПланыРабот_НаСервере( Подразделение, ПериодПланирования);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНормуЧасов()
	НормаЧасовЗаМесяц = РасчитатьНормуЗаПериод( ПериодПланирования );
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПосещения(Команда)
	ЗаполнитьПосещения_ПоПланамРабот( ПериодПланирования );
	// заполнить непроизводственные часы
	ЗаполнитьПосещения_ПоПредметамПосещения( ПериодПланирования );
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПосещения_ПоПредметамПосещения(ПериодПланирования )
	мФизЛиц = ИсполнителиПлановРабот.Выгрузить(,"ФизическоеЛицо").ВыгрузитьКолонку("ФизическоеЛицо");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.ПредметПосещения КАК ПредметПосещения,
		|	ПосещенияКонтрагентов.ФизическоеЛицо,
		|	СУММА(ПосещенияКонтрагентов.Часов) КАК Часов,
		|	ПосещенияКонтрагентов.Контрагент
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПосещенияКонтрагентов.ПредметПосещения) <> ТИП(Документ.ПланРабот)
		|	И НЕ ПосещенияКонтрагентов.ПометкаУдаления
		|	И ПосещенияКонтрагентов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПосещенияКонтрагентов.ФизическоеЛицо В(&ФизическиеЛица)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПосещенияКонтрагентов.ФизическоеЛицо,
		|	ПосещенияКонтрагентов.ПредметПосещения,
		|	ПосещенияКонтрагентов.Контрагент";
	
	Запрос.УстановитьПараметр("ФизическиеЛица", мФизЛиц);
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца( ПериодПланирования.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца( ПериодПланирования.ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	НеПроизводственныеЧасы.Загрузить( РезультатЗапроса );	
	НеПроизводственныеЧасы.Сортировать("Контрагент,ФизическоеЛицо");
	
	
	
КонецПроцедуры


// посещения заполняем по всем планам работ подразделения
// в таблице Итоги по планам работ
&НаСервере
Процедура ЗаполнитьПосещения_ПоПланамРабот_Уст(ПериодПланирования )
	// если нет тарифной ставки
	МинимальнаяТарифнаяСтавка = Справочники.ТарифныеСтавки.НайтиПоКоду("ТАРИФ 01");
	// массив планов работ
	мПлановРабот = ИтогиПоПланамРабот.Выгрузить(,"ПланРабот").ВыгрузитьКолонку("ПланРабот");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.ПредметПосещения КАК ПланРабот,
		|	ПосещенияКонтрагентов.ФизическоеЛицо,
		|	СУММА(ВЫБОР
		|			КОГДА ПосещенияКонтрагентов.Отработано
		|				ТОГДА ПосещенияКонтрагентов.Часов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧасовФакт,
		|	СУММА(ВЫБОР
		|			КОГДА ПосещенияКонтрагентов.Отработано
		|				ТОГДА 0
		|			ИНАЧЕ ПосещенияКонтрагентов.Часов
		|		КОНЕЦ) КАК ЧасовПлан
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	ПосещенияКонтрагентов.ПредметПосещения В(&ПланыРабот)
		|	И НЕ ПосещенияКонтрагентов.ПометкаУдаления
		|	И ПосещенияКонтрагентов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ПосещенияКонтрагентов.ФизическоеЛицо,
		|	ПосещенияКонтрагентов.ПредметПосещения";
	
	Запрос.УстановитьПараметр("ПланыРабот", 	мПлановРабот);
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца( ПериодПланирования.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца( ПериодПланирования.ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ПосещенияПоПланамРабот.Загрузить( РезультатЗапроса );
	
	
	// обрабатываем тех кто не работает в подразделении
	// физлица, которыу посещали по планам работ, но не являются сотрудниками
	// подразделения и могут не иметь тарифных ставок
	// необходимо дополнить физическими лицами, если они не указаны в списке сотрудников
	мПосетители 	= РезультатЗапроса.ВыгрузитьКолонку("ФизическоеЛицо");
	// уже есть 
	мИсполнители	= ИсполнителиПлановРабот.Выгрузить(,"ФизическоеЛицо");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&Посетители)
		|	И НЕ ФизическиеЛица.Ссылка В (&Исполнители)";
	
	Запрос.УстановитьПараметр("Исполнители",мИсполнители);
	Запрос.УстановитьПараметр("Посетители",	мПосетители);
	// посетители, не являющиеся сотрудниками подразделения
	мДопФизЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");;
	
	// те кто указан в исполнителях задач проектов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланРабот.ЗадачаПроекта
		|ПОМЕСТИТЬ ВТ_ЗадачиПроекта
		|ИЗ
		|	Документ.ПланРабот КАК ПланРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиПроектовИсполнители.ФизическоеЛицо,
		|	ЗадачиПроектовИсполнители.ТарифнаяСтавка
		|ПОМЕСТИТЬ ВТ_ДополнительныеИсполнители
		|ИЗ
		|	ВТ_ЗадачиПроекта КАК ВТ_ЗадачиПроекта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроектов.Исполнители КАК ЗадачиПроектовИсполнители
		|		ПО ВТ_ЗадачиПроекта.ЗадачаПроекта = ЗадачиПроектовИсполнители.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ДополнительныеИсполнители.ФизическоеЛицо,
		|	ВТ_ДополнительныеИсполнители.ТарифнаяСтавка
		|ИЗ
		|	ВТ_ДополнительныеИсполнители КАК ВТ_ДополнительныеИсполнители
		|ГДЕ
		|	ВТ_ДополнительныеИсполнители.ФизическоеЛицо В(&ДопФизЛица)";
	
	Запрос.УстановитьПараметр("ПланыРабот", 	мПлановРабот);
	Запрос.УстановитьПараметр("ДопФизЛица", 	мДопФизЛица);
	
	//
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого ФизическоеЛицо ИЗ мДопФизЛица Цикл
		Исполнитель = ИсполнителиПлановРабот.Добавить();
		Исполнитель.ФизическоеЛицо = ФизическоеЛицо;
		
		Стр = РезультатЗапроса.Найти( ФизическоеЛицо, "ФизическоеЛицо");
		// нет в дополнительных испольнителях, ставим по минимальной ставке
		Если Стр = Неопределено Тогда
			// смотрим персональные настройки
			ТарифнаяСтавка = УП_КадрыСервер.ТарифнаяСтавкаФизЛица( ФизическоеЛицо, ПериодПланирования.ДатаНачала );
			Если НЕ ЗначениеЗаполнено( ТарифнаяСтавка ) Тогда
				ТарифнаяСтавка = МинимальнаяТарифнаяСтавка; 
			КонецЕсли;
		Иначе
			ТарифнаяСтавка = Стр.ТарифнаяСтавка;
		КонецЕсли;
			
		Исполнитель.ТарифнаяСтавка 	= ТарифнаяСтавка;
		Исполнитель.СтавкаФОТ 		= СтавкаФОТПодразделения( Подразделение, Исполнитель.ТарифнаяСтавка, ПериодПланирования.ДатаНачала );
		Исполнитель.КодТС 			= КодТарифнойСтавки( Исполнитель.ТарифнаяСтавка );
		Исполнитель.Пометка			= Истина;
		
	КонецЦикла;
	
	ИсполнителиПлановРабот.Сортировать("КодТС Убыв,ФизическоеЛицо");
	
КонецПроцедуры


// все посещения по планам работ 
// записанные на подразделение
&НаСервере
Процедура ЗаполнитьПосещения_ПоПланамРабот(ПериодПланирования )
	// если нет тарифной ставки
	МинимальнаяТарифнаяСтавка = Справочники.ТарифныеСтавки.НайтиПоКоду("ТАРИФ 01");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.ПредметПосещения КАК ПланРабот,
		|	ПосещенияКонтрагентов.ФизическоеЛицо,
		|	СУММА(ВЫБОР
		|			КОГДА ПосещенияКонтрагентов.Отработано
		|				ТОГДА ПосещенияКонтрагентов.Часов
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧасовФакт,
		|	СУММА(ВЫБОР
		|			КОГДА ПосещенияКонтрагентов.Отработано
		|				ТОГДА 0
		|			ИНАЧЕ ПосещенияКонтрагентов.Часов
		|		КОНЕЦ) КАК ЧасовПлан
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ПосещенияКонтрагентов.ПредметПосещения) = ТИП(Документ.ПланРабот)
		|	И НЕ ПосещенияКонтрагентов.ПометкаУдаления
		|	И ПосещенияКонтрагентов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПосещенияКонтрагентов.Подразделение = &Подразделение
		|
		|СГРУППИРОВАТЬ ПО
		|	ПосещенияКонтрагентов.ФизическоеЛицо,
		|	ПосещенияКонтрагентов.ПредметПосещения";
	
	Запрос.УстановитьПараметр("Подразделение", 	Подразделение);
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца( ПериодПланирования.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца( ПериодПланирования.ДатаОкончания));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	// обновляем таблицу с остатками по планам работ
	ПланыРаботПоПосещениям = РезультатЗапроса.ВыгрузитьКолонку("ПланРабот");
	ОбновитьТаблицуПлановРабот( ПланыРаботПоПосещениям );
	
	ПосещенияПоПланамРабот.Загрузить( РезультатЗапроса );
	
	
	// обрабатываем тех кто не работает в подразделении
	// физлица, которыу посещали по планам работ, но не являются сотрудниками
	// подразделения и могут не иметь тарифных ставок
	// необходимо дополнить физическими лицами, если они не указаны в списке сотрудников
	мПосетители 	= РезультатЗапроса.ВыгрузитьКолонку("ФизическоеЛицо");
	// уже есть 
	мИсполнители	= ИсполнителиПлановРабот.Выгрузить(,"ФизическоеЛицо");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&Посетители)
		|	И НЕ ФизическиеЛица.Ссылка В (&Исполнители)";
	
	Запрос.УстановитьПараметр("Исполнители",мИсполнители);
	Запрос.УстановитьПараметр("Посетители",	мПосетители);
	// посетители, не являющиеся сотрудниками подразделения
	мДопФизЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");;
	
	// те кто указан в исполнителях задач проектов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланРабот.ЗадачаПроекта
		|ПОМЕСТИТЬ ВТ_ЗадачиПроекта
		|ИЗ
		|	Документ.ПланРабот КАК ПланРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиПроектовИсполнители.ФизическоеЛицо,
		|	ЗадачиПроектовИсполнители.ТарифнаяСтавка
		|ПОМЕСТИТЬ ВТ_ДополнительныеИсполнители
		|ИЗ
		|	ВТ_ЗадачиПроекта КАК ВТ_ЗадачиПроекта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроектов.Исполнители КАК ЗадачиПроектовИсполнители
		|		ПО ВТ_ЗадачиПроекта.ЗадачаПроекта = ЗадачиПроектовИсполнители.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ДополнительныеИсполнители.ФизическоеЛицо,
		|	ВТ_ДополнительныеИсполнители.ТарифнаяСтавка
		|ИЗ
		|	ВТ_ДополнительныеИсполнители КАК ВТ_ДополнительныеИсполнители
		|ГДЕ
		|	ВТ_ДополнительныеИсполнители.ФизическоеЛицо В(&ДопФизЛица)";
	
	Запрос.УстановитьПараметр("ДопФизЛица", 	мДопФизЛица);
	
	//
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого ФизическоеЛицо ИЗ мДопФизЛица Цикл
		Исполнитель = ИсполнителиПлановРабот.Добавить();
		Исполнитель.ФизическоеЛицо = ФизическоеЛицо;
		
		Стр = РезультатЗапроса.Найти( ФизическоеЛицо, "ФизическоеЛицо");
		// нет в дополнительных испольнителях, ставим по минимальной ставке
		Если Стр = Неопределено Тогда
			// смотрим персональные настройки
			ТарифнаяСтавка = УП_КадрыСервер.ТарифнаяСтавкаФизЛица( ФизическоеЛицо, ПериодПланирования.ДатаНачала );
			Если НЕ ЗначениеЗаполнено( ТарифнаяСтавка ) Тогда
				ТарифнаяСтавка = МинимальнаяТарифнаяСтавка; 
			КонецЕсли;
		Иначе
			ТарифнаяСтавка = Стр.ТарифнаяСтавка;
		КонецЕсли;
			
		Исполнитель.ТарифнаяСтавка 	= ТарифнаяСтавка;
		Исполнитель.СтавкаФОТ 		= СтавкаФОТПодразделения( Подразделение, Исполнитель.ТарифнаяСтавка, ПериодПланирования.ДатаНачала );
		Исполнитель.КодТС 			= КодТарифнойСтавки( Исполнитель.ТарифнаяСтавка );
		Исполнитель.Пометка			= Истина;
		
	КонецЦикла;
	
	ИсполнителиПлановРабот.Сортировать("КодТС Убыв,ФизическоеЛицо");
	
КонецПроцедуры


//&НаСервере
//Процедура ЗаполнитьПосещения_ПоПланамРабот(ПериодПланирования )
//	// если нет тарифной ставки
//	МинимальнаяТарифнаяСтавка = Справочники.ТарифныеСтавки.НайтиПоКоду("ТАРИФ 01");
//	// массив планов работ
//	мПлановРабот = ИтогиПоПланамРабот.Выгрузить(,"ПланРабот").ВыгрузитьКолонку("ПланРабот");
//	
//	// 2016 посещения по всем планам работ подразделения, независимо от наличия остатков
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ПосещенияКонтрагентов.ПредметПосещения КАК ПланРабот,
//		|	ПосещенияКонтрагентов.ФизическоеЛицо,
//		|	СУММА(ВЫБОР
//		|			КОГДА ПосещенияКонтрагентов.Отработано
//		|				ТОГДА ПосещенияКонтрагентов.Часов
//		|			ИНАЧЕ 0
//		|		КОНЕЦ) КАК ЧасовФакт,
//		|	СУММА(ВЫБОР
//		|			КОГДА ПосещенияКонтрагентов.Отработано
//		|				ТОГДА 0
//		|			ИНАЧЕ ПосещенияКонтрагентов.Часов
//		|		КОНЕЦ) КАК ЧасовПлан
//		|ИЗ
//		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
//		|ГДЕ
//		|	ТИПЗНАЧЕНИЯ(ПосещенияКонтрагентов.ПредметПосещения) = ТИП(Документ.ПланРабот)
//		|	И НЕ ПосещенияКонтрагентов.ПометкаУдаления
//		|	И ПосещенияКонтрагентов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
//		|	И ПосещенияКонтрагентов.ПредметПосещения.Подразделение = &Подразделение
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ПосещенияКонтрагентов.ФизическоеЛицо,
//		|	ПосещенияКонтрагентов.ПредметПосещения";
//	
//	//Запрос.УстановитьПараметр("ПланыРабот", 	мПлановРабот);
//	Запрос.УстановитьПараметр("Подразделение", 	Подразделение);
//	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца( ПериодПланирования.ДатаНачала));
//	Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца( ПериодПланирования.ДатаОкончания));
//	
//	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//	ПосещенияПоПланамРабот.Загрузить( РезультатЗапроса );
//	
//	
//	// обрабатываем тех кто не работает в подразделении
//	// физлица, которые посещали по планам работ, но не являются сотрудниками
//	// подразделения и могут не иметь тарифных ставок
//	// необходимо дополнить физическими лицами, если они не указаны в списке сотрудников
//	мПосетители 	= РезультатЗапроса.ВыгрузитьКолонку("ФизическоеЛицо");
//	// уже есть 
//	мИсполнители	= ИсполнителиПлановРабот.Выгрузить(,"ФизическоеЛицо");
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ФизическиеЛица.Ссылка
//		|ИЗ
//		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
//		|ГДЕ
//		|	ФизическиеЛица.Ссылка В(&Посетители)
//		|	И НЕ ФизическиеЛица.Ссылка В (&Исполнители)";
//	
//	Запрос.УстановитьПараметр("Исполнители",мИсполнители);
//	Запрос.УстановитьПараметр("Посетители",	мПосетители);
//	// посетители, не являющиеся сотрудниками подразделения
//	мДопФизЛица = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");;
//	
//	// те кто указан в исполнителях задач проектов
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ПланРабот.ЗадачаПроекта
//		|ПОМЕСТИТЬ ВТ_ЗадачиПроекта
//		|ИЗ
//		|	Документ.ПланРабот КАК ПланРабот
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ЗадачиПроектовИсполнители.ФизическоеЛицо,
//		|	ЗадачиПроектовИсполнители.ТарифнаяСтавка
//		|ПОМЕСТИТЬ ВТ_ДополнительныеИсполнители
//		|ИЗ
//		|	ВТ_ЗадачиПроекта КАК ВТ_ЗадачиПроекта
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроектов.Исполнители КАК ЗадачиПроектовИсполнители
//		|		ПО ВТ_ЗадачиПроекта.ЗадачаПроекта = ЗадачиПроектовИсполнители.Ссылка
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗЛИЧНЫЕ
//		|	ВТ_ДополнительныеИсполнители.ФизическоеЛицо,
//		|	ВТ_ДополнительныеИсполнители.ТарифнаяСтавка
//		|ИЗ
//		|	ВТ_ДополнительныеИсполнители КАК ВТ_ДополнительныеИсполнители
//		|ГДЕ
//		|	ВТ_ДополнительныеИсполнители.ФизическоеЛицо В(&ДопФизЛица)";
//	
//	Запрос.УстановитьПараметр("ПланыРабот", 	мПлановРабот);
//	Запрос.УстановитьПараметр("ДопФизЛица", 	мДопФизЛица);
//	
//	//
//	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//	Для Каждого ФизическоеЛицо ИЗ мДопФизЛица Цикл
//		Исполнитель = ИсполнителиПлановРабот.Добавить();
//		Исполнитель.ФизическоеЛицо = ФизическоеЛицо;
//		
//		Стр = РезультатЗапроса.Найти( ФизическоеЛицо, "ФизическоеЛицо");
//		// нет в дополнительных испольнителях, ставим по минимальной ставке
//		Если Стр = Неопределено Тогда
//			// смотрим персональные настройки
//			ТарифнаяСтавка = УП_КадрыСервер.ТарифнаяСтавкаФизЛица( ФизическоеЛицо, ПериодПланирования.ДатаНачала );
//			Если НЕ ЗначениеЗаполнено( ТарифнаяСтавка ) Тогда
//				ТарифнаяСтавка = МинимальнаяТарифнаяСтавка; 
//			КонецЕсли;
//		Иначе
//			ТарифнаяСтавка = Стр.ТарифнаяСтавка;
//		КонецЕсли;
//			
//		Исполнитель.ТарифнаяСтавка 	= ТарифнаяСтавка;
//		Исполнитель.СтавкаФОТ 		= СтавкаФОТПодразделения( Подразделение, Исполнитель.ТарифнаяСтавка, ПериодПланирования.ДатаНачала );
//		Исполнитель.КодТС 			= КодТарифнойСтавки( Исполнитель.ТарифнаяСтавка );
//		Исполнитель.Пометка			= Истина;
//		
//	КонецЦикла;
//	
//	ИсполнителиПлановРабот.Сортировать("КодТС Убыв,ФизическоеЛицо");
//	
//КонецПроцедуры



&НаСервере
Процедура ОбнулитьДанныеРасчета()
	ИсполнителиПлановРабот.Очистить();
	ИтогиПоПланамРабот.Очистить();
	НеПроизводственныеЧасы.Очистить();
	ПосещенияПоПланамРабот.Очистить();
	ТаблицаРезультат.Очистить();	
КонецПроцедуры

#КонецОбласти


#Область ВыводРезультатаПланирования

&НаСервере
Функция ПолучитьИспользуемыеТарифныеСтавки()
	// теперь сортируем по коду тарифной ставки в направлении убывания
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("КодТС");
	тз.Колонки.Добавить("ТарифнаяСтавка");
	тз.Колонки.Добавить("СтавкаФОТ");
	тз.Колонки.Добавить("ИтогоПоПлануЧасов");
	тз.Колонки.Добавить("ИтогоЛимитЧасов");
	
	// по планам работ
	Для Каждого ПР ИЗ ИтогиПоПланамРабот Цикл
		Для Каждого ФР ИЗ ПР.ФронтРабот Цикл
			Если тз.Найти( ФР.ТарифнаяСтавка, "ТарифнаяСтавка" ) = Неопределено Тогда
				Стр 					= тз.Добавить();
				ЗаполнитьСтрокуТарифнойСтавки( Стр, ФР.ТарифнаяСтавка, ФР.СтавкаФОТ );
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// по исполнителям
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Если тз.Найти( Исполнитель.ТарифнаяСтавка, "ТарифнаяСтавка"  ) = Неопределено Тогда
			Стр 					= тз.Добавить();
			ЗаполнитьСтрокуТарифнойСтавки( Стр, Исполнитель.ТарифнаяСтавка, Исполнитель.СтавкаФОТ );
		КонецЕсли;
	КонецЦикла;
	тз.Сортировать("КодТС Убыв");
	Возврат тз;
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуТарифнойСтавки( Стр, ТарифнаяСтавка, СтавкаФОТ )
	Стр.КодТС 				= КодТарифнойСтавки( ТарифнаяСтавка);
	Стр.ТарифнаяСтавка 		= ТарифнаяСтавка;
	Стр.СтавкаФОТ 			= СтавкаФОТ;
	Стр.ИтогоПоПлануЧасов 	= 0;
	Стр.ИтогоЛимитЧасов		= 0;
КонецПроцедуры

&НаСервере
Функция ПосещенияПоПлануРабот( ПланРабот )
	Отбор = Новый Структура;
	Отбор.Вставить("ПланРабот", ПланРабот );
	ПосещенияПоПлануРабот = ПосещенияПоПланамРабот.Выгрузить( Отбор );
	Возврат ПосещенияПоПлануРабот;
КонецФункции

&НаСервере
Функция ПланПосещений( Посещения )
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("ТарифнаяСтавка");
	тз.Колонки.Добавить("Часов");
	тз.Колонки.Добавить("СуммаПлан");
	Для Каждого Посещение ИЗ Посещения Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("ФизическоеЛицо", Посещение.ФизическоеЛицо);
		СтрИсполнители = ИсполнителиПлановРабот.НайтиСтроки( Отбор );
		Для Каждого СтрИ ИЗ СтрИсполнители Цикл
			СтрПП = тз.Найти( СтрИ.ТарифнаяСтавка, "ТарифнаяСтавка");
			Если СтрПП = Неопределено Тогда
				СтрПП = тз.Добавить();
				СтрПП.ТарифнаяСтавка 	= СтрИ.ТарифнаяСтавка;
				СтрПП.Часов 			= 0;
				СтрПП.СуммаПлан			= 0;
			КонецЕсли;
			СтрПП.Часов 	= СтрПП.Часов + Посещение.ЧасовФакт + Посещение.ЧасовПлан;
			СтрПП.СуммаПлан	= СтрПП.Часов * СтрИ.СтавкаФОТ;
		КонецЦикла;
	КонецЦикла;
	
	Возврат тз;
КонецФункции

&НаСервере
Функция ПланИсполнителяПоПлануРабот( ФизическоеЛицо, Посещения )
	Стр = Посещения.Найти( ФизическоеЛицо, "ФизическоеЛицо");
	Если Стр = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	возврат Стр.ЧасовФакт + Стр.ЧасовПлан;
		
КонецФункции                                                                                  

&НаСервере
Функция ПланИсполнителяВсего( ФизическоеЛицо)
	Отбор = Новый Структура;
	Отбор.Вставить("ФизическоеЛицо", ФизическоеЛицо );
	ПосещенияФизическоеЛицо = ПосещенияПоПланамРабот.Выгрузить( Отбор );
	ВсегоЧасов = ПосещенияФизическоеЛицо.Итог("ЧасовФакт") + ПосещенияФизическоеЛицо.Итог("ЧасовПлан");
	Возврат ВсегоЧасов;
КонецФункции

&НаСервере
Функция ПолучитьПредметыПосещения()
	тз = НеПроизводственныеЧасы.Выгрузить();
	тз.Свернуть("Контрагент,ПредметПосещения", "Часов" );
	тз.Сортировать("Контрагент,ПредметПосещения" );
	Возврат тз;
КонецФункции

&НаСервере
Функция ЧасовИсполнителяПоПредметамПосещения( Посещение, ФизическоеЛицо)
	Отбор = Новый Структура;
	Отбор.Вставить("ПредметПосещения", 	Посещение.ПредметПосещения );
	Отбор.Вставить("Контрагент", 		Посещение.Контрагент);
	Отбор.Вставить("ФизическоеЛицо", 	ФизическоеЛицо );
	НеПроизвЧасы = НеПроизводственныеЧасы.Выгрузить( Отбор );
	ВсегоЧасов = НеПроизвЧасы.Итог("Часов");
	Возврат ВсегоЧасов;
КонецФункции

&НаСервере
Функция ЧасовИсполнителяПоНорме( ФизическоеЛицо)
	Отбор = Новый Структура;
	Отбор.Вставить("ФизическоеЛицо", 	ФизическоеЛицо );
	НеПроизвЧасы = НеПроизводственныеЧасы.Выгрузить( Отбор );
	ЧасовПоПланамРабот 	= ПланИсполнителяВсего( ФизическоеЛицо);
	ВсегоЧасов 			= НеПроизвЧасы.Итог("Часов");
	Возврат НормаЧасовЗаМесяц - ВсегоЧасов - ЧасовПоПланамРабот;
	
КонецФункции

&НаСервере
Процедура ВывестиШапку( Макет, ИспользуемыеТС, ТаблицаРезультат )
	ПрефиксСтроки = "Шапка";
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ПланыРабот");
	ТаблицаРезультат.Вывести( Область );
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ЛимитыНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого ТС ИЗ ИспользуемыеТС Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ЛимитПоТарифнойСтавке");
		ЗаполнитьЗначенияСвойств( Область.Параметры, ТС );
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|Баланс");
	ТаблицаРезультат.Присоединить( Область );
	
	//Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ПланыНачало");
	//ТаблицаРезультат.Присоединить( Область );
	//Для Каждого ТС ИЗ ИспользуемыеТС Цикл
	//	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ПланПоТарифнойСтавке");
	//	ЗаполнитьЗначенияСвойств( Область.Параметры, ТС );
	//	ТаблицаРезультат.Присоединить( Область );
	//КонецЦикла;
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ИсполнителиНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|Исполнитель");
		ЗаполнитьЗначенияСвойств( Область.Параметры, Исполнитель );
		
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиСтрокуПоПлануРабот( НомерПоПорядку, СтрокаПланаРабот, Макет, ИспользуемыеТС, ТаблицаРезультат )
	// показатели строки плана работ
	ПланРабот			= СтрокаПланаРабот.ПланРабот;
	// лимиты
	ФронтРабот 	= СтрокаПланаРабот.ФронтРабот.Выгрузить();
	// запланированные и отработанные посещения
	Посещения		= ПосещенияПоПлануРабот( ПланРабот );
	// в разрезе тарифных ставок
	ПланПосещений 	= ПланПосещений( Посещения );
	Если Посещения.Количество() = 0 и ТолькоСдвижениемПоПредмету Тогда
		Возврат 0;
	КонецЕсли;
	
	
	ПрефиксСтроки = "ПланРабот";
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланыРабот");
	// 
	Область.Параметры.НомерПоПорядку 	= НомерПоПорядку;
	НомерПоПорядку						= НомерПоПорядку + 1;
	//ПланРабот			= СтрокаПланаРабот.ПланРабот;
	Область.Параметры.ПланРабот			= ПланРабот;
	Область.Параметры.НомерПланаРабот 	= ПланРабот.Номер;
	ЗадачаПроекта 	= СтрокаПланаРабот.ПланРабот.ЗадачаПроекта;
	Область.Параметры.ЗадачаПроекта		= ЗадачаПроекта;
	Область.Параметры.КодПроекта 		= ЗадачаПроекта.Владелец.Код;
	//Область.Параметры.Контрагент		= ЗадачаПроекта.Владелец.Контрагент;
	Область.Параметры.Контрагент		= УП_ПланыРаботПоПроектам.КонтрагентЗадачиПроекта( ЗадачаПроекта );
	ТаблицаРезультат.Вывести( Область );
	
	
	//// лимиты
	//ФронтРабот 	= СтрокаПланаРабот.ФронтРабот.Выгрузить();
	//// запланированные и отработанные посещения
	//Посещения		= ПосещенияПоПлануРабот( ПланРабот );
	//// в разрезе тарифных ставок
	//ПланПосещений 	= ПланПосещений( Посещения );
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ЛимитыНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого ТС ИЗ ИспользуемыеТС Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ЛимитПоТарифнойСтавке");
		СтрФР   = ФронтРабот.Найти( ТС.ТарифнаяСтавка, "ТарифнаяСтавка" );
		Если СтрФР <> Неопределено Тогда
			Область.Параметры.Лимит = СтрФР.ЧасовПлан;
			ТС.ИтогоЛимитЧасов		= ТС.ИтогоЛимитЧасов + СтрФР.ЧасовПлан;
		КонецЕсли;
		СтрПП   = ПланПосещений.Найти( ТС.ТарифнаяСтавка, "ТарифнаяСтавка" );
		Если СтрПП <> Неопределено Тогда
			Область.Параметры.План 	= СтрПП.Часов;
			ТС.ИтогоПоПлануЧасов	= ТС.ИтогоПоПлануЧасов + СтрПП.Часов;
		КонецЕсли;
		
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	//
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|Баланс");
	Баланс 	= ФронтРабот.Итог("СуммаПлан") - ПланПосещений.Итог("СуммаПлан");
	Область.Параметры.Баланс = Баланс;
	ТаблицаРезультат.Присоединить( Область );
	//
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ИсполнителиНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|Исполнитель");
		Область.Параметры.ПланИсполнителя = ПланИсполнителяПоПлануРабот( Исполнитель.ФизическоеЛицо, Посещения);
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	
	Возврат Баланс;
КонецФункции

&НаСервере
Процедура ВывестиСтрокуПоПредметуПосещения( Посещение, Макет, ИспользуемыеТС, ТаблицаРезультат );
	ПрефиксСтроки = "ПоТабелю";
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланыРабот");
	ЗаполнитьЗначенияСвойств( Область.Параметры, Посещение );
	//Область.Параметры.ПредметПосещения 	= Отметка.ПредметПосещения;
	ТаблицаРезультат.Вывести( Область );
	
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ЛимитыНачало");
	ЗаполнитьЗначенияСвойств( Область.Параметры, Посещение );
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого ТС ИЗ ИспользуемыеТС Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ЛимитПоТарифнойСтавке");
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	//
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|Баланс");
	ТаблицаРезультат.Присоединить( Область );
	//
	//Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланыНачало");
	//ТаблицаРезультат.Присоединить( Область );
	//Для Каждого ТС ИЗ ИспользуемыеТС Цикл
	//	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланПоТарифнойСтавке");
	//	ТаблицаРезультат.Присоединить( Область );
	//КонецЦикла;
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ИсполнителиНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|Исполнитель");
		Область.Параметры.Часов = ЧасовИсполнителяПоПредметамПосещения( Посещение, Исполнитель.ФизическоеЛицо);
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуПоНормеЧасов( Макет, ИспользуемыеТС, ТаблицаРезультат );
	ПрефиксСтроки = "ОстатокЧасов";
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланыРабот");
	ТаблицаРезультат.Вывести( Область );
	
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ЛимитыНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого ТС ИЗ ИспользуемыеТС Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ЛимитПоТарифнойСтавке");
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	//
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|Баланс");
	ТаблицаРезультат.Присоединить( Область );
	//
	//Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланыНачало");
	//ТаблицаРезультат.Присоединить( Область );
	//Для Каждого ТС ИЗ ИспользуемыеТС Цикл
	//	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ПланПоТарифнойСтавке");
	//	ТаблицаРезультат.Присоединить( Область );
	//КонецЦикла;
	
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|ИсполнителиНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки+ "|Исполнитель");
		Область.Параметры.Часов = ЧасовИсполнителяПоНорме( Исполнитель.ФизическоеЛицо);
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ВывестиИтогиПоПлануРабот( Баланс, Макет, ИспользуемыеТС, ТаблицаРезультат )
	ПрефиксСтроки = "ИтогоПоПланамРабот";
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ПланыРабот");
	ТаблицаРезультат.Вывести( Область );
	
	//
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ЛимитыНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого ТС ИЗ ИспользуемыеТС Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ЛимитПоТарифнойСтавке");
		Область.Параметры.Лимит = ТС.ИтогоЛимитЧасов;
		Область.Параметры.План 	= ТС.ИтогоПоПлануЧасов;
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	//
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|Баланс");
	Область.Параметры.Баланс = Баланс;
	ТаблицаРезультат.Присоединить( Область );
	
	
	//
	//Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ПланыНачало");
	//ТаблицаРезультат.Присоединить( Область );
	//Для Каждого ТС ИЗ ИспользуемыеТС Цикл
	//	Область = Макет.ПолучитьОбласть( ПрефиксСтроки + "|ПланПоТарифнойСтавке");
	//	Область.Параметры.План = ТС.ИтогоПоПлануЧасов;
	//	ТаблицаРезультат.Присоединить( Область );
	//КонецЦикла;
	//
	Область = Макет.ПолучитьОбласть( ПрефиксСтроки +"|ИсполнителиНачало");
	ТаблицаРезультат.Присоединить( Область );
	Для Каждого Исполнитель ИЗ ИсполнителиПлановРабот Цикл
		Область = Макет.ПолучитьОбласть( ПрефиксСтроки +"|Исполнитель");
		Область.Параметры.ПланИсполнителя = ПланИсполнителяВсего( Исполнитель.ФизическоеЛицо);
		ТаблицаРезультат.Присоединить( Область );
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьОтчет( ТаблицаРезультат, ОчищатьДокумент = Истина )
	Если ОчищатьДокумент Тогда
		ТаблицаРезультат.Очистить();
	КонецЕсли;
	
	// 2016 06 15
	// изменение алгоритма
	// 1. Выбираются все посещения по подразделению, если было посещение по плану работ, 
	//	нп попавшему в список, то список планов работ дополняется
	// 2. Формируется список всех не закрытых планов работ по подразделению,
	//	независимо от наличия остатков фронта работ
	// 
	
	// сравнение с 0 - признак необходимости обновлять
	// может стоит  убрать, т.к. отчет всегда формируется полностью
	//Если ИсполнителиПлановРабот.Количество() = 0 Тогда
		ЗаполнитьИсполителейПлановРабот( Подразделение, ПериодПланирования, Истина );
	//КонецЕсли;
	//Если ИтогиПоПланамРабот.Количество() = 0 Тогда
		ЗаполнитьПланыРабот_НаСервере( Подразделение, ПериодПланирования, Истина );
	//КонецЕсли;
	//Если ПосещенияПоПланамРабот.Количество() = 0 Тогда
		ЗаполнитьПосещения_ПоПланамРабот( ПериодПланирования );
		// заполнить непроизводственные часы
		ЗаполнитьПосещения_ПоПредметамПосещения( ПериодПланирования );
	//КонецЕсли;
	
	
	
	Макет 			= РеквизитФормыВЗначение("Объект").ПолучитьМакет("План");
	ИспользуемыеТС 	= ПолучитьИспользуемыеТарифныеСтавки( );
	
	ВывестиШапку( Макет, ИспользуемыеТС, ТаблицаРезультат );
	
	// выводим по планам работ
	БалансИтого 	= 0;
	НомерПоПорядку 	= 1;
	Для Каждого СтрокаПланаРабот ИЗ ИтогиПоПланамРабот Цикл
		//НомерПоПорядку 	= НомерПоПорядку + 1;
		Баланс 			= ВывестиСтрокуПоПлануРабот( НомерПоПорядку, СтрокаПланаРабот, Макет, ИспользуемыеТС, ТаблицаРезультат );
		БалансИтого		= БалансИтого + Баланс;
	КонецЦикла;
	
	Если ИтогиПоПланамРабот.Количество() <> 0 Тогда
		// итог по планам работ
		ВывестиИтогиПоПлануРабот( БалансИтого, Макет, ИспользуемыеТС, ТаблицаРезультат );
	КонецЕсли;	
	
	// выводим по отметкам табеля
	Посещения = ПолучитьПредметыПосещения();
	Для Каждого Посещение ИЗ Посещения Цикл
		ВывестиСтрокуПоПредметуПосещения( Посещение, Макет, ИспользуемыеТС, ТаблицаРезультат );
	КонецЦикла;
	
	// отклонение от нормы часов
	ВывестиСтрокуПоНормеЧасов( Макет, ИспользуемыеТС, ТаблицаРезультат );
	
	// скроллинг
	ТаблицаРезультат.ФиксацияСверху = 3;
	ТаблицаРезультат.ФиксацияСлева  = 6 + ИспользуемыеТС.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРезультатПланирования(Команда)
	// 2016 04 29
	ОбнулитьДанныеРасчета();
	
	//Если ИсполнителиПлановРабот.Количество() = 0 Тогда
	//	ЗаполнитьИсполителейПлановРабот( Подразделение, ПериодПланирования, Истина );
	//КонецЕсли;
	//Если ИтогиПоПланамРабот.Количество() = 0 Тогда
	//	ЗаполнитьПланыРабот_НаСервере( Подразделение, ПериодПланирования, Истина );
	//КонецЕсли;
	//Если ПосещенияПоПланамРабот.Количество() = 0 Тогда
	//	ЗаполнитьПосещения_ПоПланамРабот( ПериодПланирования );
	//	// заполнить непроизводственные часы
	//	ЗаполнитьПосещения_ПоПредметамПосещения( ПериодПланирования );
	//КонецЕсли;
	
	ПодготовитьОтчет( ТаблицаРезультат );
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьРасчет(Команда)
	ОбнулитьДанныеРасчета();
КонецПроцедуры


#КонецОбласти

#Область ПечатьПлана


&НаСервере
Процедура ПечатьПланаНаСервере( ТабДок )
	Макет 	= РеквизитФормыВЗначение("Объект").ПолучитьМакет("План");
	Область = Макет.ПолучитьОбласть( "Заголовок|ПланыРабот");
	Область.Параметры.Подразделение 		= Подразделение;
	Область.Параметры.ПериодПланирования 	= ПредставлениеПериода( ПериодПланирования.ДатаНачала, 
																	ПериодПланирования.ДатаОкончания,
																	"ФП = Истина ");
	Область.Параметры.НормаРабочегоВремени 	= НормаЧасовЗаМесяц;
	ТабДок.Вывести( Область );
	ПодготовитьОтчет( ТабДок, Ложь );
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПлана(Команда)
	// 2016 04 29
	ОбнулитьДанныеРасчета();
	
	ТабДок = Новый ТабличныйДокумент;
	
	ПечатьПланаНаСервере( ТабДок );
	
	ТабДок.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб 			= Истина;
	ТабДок.ФиксацияСверху 		= 9;
	ТабДок.Показать();
	
КонецПроцедуры


#КонецОбласти


