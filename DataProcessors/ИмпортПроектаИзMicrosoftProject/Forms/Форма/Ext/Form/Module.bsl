&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Текст = "ru = 'Проект MS Project в формате XML'";
		Фильтр = НСтр(Текст) + "(*.xml)|*.xml";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Истина;
		ДиалогОткрытияФайла.Заголовок = "Выберите проект";
		Если ДиалогОткрытияФайла.Выбрать() Тогда
		    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		    Для Каждого ИмяФайла Из МассивФайлов Цикл
				ПутьКФайлу = ИмяФайла;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДатуОграничения( РаботаОбъект, ДатаОграничения )
	//РаботаОбъект = Справочники.ЗадачиПроектовСтруктура.СоздатьЭлемент();
	Если РаботаОбъект.ТипОграничения = Перечисления.ТипыОграниченияРабот.НачалоНеПозднее 
	или  РаботаОбъект.ТипОграничения = Перечисления.ТипыОграниченияРабот.НачалоНеРанее
	или  РаботаОбъект.ТипОграничения = Перечисления.ТипыОграниченияРабот.ФиксированноеНачало Тогда
		РаботаОбъект.РаннийСтарт = ДатаОграничения;
		
	ИначеЕсли	РаботаОбъект.ТипОграничения = Перечисления.ТипыОграниченияРабот.ОкончаниеНеПозднее
	или			РаботаОбъект.ТипОграничения = Перечисления.ТипыОграниченияРабот.ОкончаниеНеРанее
	или			РаботаОбъект.ТипОграничения = Перечисления.ТипыОграниченияРабот.ФиксированноеОкончание Тогда
		РаботаОбъект.РаннийФиниш = ДатаОграничения;

	КонецЕсли;
	
КонецПроцедуры

// если исполнитель не входит в состав подразделения
// то включаем его в список исполнителей
&НаСервереБезКонтекста
Процедура ОбновитьИсполнителейЗадачиПроекта( Исполнитель, ЗадачаПроекта )
	тзСотрудники = УП_КадрыСервер.СотрудникиПодразделенияНаДату(  ЗадачаПроекта.Подразделение, ЗадачаПроекта.НачалоРабот );
	Если тзСотрудники.Найти( Исполнитель, "ФизическоеЛицо") = Неопределено Тогда
		Если ЗадачаПроекта.Исполнители.Найти( Исполнитель, "ФизическоеЛицо") = Неопределено Тогда
			СтрИ = ЗадачаПроекта.Исполнители.Добавить();
			СтрИ.ФизическоеЛицо = Исполнитель;
		КонецЕсли 
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
// в формате "PT40H0M0S"
Функция ПродолжительностьРабот( Знач Продолжительность )
	сПрод = СтрЗаменить( Продолжительность, 	"PT", 	"");
	сПрод = СтрЗаменить( сПрод, 				"H", 	",");
	сПрод = СтрЗаменить( сПрод, 				"M", 	",");
	сПрод = СтрЗаменить( сПрод, 				"S", 	",");
	ПоказателиВремени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(сПрод);
	КоличествоРабочихДней = Окр( Число( ПоказателиВремени[0] ) / 8, 0);
	Возврат КоличествоРабочихДней;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПроектСерверПоДвоичнымДаннымФайла(ДвоичныеДанныеПроекта)
	
	Префикс 				= Новый РазыменовательПространствИменDOM("msp", "http://schemas.microsoft.com/project");
	МассивЗагруженныхЗадач 	= Новый Массив();
	ИмяФайла 				= ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеПроекта.Записать(ИмяФайла);
	ЧтениеXML 		= Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	ПостроительDOM 	= Новый ПостроительDOM;
	ОбъектДокумент 	= ПостроительDOM.Прочитать(ЧтениеXML);	
	ВыражениеXPath 	= ОбъектДокумент.СоздатьВыражениеXPath("/msp:Project", Префикс);
	РезультатXPath 	= ВыражениеXPath.Вычислить(ОбъектДокумент);
	УзелПроект 		= РезультатXPath.ПолучитьСледующий();
	// Если в xml-файле нет тега "Project", останавливаем импорт.
	Если УзелПроект = Неопределено Тогда
		Текст = НСтр("ru = 'Неправильный формат файла.'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		// Получение имени проекта
		ИмяПроекта = ЗначениеРеквизита(УзелПроект, "Name", Тип("Строка"));
		ЗаголовокПроекта = ЗначениеРеквизита(УзелПроект, "Title", Тип("Строка"));
		Если НЕ ЗначениеЗаполнено(ЗаголовокПроекта) Тогда
			Н = Найти( НРег(ИмяПроекта), ".xml");
			ИмяПроекта = Лев(ИмяПроекта, Н-1);
		Иначе
			ИмяПроекта = ЗаголовокПроекта;
		КонецЕсли;
		
		// Заполнение реквизитов проекта
		Если НЕ ЗначениеЗаполнено( ЗадачаПроектаСсылка ) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не указана задача проекта";
			Сообщение.Сообщить();
			Возврат;
		Иначе
			ЗадачаПроекта = ЗадачаПроектаСсылка.ПолучитьОбъект();
			Если ПредварительноОчиститьПроект Тогда
				// пометка на удаление всех задач проекта
				УдалитьЗадачиПроекта( ЗадачаПроектаСсылка );
			КонецЕсли;
		КонецЕсли;
		ЗадачаПроекта.Наименование = ИмяПроекта;
		
		ЗадачаПроекта.ПостановкаЗадачи 	= ЗначениеРеквизита(УзелПроект, "Notes", Тип("Строка"));
		ЗадачаПроекта.ПроектМенеджер 	= ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо;
		ЗадачаПроекта.НачалоРабот		= ЗначениеРеквизита(УзелПроект, "StartDate", Тип("Дата"));
		ЗадачаПроекта.ОкончаниеРабот	= ЗначениеРеквизита(УзелПроект, "FinishDate", Тип("Дата"));
		
		ЗадачаПроекта.ДополнительныеСвойства.Вставить("ЗагрузкаИзProject", Истина);
		ЗадачаПроекта.Записать();
		
		//МассивОбъектовДляОбновленияПрав.Добавить(Проект.Ссылка);
		ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("/msp:Project/msp:Tasks/msp:Task", Префикс);
		
		// Загрузка задач проекта
		ПредшественникиЗадач 	= Новый Массив();
		РодителиЗадач 			= Новый Массив();
		РезультатXPath 			= ВыражениеXPath.Вычислить(ОбъектДокумент);
		УзелЗадача = РезультатXPath.ПолучитьСледующий();
		Пока УзелЗадача <> Неопределено Цикл
			Если НЕ ЗначениеРеквизита(УзелЗадача, "IsNull", Тип("Булево")) Тогда
				Если ЗначениеРеквизита(УзелЗадача, "OutlineNumber", Тип("Строка")) = "0" Тогда
					ТрудозатратыProject = ЗначениеРеквизита(УзелЗадача, "Work", Тип("Строка"));
					
				Иначе
				
					ИДЗадачи 		= ЗначениеРеквизита(УзелЗадача, "UID", Тип("Строка"));
					РаботаСсылка	= ПолучитьЗадачуПоИдентификатору( ЗадачаПроекта, ИДЗадачи);
					Если РаботаСсылка = Неопределено Тогда
						РаботаОбъект = Справочники.ЗадачиПроектовСтруктура.СоздатьЭлемент();
						РаботаОбъект.УстановитьНовыйКод();
						
					Иначе
						РаботаОбъект = РаботаСсылка.ПолучитьОбъект();
						
					КонецЕсли;
					РаботаОбъект.Владелец 				= ЗадачаПроекта.Ссылка;
					РаботаОбъект.ИдентификаторЗадачи 	= ИДЗадачи;
					РаботаОбъект.Наименование 			= ЗначениеРеквизита(УзелЗадача, "Name", Тип("Строка"));
					РаботаОбъект.КодСДР 				= ЗначениеРеквизита(УзелЗадача, "OutlineNumber", Тип("Строка"));
					// сроки
					РаботаОбъект.РаннийСтарт 		= ЗначениеРеквизита(УзелЗадача, "EarlyStart", 		Тип("Дата"));
					РаботаОбъект.РаннийФиниш		= ЗначениеРеквизита(УзелЗадача, "EarlyFinish", 		Тип("Дата"));
					РаботаОбъект.ПозднийСтарт 		= ЗначениеРеквизита(УзелЗадача, "LateStart", 		Тип("Дата"));
					РаботаОбъект.ПозднийФиниш		= ЗначениеРеквизита(УзелЗадача, "LateFinish", 		Тип("Дата"));
					РаботаОбъект.ПроцентВыполнения 	= ЗначениеРеквизита(УзелЗадача, "PercentComplete", 	Тип("Число"));
					РаботаОбъект.Продолжительность 	= ПродолжительностьРабот( ЗначениеРеквизита(УзелЗадача, "Duration", Тип("Строка")));
					РаботаОбъект.ТипОграничения 	= ЗначениеРеквизита(УзелЗадача, "ConstraintType",   Тип("ПеречислениеСсылка.ТипыОграниченияРабот"));
					// пока не используем, для определенных типов ограничения это будет либо
					// ранним стартом либо поздним финишем !!!
					ДатаОграничения = ЗначениеРеквизита(УзелЗадача, "ConstraintDate", Тип("Дата"));
					УстановитьДатуОграничения( РаботаОбъект, ДатаОграничения );

					
					
					// Чтение предшественников задачи
					ВыражениеXPathПредшественники 	= ОбъектДокумент.СоздатьВыражениеXPath("./msp:PredecessorLink", Префикс);	
					РезультатXPathПредшественники 	= ВыражениеXPathПредшественники.Вычислить(УзелЗадача);
					УзелПредшественник 				= РезультатXPathПредшественники.ПолучитьСледующий();	
					
					Пока УзелПредшественник <> Неопределено Цикл
						ДанныеПредшественника = Новый Структура(
							"Последователь, 
							|Предшественник, 
							|ВидСвязи, 
							|Лаг, 
							|ТипЛага");
						ДанныеПредшественника.Последователь 	= ИДЗадачи;
						ДанныеПредшественника.Предшественник 	= ЗначениеРеквизита(УзелПредшественник, "PredecessorUID", 
																													Тип("Строка"));
						ДанныеПредшественника.ВидСвязи 			= ЗначениеРеквизита(УзелПредшественник, "Type", 	Тип("ПеречислениеСсылка.ТипыСвязиРабот"));
						ДанныеПредшественника.Лаг 				= ЗначениеРеквизита(УзелПредшественник, "LinkLag", 	Тип("Строка"));
						
						ПредшественникиЗадач.Добавить(ДанныеПредшественника);
						УзелПредшественник = РезультатXPathПредшественники.ПолучитьСледующий();	
					КонецЦикла;
					
					Если ИмпортироватьРесурсы Тогда
						РаботаОбъект.Ресурсы.Очистить();
						// Загрузка исполнителей задачи
						ВыражениеXPathНазначения 	= ОбъектДокумент.СоздатьВыражениеXPath(
																				"/msp:Project/msp:Assignments/msp:Assignment[msp:TaskUID=" + ИДЗадачи + "]", 
																				Префикс);
						РезультатXPathНазначения 	= ВыражениеXPathНазначения.Вычислить(ОбъектДокумент);
						УзелНазначение 				= РезультатXPathНазначения.ПолучитьСледующий();
						Пока УзелНазначение <> Неопределено Цикл
							//Поиск ресурса
							ИДРесурса = ЗначениеРеквизита(УзелНазначение, "ResourceUID", Тип("Строка"));
							ВыражениеXPathРесурса 	= ОбъектДокумент.СоздатьВыражениеXPath(
																				"/msp:Project/msp:Resources/msp:Resource[msp:UID=" + ИДРесурса + "]", 
																				Префикс);
							РезультатXPathРесурсы 	= ВыражениеXPathРесурса.Вычислить(ОбъектДокумент);
							УзелРесурс 				= РезультатXPathРесурсы.ПолучитьСледующий();
							Если УзелРесурс <> Неопределено Тогда
								ТипРесурса = ЗначениеРеквизита(УзелРесурс, "Type", Тип("Строка"));
								
								Если ТипРесурса = "1" Тогда // Сотрудник
									// Поиск пользователя в ДО, который указан в ресурсе MS Project
									ИДРесурса 		= ЗначениеРеквизита(УзелРесурс, "UID", Тип("Строка"));
									ИмяРесурса 		= ЗначениеРеквизита(УзелРесурс, "Name", Тип("Строка"));
									ИмяРесурса 		= СокрЛП(ИмяРесурса);
									
									// порядок заполнения
									// 0. Если не заполнено имя ресурса, то мимо
									// 1. Если должность заполнена и найдена, то должность
									// 2. Если исполнитель заполнен и не найден - то добавляем исполнителя
									Если НЕ ЗначениеЗаполнено( ИмяРесурса ) Тогда
										Продолжить;
									КонецЕсли;
									
									Должность = Справочники.Должности.НайтиПоНаименованию(ИмяРесурса, Истина );
									Если Не ЗначениеЗаполнено(Должность) Тогда
										Исполнитель = Справочники.ФизическиеЛица.НайтиПоНаименованию( ИмяРесурса, Истина );
										Если НЕ ЗначениеЗаполнено( Исполнитель ) Тогда
											СпрОб = Справочники.ФизическиеЛица.СоздатьЭлемент();
											СпрОб.Код 			= ИмяРесурса;//СтрЗаменить(ИмяРесурса, " ", "");
											СпрОб.Наименование  = ИмяРесурса;
											Попытка
												СпрОб.Записать();
												// !!!! добавить в исполнители задачи !!!
												Исполнитель = СпрОб.Ссылка;
											Исключение
												Сообщение = Новый СообщениеПользователю;
												Сообщение.Текст = ОписаниеОшибки();
												Сообщение.Сообщить();
												
												
											КонецПопытки;
										КонецЕсли;
										// обновляем состав исполнителей
										ОбновитьИсполнителейЗадачиПроекта( Исполнитель, ЗадачаПроекта );
									КонецЕсли;	
									
									Если ЗначениеЗаполнено( Должность ) 
									или  ЗначениеЗаполнено( Исполнитель ) Тогда
										НоваяСтрока = РаботаОбъект.Ресурсы.Добавить();
										Если ЗначениеЗаполнено( Должность) Тогда
											НоваяСтрока.Исполнитель 	= Должность;
											НоваяСтрока.ТарифнаяСтавка	= Должность.ТарифнаяСтавка; 
											
										ИначеЕсли ЗначениеЗаполнено(Исполнитель ) Тогда
											НоваяСтрока.Исполнитель 	= Исполнитель; 
											НоваяСтрока.ТарифнаяСтавка	= УП_КадрыСервер.ТарифнаяСтавкаФизЛица( Исполнитель,  РаботаОбъект.РаннийСтарт );
										КонецЕсли;
										// количество ставок
										НоваяСтрока.Мощность 			= ЗначениеРеквизита(УзелНазначение, "Units", Тип("Число"));
									КонецЕсли;									
									
								КонецЕсли;
							КонецЕсли;
							УзелНазначение = РезультатXPathНазначения.ПолучитьСледующий();
						КонецЦикла;
					КонецЕсли;					
					
					РаботаОбъект.ОбменДанными.Загрузка = Истина;
					РаботаОбъект.Записать();
					МассивЗагруженныхЗадач.Добавить(ИДЗадачи);
					
				КонецЕсли;
			КонецЕсли;
			УзелЗадача = РезультатXPath.ПолучитьСледующий();
		КонецЦикла;
		ЗадачаПроекта.Записать();
		
		ЗафиксироватьТранзакцию();
		
		ЗадачаПроекта.Прочитать();
		
		//удаляем связи в регистре
		УП_РаботыСервер.УдалитьСвязиРаботПоЗадачеПроекта( ЗадачаПроекта.Ссылка );
		
		// После записи всех задач устанавливаем предшественников
		Для Каждого ЗаписьОПредшественнике Из ПредшественникиЗадач Цикл
			УстановитьСвязьМеждуЗадачами( ЗадачаПроекта, ЗаписьОПредшественнике);
		КонецЦикла;
		
		// После записи всех задач устанавливается их иерархия на основании значений КодСДР
		УстановитьИерархиюПоСДР( ЗадачаПроекта.Ссылка );
		
		// установить признак суммарных работ
		// устанавливается при записи
		//УП_РаботыСервер.УстановитьСуммарныеРаботы( ЗадачаПроекта.Ссылка );
		
		// Перенумерация задач
		// ид(-
		//РаботаСПроектами.ЗаполнитьКодыСДРПроектныхЗадач( ЗадачаПроекта.Ссылка);
		
		// Обнуление трудозатрат у суммарных задач
		//ОбнулитьТрудозатратыСуммарныхЗадач(ЗадачаПроекта.Ссылка);
		
		// После импорта всех задач удаляются те, которые не были обновлены и остались от предыдущей загрузки
		Попытка
			НачатьТранзакцию();
			Если ВыполняетсяОбновление И УдалитьНезагруженныеЗадачи Тогда
				ВыборкаЗадач = Справочники.ЗадачиПроектов.Выбрать(, ЗадачаПроекта);
				Пока ВыборкаЗадач.Следующий() Цикл
					Если МассивЗагруженныхЗадач.Найти(ВыборкаЗадач.ИдентификаторЗадачи) = Неопределено Тогда
						ЗадачаПроектаОбъект = ВыборкаЗадач.ПолучитьОбъект();
						ЗадачаПроектаОбъект.УстановитьПометкуУдаления(Истина);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			
		Исключение
			//УдалитьФайлы(ИмяФайла);
			Инфо = ИнформацияОбОшибке();
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
		ЗадачаПроектаСсылка = ЗадачаПроекта.Ссылка;
		
	Исключение
		//УдалитьФайлы(ИмяФайла);
		Инфо = ИнформацияОбОшибке();
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	//УдалитьФайлы(ИмяФайла);
	
КонецПроцедуры


&НаСервере
Процедура УдалитьЗадачиПроекта(ЗадачаПроектаСсылка)
	
	Выборка = Справочники.ЗадачиПроектовСтруктура.Выбрать(, ЗадачаПроектаСсылка);
	Пока Выборка.Следующий() Цикл
		Если НЕ ОбщегоНазначения.ПолучитьЗначениеРеквизита( ЗадачаПроектаСсылка, "ПометкаУдаления") Тогда
			Работа = Выборка.Ссылка.ПолучитьОбъект();
			Работа.УстановитьПометкуУдаления(Истина, Истина);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

// Получает значение реквизита объекта.
// Параметры:
//	Узел - объект типа ЭлементDOM
//	ИмяРеквизита - имя реквизита (дочернего элемента), значение которого необходимо получить
//	Тип - тип значения в документообороте
&НаСервере
Функция ЗначениеРеквизита(Узел, ИмяРеквизита, Тип)

	Результат = Неопределено;
	Для Каждого ДочернийУзел Из Узел.ДочерниеУзлы Цикл
		Значение = ДочернийУзел.ТекстовоеСодержимое;
		Если НРег(ДочернийУзел.ИмяУзла) = НРег(ИмяРеквизита) Тогда
			Если Тип = Тип("Булево") Тогда
				Возврат ?(Значение = "0", Ложь, Истина);
				
			ИначеЕсли Тип = Тип("Число") Тогда
				Возврат Число(Значение);
				
			//ИначеЕсли Тип = Тип("ПеречислениеСсылка.СпособыПланированияПроекта") Тогда
			//	Если Значение = "1" Тогда
			//		Результат = Перечисления.СпособыПланированияПроекта.ОтДатыНачалаПроекта;
			//	Иначе // "0"
			//		Результат = Перечисления.СпособыПланированияПроекта.ОтДатыОкончанияПроекта;
			//	КонецЕсли;
								
			//ИначеЕсли Тип = Тип("ПеречислениеСсылка.ЕдиницыДлительности") Тогда
			//	Если Значение = "3" ИЛИ Число(Значение) - 32 = 3 Тогда
			//		Результат = Перечисления.ЕдиницыДлительности.Минута;
			//	ИначеЕсли Значение = "5" ИЛИ Число(Значение) - 32 = 5 Тогда
			//		Результат = Перечисления.ЕдиницыДлительности.Час;
			//	ИначеЕсли Значение = "7" ИЛИ Число(Значение) - 32 = 7 Тогда
			//		Результат = Перечисления.ЕдиницыДлительности.День;
			//	ИначеЕсли Значение = "9" ИЛИ Число(Значение) - 32 = 9 Тогда
			//		Результат = Перечисления.ЕдиницыДлительности.Неделя;
			//	ИначеЕсли Значение = "11" ИЛИ Число(Значение) - 32 = 11 Тогда
			//		Результат = Перечисления.ЕдиницыДлительности.Месяц;
			//	ИначеЕсли Значение = "21" или Значение = "53" Тогда
			//	Иначе
			//		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			//			НСтр("ru = 'Указана неподдерживаемая единица длительности работ (%1)'"), 
			//			Значение);
			//		ВызватьИсключение Текст;
			//	КонецЕсли;
				
			//ИначеЕсли Тип = Тип("ПеречислениеСсылка.ЕдиницыТрудозатрат") Тогда
			//	Если Значение = "1" Тогда
			//		Результат = Перечисления.ЕдиницыТрудозатрат.ЧеловекоМинута;
			//	ИначеЕсли Значение = "2" Тогда
			//		Результат = Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас;
			//	ИначеЕсли Значение = "3" Тогда
			//		Результат = Перечисления.ЕдиницыТрудозатрат.ЧеловекоДень;
			//	ИначеЕсли Значение = "4" Тогда
			//		Результат = перечисления.ЕдиницыТрудозатрат.ЧеловекоНеделя;
			//	ИначеЕсли Значение = "5" Тогда
			//		Результат = Перечисления.ЕдиницыТрудозатрат.ЧеловекоМесяц;
			//	КонецЕсли;
				
			//ИначеЕсли Тип = Тип("ПеречислениеСсылка.ТипыЗависимостейПроектныхЗадач") Тогда
			//	Если Значение = "0" Тогда
			//		Результат = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеОкончание;
			//	ИначеЕсли Значение = "1" Тогда
			//		Результат = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало;
			//	ИначеЕсли Значение = "2" Тогда
			//		Результат = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоОкончание;
			//	ИначеЕсли Значение = "3" Тогда
			//		Результат = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоНачало;
			//	КонецЕсли;
			ИначеЕсли Тип = Тип("ПеречислениеСсылка.ТипыСвязиРабот") Тогда
				Если Значение = "0" Тогда
					Результат = Перечисления.ТипыСвязиРабот.КонецКонец;
				ИначеЕсли Значение = "1" Тогда
					Результат = Перечисления.ТипыСвязиРабот.КонецНачало;
				ИначеЕсли Значение = "2" Тогда
					Результат = Перечисления.ТипыСвязиРабот.НачалоКонец;
				ИначеЕсли Значение = "3" Тогда
					Результат = Перечисления.ТипыСвязиРабот.НачалоНачало;
				КонецЕсли;
				
			
				
			//ИначеЕсли Тип = Тип("ПеречислениеСсылка.ТипыОграниченийПроектныхЗадач") Тогда
			//	Если Значение = "0" Тогда
			//		Результат = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноРаньше;
			//	ИначеЕсли Значение = "1" Тогда
			//		Результат = Перечисления.ТипыОграниченийПроектныхЗадач.КакМожноПозже;
			//	ИначеЕсли Значение = "2" Тогда
			//		Результат = Перечисления.ТипыОграниченийПроектныхЗадач.ФиксированноеНачало;
			//	ИначеЕсли Значение = "3" Тогда
			//		Результат = Перечисления.ТипыОграниченийПроектныхЗадач.ФиксированноеОкончание;
			//	ИначеЕсли Значение = "4" Тогда
			//		Результат = Перечисления.ТипыОграниченийПроектныхЗадач.НачалоНеРанее;
			//	ИначеЕсли Значение = "5" Тогда
			//		Результат = Перечисления.ТипыОграниченийПроектныхЗадач.НачалоНеПозднее;
			//	ИначеЕсли Значение = "6" Тогда
			//		Результат = Перечисления.ТипыОграниченийПроектныхЗадач.ОкончаниеНеРанее;
			//	ИначеЕсли Значение = "7" Тогда
			//		Результат = Перечисления.ТипыОграниченийПроектныхЗадач.ОкончаниеНеПозднее;
			//	КонецЕсли;
			
			ИначеЕсли Тип = Тип("ПеречислениеСсылка.ТипыОграниченияРабот") Тогда
				Если 		Значение = "0" 	 Тогда
					Результат = Перечисления.ТипыОграниченияРабот.КакМожноРаньше;
				ИначеЕсли 	Значение = "1" Тогда
					Результат = Перечисления.ТипыОграниченияРабот.КакМожноПозже;
				ИначеЕсли 	Значение = "2" Тогда
					Результат = Перечисления.ТипыОграниченияРабот.ФиксированноеНачало;
				ИначеЕсли 	Значение = "3" Тогда
					Результат = Перечисления.ТипыОграниченияРабот.ФиксированноеОкончание;
				ИначеЕсли 	Значение = "4" Тогда
					Результат = Перечисления.ТипыОграниченияРабот.НачалоНеРанее;
				ИначеЕсли 	Значение = "5" Тогда
					Результат = Перечисления.ТипыОграниченияРабот.НачалоНеПозднее;
				ИначеЕсли 	Значение = "6" Тогда
					Результат = Перечисления.ТипыОграниченияРабот.ОкончаниеНеРанее;
				ИначеЕсли 	Значение = "7" Тогда
					Результат = Перечисления.ТипыОграниченияРабот.ОкончаниеНеПозднее;
				КонецЕсли;
				
			ИначеЕсли Тип = Тип("Дата") Тогда
				Значение = СтрЗаменить(Значение, "-", "");
				Значение = СтрЗаменить(Значение, ":", "");
				Значение = СтрЗаменить(Значение, "T", "");
				Результат = Дата(Значение);
				
				
			Иначе
				Результат = Значение;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьСвязьМеждуЗадачами(	ЗадачаПроекта, ЗаписьОСвязиМеждуЗадачами)
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Работа 	 		= ПолучитьЗадачуПоИдентификатору( ЗадачаПроекта, ЗаписьОСвязиМеждуЗадачами.Последователь);
	ВедущаяРабота	= ПолучитьЗадачуПоИдентификатору( ЗадачаПроекта, ЗаписьОСвязиМеждуЗадачами.Предшественник);
	Если Работа 	= Неопределено ИЛИ ВедущаяРабота = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	МенЗаписи 				= РегистрыСведений.СвязиРабот.СоздатьМенеджерЗаписи();
	МенЗаписи.Работа 		= Работа;
	МенЗаписи.ВедущаяРабота	= ВедущаяРабота;
	МенЗаписи.ТипСвязи		= ЗаписьОСвязиМеждуЗадачами.ВидСвязи;
	МенЗаписи.Записать( Истина );
	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗадачуПоИдентификатору( Знач ЗадачаПроекта, Идентификатор)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Работы.Ссылка
		|ИЗ
		|	Справочник.ЗадачиПроектовСтруктура КАК Работы
		|ГДЕ
		|	Работы.Владелец = &ЗадачаПроекта
		|	И Работы.ПометкаУдаления = ЛОЖЬ
		|	И Работы.ИдентификаторЗадачи = &ИдентификаторЗадачи";
		
	Запрос.УстановитьПараметр("ИдентификаторЗадачи", 	Идентификатор);
	Запрос.УстановитьПараметр("ЗадачаПроекта", 			ЗадачаПроекта.Ссылка);
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		С = ОписаниеОшибки();
	КонецПопытки;
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура УстановитьИерархиюПоСДР( ЗадачаПроекта )
	
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ЗадачиПроектовСтруктура КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Владелец = &ЗадачаПроекта
		|	И ПроектныеЗадачи.ПометкаУдаления = ЛОЖЬ";
		
		
	Запрос.УстановитьПараметр("ЗадачаПроекта", ЗадачаПроекта);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РаботаОбъект 	= Выборка.Ссылка.ПолучитьОбъект();
		МассивПодстрок 	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			РаботаОбъект.КодСДР,
			".");
			
		Если МассивПодстрок.Количество() > 1 Тогда
			ВышестоящийКод = "";
			Для Индекс = 0 по МассивПодстрок.Количество() - 2 Цикл
				ВышестоящийКод = ВышестоящийКод + МассивПодстрок[Индекс];
				Если Индекс < МассивПодстрок.Количество() - 2 Тогда
					ВышестоящийКод = ВышестоящийКод + ".";
				КонецЕсли;
			КонецЦикла;
			РодительСсылка = ПолучитьЗадачуПоКодуСДР( ЗадачаПроекта, ВышестоящийКод);
			Если РодительСсылка <> Неопределено Тогда
				РаботаОбъект.Родитель = РодительСсылка;
				РаботаОбъект.Записать();
			КонецЕсли;
			
		ИначеЕсли МассивПодстрок.Количество() = 1 И МассивПодстрок[0] <> "0" Тогда
			РодительСсылка = ПолучитьЗадачуПоКодуСДР( ЗадачаПроекта, "0");
			Если РодительСсылка <> Неопределено Тогда
				РаботаОбъект.Родитель = РодительСсылка;
				РаботаОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗадачуПоКодуСДР(ЗадачаПроекта, КодСДР)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ЗадачиПроектовСтруктура КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.КодСДР = &КодСДР
		|	И ПроектныеЗадачи.Владелец = &ЗадачаПроекта
		|	И ПроектныеЗадачи.ПометкаУдаления = Ложь";
		
	Запрос.УстановитьПараметр("КодСДР", КодСДР);
	Запрос.УстановитьПараметр("ЗадачаПроекта", ЗадачаПроекта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция КонвертироватьДлительность(
	Значение, 
	МинутВДне,
	МинутВНеделе,
	ДнейВмесяце, 
	ТипЗначенияДО)
	
	// Получение значения часов-минут-секунд из значения длительности
	Если Найти(Значение, "PT") > 0 Тогда
		Значение = СтрЗаменить(Значение, "PT", "");
		СтрокаЧасов = Сред(Значение, 1, Найти(Значение, "H"));
		ЗначениеЧасов = СтрЗаменить(СтрокаЧасов, "H", "");
		Значение = СтрЗаменить(Значение, СтрокаЧасов, "");
		СтрокаМинут = Сред(Значение, 1, Найти(Значение, "M"));
		ЗначениеМинут = СтрЗаменить(СтрокаМинут, "M", "");
		ДлительностьЗначение = ЗначениеЧасов * 60 + ЗначениеМинут;
	Иначе
		ДлительностьЗначение = Число(Значение) / 10;
	КонецЕсли;
	
	Если ТипЗначенияДО = Перечисления.ЕдиницыДлительности.Минута
		ИЛИ ТипЗначенияДО = Перечисления.ЕдиницыТрудозатрат.ЧеловекоМинута Тогда
		Возврат ДлительностьЗначение;
	ИначеЕсли ТипЗначенияДО = Перечисления.ЕдиницыДлительности.Час
		ИЛИ ТипЗначенияДО = Перечисления.ЕдиницыТрудозатрат.ЧеловекоЧас Тогда
		Возврат ДлительностьЗначение / 60;
	ИначеЕсли ТипЗначенияДО = Перечисления.ЕдиницыДлительности.День
		ИЛИ ТипЗначенияДО = Перечисления.ЕдиницыТрудозатрат.ЧеловекоДень Тогда
		Возврат ДлительностьЗначение / МинутВДне;
	ИначеЕсли ТипЗначенияДО = Перечисления.ЕдиницыДлительности.Неделя
		ИЛИ ТипЗначенияДО = Перечисления.ЕдиницыТрудозатрат.ЧеловекоНеделя Тогда
		Возврат ДлительностьЗначение / МинутВНеделе;
	ИначеЕсли ТипЗначенияДО = Перечисления.ЕдиницыДлительности.Месяц
		ИЛИ ТипЗначенияДО = Перечисления.ЕдиницыТрудозатрат.ЧеловекоМесяц Тогда
		Возврат ДлительностьЗначение / (МинутВДне * ДнейВмесяце);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Загрузить(Команда)
	
	ПодключитьРасширениеРаботыСФайлами();
	
	Отказ = Ложь;
	ОчиститьСообщения();
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу)  Тогда
		Текст = НСтр("ru = 'Поле ""Источник данных"" не заполнено.'");
		Путь = "ПутьКФайлу";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			,
			Путь,
			,
			Отказ);
	КонецЕсли;

	Файл = Новый Файл(ПутьКФайлу);
	Если Не Файл.Существует() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1"" не найден'"),
			ПутьКФайлу);
		Путь = "ПутьКФайлу";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			,
			Путь,
			,
			Отказ);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на неподдерживаемые возможности проекта в MS Project.
	// Если таковые будут найдены, будет задан вопрос - продолжать ли импорт.
	ТекстСостояния = НСтр("ru = 'Выполняется проверка задачи проекта. Пожалуйста, подождите...'");
	Состояние(ТекстСостояния);
	Попытка
		Если ЗначениеЗаполнено(ПутьКФайлу) 
			И НайтиФайлы(ПутьКФайлу).Количество() > 0 Тогда
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПутьКФайлу);
			ПроверитьПроектСерверПоДвоичнымДанным(ДвоичныеДанныеФайла);
		ИначеЕсли ЗначениеЗаполнено(ПутьКФайлу) 
			И НайтиФайлы(ПутьКФайлу).Количество() = 0 Тогда	
			Возврат;
		КонецЕсли;
	Исключение
		ЕстьНеподдерживаемыеОпции = Истина;
		Инфо = ИнформацияОбОшибке();
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некоторые свойства загружаемых задач не поддерживаются в 1С:Документооборот:%1%1%2'"),
			Символы.ПС,
			Инфо.Описание);
		Режим = Новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить загрузку'"));
		Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отменить загрузку'"));
		Ответ = Вопрос(ТекстВопроса, Режим, , КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецПопытки;
	
	// Если неподдерживаемых возможностей нет или импорт был продолжен несмотря на их наличие	
	ТекстСостояния = НСтр("ru = 'Выполняется загрузка проекта. Пожалуйста, подождите...'");
	Состояние(ТекстСостояния);
	Попытка
		Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ПутьКФайлу);
			ЗагрузитьПроектСерверПоДвоичнымДаннымФайла(ДвоичныеДанныеФайла);
			
		КонецЕсли;
		Состояние();
		Если ВыполняетсяОбновление Тогда
			ТекстОповещения = НСтр("ru = 'Завершено обновление проекта.'");
		Иначе
			ТекстОповещения = НСтр("ru = 'Завершен импорт проекта.'");
		КонецЕсли;
		
		// ид(-
		ОповеститьОбИзменении( Тип("СправочникСсылка.ЗадачиПроектов" ));
		Оповестить("Изменение_ЗадачиПроекта", ЗадачаПроектаСсылка, ЭтаФорма);
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Проект ""%1"" успешно загружен из файла ""%2""'"),
			Строка( ЗадачаПроектаСсылка ),
			ПутьКФайлу);
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			ПолучитьНавигационнуюСсылку(ЗадачаПроектаСсылка),
			ТекстПояснения,
			БиблиотекаКартинок.Информация32);
		ПоказатьПредупреждение(,ТекстОповещения);
		Закрыть();
	Исключение
		ВызватьИсключение;	
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПроектСерверПоДвоичнымДанным(ДвоичныеДанныеПроекта)
	
	Префикс = Новый РазыменовательПространствИменDOM("msp", "http://schemas.microsoft.com/project");
	МассивЗагруженныхЗадач = Новый Массив();
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеПроекта.Записать(ИмяФайла);
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ИмяФайла);
	ПостроительDOM = Новый ПостроительDOM;
	ОбъектДокумент = ПостроительDOM.Прочитать(ЧтениеXML);	
	ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("/msp:Project", Префикс);
	РезультатXPath = ВыражениеXPath.Вычислить(ОбъектДокумент);
	УзелПроект = РезультатXPath.ПолучитьСледующий();
	// Если в xml-файле нет тега "Project", останавливаем импорт.
	Если УзелПроект = Неопределено Тогда
		//УдалитьФайлы(ИмяФайла);
		Текст = НСтр("ru = 'Неправильный формат файла.'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ТекстОшибок = "";
	
    ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("/msp:Project/msp:Tasks/msp:Task", Префикс);
	РезультатXPath = ВыражениеXPath.Вычислить(ОбъектДокумент);
	УзелЗадача = РезультатXPath.ПолучитьСледующий();
	КоличествоЗадачПодпроект = 0;
	Пока УзелЗадача <> Неопределено Цикл
		Если НЕ ЗначениеРеквизита(УзелЗадача, "IsNull", Тип("Булево")) 
			И ЗначениеРеквизита(УзелЗадача, "UID", Тип("Строка")) <> "0" Тогда
			ИмяЗадачи = ЗначениеРеквизита(УзелЗадача, "Name", Тип("Строка"));
						
			// Проверка на то, что задача является подпроектом
			Если ЗначениеРеквизита(УзелЗадача, "IsSubproject", Тип("Булево")) Тогда
				КоличествоЗадачПодпроект = КоличествоЗадачПодпроект + 1;	
			КонецЕсли;
			
		КонецЕсли;
		УзелЗадача = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;
	
	// Поиск задач, выполнение которых превано (Правка/Прервать или Edit/Split)
	ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("/msp:Project/msp:Assignments/msp:Assignment", Префикс);
	РезультатXPath = ВыражениеXPath.Вычислить(ОбъектДокумент);
	УзелНазначение = РезультатXPath.ПолучитьСледующий();
	КоличествоРазделенныхЗадач = 0;
	Пока УзелНазначение <> Неопределено Цикл
		
		UID = ЗначениеРеквизита(УзелНазначение, "UID", Тип("Строка"));
		
		ВыражениеXPathУчасткиРабот = ОбъектДокумент.СоздатьВыражениеXPath("/msp:Project/msp:Assignments/msp:Assignment[msp:UID=" + UID + "]/msp:TimephasedData", Префикс);
		РезультатXPathУчасткиРабот = ВыражениеXPathУчасткиРабот.Вычислить(ОбъектДокумент);
		УзелУчастокРабот = РезультатXPathУчасткиРабот.ПолучитьСледующий();
		ЗаполненныйУчасток = Ложь;
		НезаполненныйУчасток = Ложь;
		ПрерваннаяЗадача = Ложь;
		Пока УзелУчастокРабот <> Неопределено Цикл
			ВеличинаРаботы = ЗначениеРеквизита(УзелУчастокРабот, "Value", Тип("Строка"));
			Если ВеличинаРаботы <> "PT0H0M0S"
				И ВеличинаРаботы <> "0" 
				И Не ЗаполненныйУчасток Тогда
				ЗаполненныйУчасток = Истина;
			КонецЕсли;
			
			Если ЗаполненныйУчасток = Истина
				И (ВеличинаРаботы = "PT0H0M0S"
				ИЛИ ВеличинаРаботы = "0") Тогда
				НезаполненныйУчасток = Истина;
			КонецЕсли;
			
			Если ВеличинаРаботы <> "PT0H0M0S"
				И ВеличинаРаботы <> "0" 
				И ЗаполненныйУчасток
				И НезаполненныйУчасток Тогда
				ПрерваннаяЗадача = Истина;
				Прервать;
			КонецЕсли;
			УзелУчастокРабот = РезультатXPathУчасткиРабот.ПолучитьСледующий();	
		КонецЦикла;
		
		Если ПрерваннаяЗадача Тогда
			КоличествоРазделенныхЗадач = КоличествоРазделенныхЗадач + 1;	
		КонецЕсли;
		
		УзелНазначение = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;
	
	Если КоличествоРазделенныхЗадач > 0 Тогда
		ТекстОшибок = 
			ТекстОшибок 
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Обнаружены прерванные задачи (%1)'"),
				Строка(КоличествоРазделенныхЗадач))
			+ Символы.ПС;	
	КонецЕсли;
	
	Если КоличествоЗадачПодпроект > 0 Тогда
		ТекстОшибок = 
			ТекстОшибок 
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Несколько задач (%1) настроено как подпроект'"),
				Строка(КоличествоЗадачПодпроект))
			+ Символы.ПС;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибок) Тогда
		//УдалитьФайлы(ИмяФайла);
		ТекстОшибок = 
			ТекстОшибок 
			+ Символы.ПС
			+ НСтр("ru = 'Проект будет загружен с признаком ""Редактируется в сторонней системе"" и будет недоступен для редактирования.'");
		ЧтениеXML.Закрыть();
		ВызватьИсключение ТекстОшибок;
	КонецЕсли;
	ЧтениеXML.Закрыть();
	//УдалитьФайлы(ИмяФайла);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПроектСерверПоСсылкеНаФайл(ФайлИзБазы)
	
	// ид(-
	//ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(ФайлИзБазы);
	//ПроверитьПроектСерверПоДвоичнымДанным(ФайлИзБазы);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗадачаПроектаСсылка 				= Параметры.ЗадачаПроекта;
	РежимЗагрузки 						= "ЗагрузкаИзФайлаНаДиске";
	ИмпортироватьРесурсы 				= Истина;
	СоздаватьНеНайденныхИсполнителей 	= Истина;
	
	
	УстановитьДоступностьЭлементов(
		Элементы, 
		ЗадачаПроектаСсылка,  
		ИмпортироватьРесурсы,
		УдалитьНезагруженныеЗадачи,
		ПредварительноОчиститьПроект);
		
	ВыполняетсяОбновление = ЗначениеЗаполнено(ЗадачаПроектаСсылка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементов(
	Элементы,  
	ЗадачаПроекта, 
	ИмпортироватьРесурсы,
	УдалитьНезагруженныеЗадачи,
	ПредварительноОчиститьПроект)
		
	Если НЕ ИмпортироватьРесурсы Тогда
		Элементы.ДекорацияПояснениеИмпортаРесурсов.Доступность = Ложь;
	Иначе
		Элементы.ДекорацияПояснениеИмпортаРесурсов.Доступность = Истина;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ЗадачаПроекта) Тогда
		Элементы.УдалитьНезагруженныеЗадачи.Доступность = Ложь;
		Элементы.ДекорацияУдалитьЗадачиПояснение.Доступность = Ложь;
		//Элементы.ДекорацияПроектПояснение.Заголовок = НСтр("ru = 'Будет создан новый проект.'");
	Иначе
		Элементы.УдалитьНезагруженныеЗадачи.Доступность = Истина;
		Элементы.ДекорацияУдалитьЗадачиПояснение.Доступность 	= Истина;
		//Элементы.ДекорацияПроектПояснение.Заголовок = НСтр("ru 	= 'Проект будет обновлен.'");
	КонецЕсли;
	
	Если ПредварительноОчиститьПроект Тогда
		Элементы.УдалитьНезагруженныеЗадачи.Доступность 		= Ложь;
		Элементы.ДекорацияУдалитьЗадачиПояснение.Доступность 	= Ложь;
	Иначе
		Элементы.УдалитьНезагруженныеЗадачи.Доступность 		= ЗначениеЗаполнено(ЗадачаПроекта);
		Элементы.ДекорацияУдалитьЗадачиПояснение.Доступность 	= ЗначениеЗаполнено(ЗадачаПроекта);
	КонецЕсли;
	
	Если УдалитьНезагруженныеЗадачи Тогда
		Элементы.ДекорацияУдалитьЗадачиПояснение.Доступность = 
			ЗначениеЗаполнено(ЗадачаПроекта) И Элементы.УдалитьНезагруженныеЗадачи.Доступность;
	Иначе
		Элементы.ДекорацияУдалитьЗадачиПояснение.Доступность = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектСсылкаПриИзменении(Элемент)
	
	// ид(-
	ФайлИзБазы = ПредопределенноеЗначение("Справочник.ЗадачиПроектов.ПустаяСсылка");
	//СсылкаНаВнешнийФайл = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектСсылка, "СсылкаНаВнешнийФайл");
	//Если ЗначениеЗаполнено(СсылкаНаВнешнийФайл) Тогда
	//	Если ТипЗнч(СсылкаНаВнешнийФайл) = Тип("Строка") Тогда
	//		Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда
	//			ПутьКФайлу = СсылкаНаВнешнийФайл;
	//		КонецЕсли;
	//		РежимЗагрузки = "ЗагрузкаИзФайлаНаДиске";
	//	ИначеЕсли ТипЗнч(СсылкаНаВнешнийФайл) = Тип("СправочникСсылка.Файлы") Тогда
	//		Если Не ЗначениеЗаполнено(ФайлИзБазы) Тогда
	//			ФайлИзБазы = СсылкаНаВнешнийФайл;
	//		КонецЕсли;
	//		РежимЗагрузки = "ЗагрузкаИзФайлаВБазе";
	//	КонецЕсли;
	//КонецЕсли;
	//Элементы.ВидПроекта.Доступность = Истина;
	//Если ИспользоватьВидыПроектов Тогда
	//	ВидПроекта = ВидПроектаПоУмолчанию;
	//	Если ЗначениеЗаполнено(ПроектСсылка) Тогда
	//		Элементы.ВидПроекта.Доступность = Ложь;
	//		ВидПроекта = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПроектСсылка, "ВидПроекта");
	//		Если Не ЗначениеЗаполнено(ВидПроекта) Тогда
	//			ВидПроекта = ВидПроектаПоУмолчанию;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	//УстановитьДоступностьЭлементов(
	//	Элементы,  
	//	ПроектСсылка,  
	//	ИмпортироватьРесурсы,
	//	УдалитьНезагруженныеЗадачи,
	//	ПредварительноОчиститьПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьРесурсыПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(
		Элементы,  
		ЗадачаПроектаСсылка,  
		ИмпортироватьРесурсы,
		УдалитьНезагруженныеЗадачи,
		ПредварительноОчиститьПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если вебклиент Тогда
	УстановитьРасширениеРаботыСФайлами();
	#КонецЕсли
	
	УстановитьДоступностьЭлементов(
		Элементы,  
		ЗадачаПроектаСсылка, 
		ИмпортироватьРесурсы,
		УдалитьНезагруженныеЗадачи,
		ПредварительноОчиститьПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Результат = ОткрытьФорму("Справочник.Проекты.ФормаВыбора", , Элемент); 
	//Оповестить("ЗадачаПроектаЗагруженаИзMSProject", ЗадачаПроектаСсылка, ЭтаФорма );
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНезагруженныеЗадачиПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(
		Элементы,  
		ЗадачаПроектаСсылка,  
		ИмпортироватьРесурсы,
		УдалитьНезагруженныеЗадачи,
		ПредварительноОчиститьПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительноОчиститьПроектПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(
		Элементы,  
		ЗадачаПроектаСсылка,  
		ИмпортироватьРесурсы,
		УдалитьНезагруженныеЗадачи,
		ПредварительноОчиститьПроект);
	
КонецПроцедуры

