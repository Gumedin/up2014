
// 2015 07 03
&НаСервереБезКонтекста
Функция СуммаПоСмете( ПланРабот )
	//СметаПлана  =  Документы.ПланРабот.СметаПланаРабот( ПланРабот );
	СметаПлана  =  УП_ПланыРаботПоПроектам.СметаПланаРабот( ПланРабот );
	//СтрСметы = Документы.ПланРабот.СуммаПланаРаботПоСметеЗадачиПроекта( ЗадачаПроекта );
	Если СметаПлана = Неопределено Тогда
		Возврат 0; 
	Иначе
		Возврат СметаПлана.СуммаПлан;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ РазрешеноСоздаватьДокумент( Объект.Ссылка, Объект.ЗадачаПроекта.Владелец ) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;		
	//Если НЕ ЗначениеЗаполнено( Объект.ЗадачаПроекта ) Тогда
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;		
		
	
	СуммаПоСмете = СуммаПоСмете( Объект.Ссылка );
	// 
	ЗаполнитьДеревоФР();
	
	// 
	НастроитьСписокПосещений();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоФР()
	// заполняем дерево
	Объект.ФронтРабот.Сортировать("Месяц,ТарифнаяСтавка");
	тз 		= Объект.ФронтРабот.Выгрузить();
	тзНС 	= тз.Скопировать();
	тзНС.Свернуть("Месяц", "");
	тзНС.Сортировать("Месяц");
	
	// 
	СуммаВсего 	= 0;
	ВеткиДерева = ДеревоФР.ПолучитьЭлементы();
	ВеткиДерева.Очистить();
	
	Для Каждого СтрНС ИЗ тзНС Цикл
		Ветка = ВеткиДерева.Добавить();
		Ветка.Месяц = СтрНС.Месяц;
		мСтрок = тз.НайтиСтроки(Новый Структура("Месяц", СтрНС.Месяц ));
		Для Каждого мСтрока ИЗ мСтрок Цикл
			Подветка 			= Ветка.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств( Подветка, мСтрока );
			Ветка.Количество	= Ветка.Количество 	+ мСтрока.Количество;
			Ветка.Сумма			= Ветка.Сумма 		+ мСтрока.Сумма;
			
			//
			СуммаВсего			= СуммаВсего 		+ мСтрока.Сумма;
		КонецЦикла;
	КонецЦикла;
	
	Если СуммаПоСмете <> 0 Тогда
		Объект.ОстатокПоСмете = СуммаПоСмете - СуммаВсего;
	Иначе
		Объект.ОстатокПоСмете = 0;
	КонецЕсли;
	
КонецПроцедуры


//******************************************************************************************************
//  	Действия над фронтом работ
//	
// если нет то добавляем

&НаКлиенте
Процедура ВыполнитьИзменениеФР(Команда)
	Если 	Действие = "Добавить" 		
	или 	Действие = "Вычесть"
	или		Действие = "Очистить" 		
	или		Действие = "Установить" 	
	Тогда   
		ФронтРабот_ОбработатьИзменения( Действие );

	Иначе
		ПоказатьПредупреждение(,"Действие [" + Действие + "] не обрабатывается!", 10);
		Возврат;
	КонецЕсли;
	
	
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ИсполнениеПланаРабота( ПланРабот  )
	
	СтрЗакрытия = Документы.ПланРабот.ЗакрытиеПланаРабот( ПланРабот);
	Если СтрЗакрытия = Неопределено Тогда
		Возврат Дата(1,1,1); 
	Иначе
		Возврат СтрЗакрытия.Месяц;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция СметаЗадачиПроведена( ПланРабот  )
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СметаЗадачиПроектаДокументы.Документ
		|ИЗ
		|	Документ.СметаЗадачиПроекта.Документы КАК СметаЗадачиПроектаДокументы
		|ГДЕ
		|	СметаЗадачиПроектаДокументы.Документ = &ПланРабот
		|	И СметаЗадачиПроектаДокументы.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("ПланРабот", ПланРабот);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции


 &НаСервере
Процедура НастроитьСписокПосещений()
    ЭлементОтбора = КонтрагентыПосещений.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПредметПосещения");
    ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование    = Истина;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
    ЭлементОтбора.ПравоеЗначение   = Объект.Ссылка;
КонецПроцедуры   



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ИсполненВключая = ИсполнениеПланаРабота( Объект.Ссылка );
	Элементы.БезКоэффициентовФОТ.Доступность = НЕ СметаЗадачиПроведена( Объект.Ссылка  );
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВсеДерево()
	Для Каждого ГруппаДерева Из ДеревоФР.ПолучитьЭлементы() Цикл
		Элементы.ДеревоФР.Развернуть( ГруппаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФРПриИзменении(Элемент)
	ОткрытьВсеДерево();
КонецПроцедуры

//*******************************************************************
// изменение плана работ
&НаСервере
Процедура ФронтРабот_ОбработатьИзменения( Команда, сКалендарь = Неопределено, НазвПоляКалендаря = "" ) Экспорт
	
	Документ = РеквизитФормыВЗначение("Объект");
	УП_ПланыРаботПоПроектам.ОбработатьИзмененияФронтаРабот( Документ, Период, Количество, Должность, ИсполненВключая,
															Команда, сКалендарь, НазвПоляКалендаря);
	
	ЗначениеВРеквизитФормы( Документ, "Объект");	
	ЗаполнитьДеревоФР();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВПланеРабот(Команда)
	ФронтРабот_ОбработатьИзменения( "Установить" );
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВПланеРабот(Команда)
	ФронтРабот_ОбработатьИзменения( "Очистить" );
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВПланРабот(Команда)
	ФронтРабот_ОбработатьИзменения( "Добавить" );
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВычестьИзПланаРабот(Команда)
	ФронтРабот_ОбработатьИзменения( "Вычесть" );
	ЭтаФорма.Модифицированность = Истина;
	
	
КонецПроцедуры

// конец изменение плана работ
//*******************************************************************


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	УП_ПланыРаботПоПроектам.УдалитьПустыеСтроки( ТекущийОбъект.ФронтРабот, "Количество" );
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если 		ТекущаяСтраница.Имя =  "ГруппаФронтРабот" Тогда
		ЗаполнитьДеревоФР();				
		
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция РабочиеДниПоМесяцам( ДатаНачала, ДатаОкончания);
	Возврат УП_ПланыРаботПоПроектам.РабочиеДниПоМесяцам( ДатаНачала, ДатаОкончания);
КонецФункции


 &НаКлиенте
Процедура УстановитьПоКалендарю( НазвПоказателя )
	Ставка = СтавкаПоДолжности( Должность  );
	
	Если ЗначениеЗаполнено( Ставка ) 
	И 	 Количество <> 0 Тогда
		// рабочих дней и т.д. по месяцам
		сМ = РабочиеДниПоМесяцам( Период.ДатаНачала, Период.ДатаОкончания);
		//
		ФронтРабот_ОбработатьИзменения( "Установить",  сМ, НазвПоказателя );
		
	Иначе
		ПоказатьПредупреждение(,"Должны быть указаны должность и количество часов!", 10);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКалендарюВдень(Команда)
	УстановитьПоКалендарю( "РДней" );
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКалендарюВнеделю(Команда)
	УстановитьПоКалендарю( "РНедель" );
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

//******************************************************************************************************
// УП 2014
//

&НаСервереБезКонтекста
Функция ВеличинаСтавкиФОТ( ТарифнаяСтавка, Месяц, Показатель )
	Возврат ПоказательТарифнойСтавки( ТарифнаяСтавка, Месяц, Показатель);
КонецФункции

&НаСервереБезКонтекста
Функция ВеличинаСтавкиФОТДляПодразделения( Подразделение, ТарифнаяСтавка, Месяц )
	Возврат СтавкаФОТПодразделения( Подразделение, ТарифнаяСтавка, Месяц );
КонецФункции


&НаСервереБезКонтекста
Функция СтавкаПоДолжности( Должность  ) 
	Возврат УП_КадрыСервер.СтавкаПоДолжности( Должность );
КонецФункции

&НаСервереБезКонтекста
Функция ГодСметыЗадачиПроекта( ЗадачаПроекта )
	Возврат ЗадачаПроекта.Владелец.ГодПроекта;
КонецФункции

&НаКлиенте
Процедура ПересчетСтрокиФОТ_Клиент( ТекДанные, ЗаполнятьДеревоРабот = Истина )
	// 2015 10 02
	Если Объект.БезКоэффициентовФОТ Тогда
		ТекДанные.СтавкаФОТ		= ВеличинаСтавкиФОТ( ТекДанные.ТарифнаяСтавка, ТекДанные.Месяц, "СтавкаФОТ" );
		
	ИначеЕсли 	ГодСметыЗадачиПроекта( Объект.ЗадачаПроекта ) >= 2017 Тогда
	// 2017 01 10
		ТекДанные.СтавкаФОТ		= ВеличинаСтавкиФОТ( ТекДанные.ТарифнаяСтавка, ТекДанные.Месяц, "СтавкаФОТ" );
	
	Иначе
		// 2014 10 25 
		ТекДанные.СтавкаФОТ		= ВеличинаСтавкиФОТДляПодразделения( Объект.Подразделение, ТекДанные.ТарифнаяСтавка, ТекДанные.Месяц );
	КонецЕсли;
	ТекДанные.Сумма 			= ТекДанные.Количество * ТекДанные.СтавкаФОТ;
	
	Если ЗаполнятьДеревоРабот Тогда
		ЗаполнитьДеревоФР();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФронтРаботДолжностьПриИзменении(Элемент)
	ТекДанные  = Элементы.ФронтРабот.ТекущиеДанные;
	ТекДанные.ТарифнаяСтавка = СтавкаПоДолжности( ТекДанные.Должность  );
	
	//
	ПересчетСтрокиФОТ_Клиент( ТекДанные );
	
КонецПроцедуры

&НаКлиенте
Процедура ФронтРаботДолжностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыД = Новый Структура;
	ПараметрыД.Вставить("Подразделение", 		Объект.Подразделение );
	
	ФормаВыбора 	= ПолучитьФорму( "Справочник.Должности.Форма.ФормаВыбораДляПланаРабот", ПараметрыД, Элемент );
	ФормаВыбора.Открыть();
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура ФронтРаботКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.ФронтРабот.ТекущиеДанные;	
	ПересчетСтрокиФОТ_Клиент( ТекДанные );
КонецПроцедуры


&НаКлиенте
Процедура ДолжностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыД = Новый Структура;
	ПараметрыД.Вставить("Подразделение", 	Объект.Подразделение );
	
	ФормаВыбора 	= ПолучитьФорму( "Справочник.Должности.Форма.ФормаВыбораДляПланаРабот", ПараметрыД, Элемент );
	ФормаВыбора.Открыть();
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьИзКалькулятораНаСервере( КалькуляторПР )
	// ничего не проверяем проверяем 
	Док = РеквизитФормыВЗначение("Объект");
	ЗаполнитьЗначенияСвойств( Док, КалькуляторПР );
	ФР = КалькуляторПР.ФронтРабот.Выгрузить();
	Док.ФронтРабот.Загрузить( ФР );
	
	ЗначениеВРеквизитФормы( Док, "Объект");
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, КалькуляторПР ) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьИзКалькулятораНаСервере( КалькуляторПР );
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ПодтвердитьЗаполнение(КалькуляторПР, ДопПараметры ) Экспорт
	Если КалькуляторПР = Неопределено Тогда Возврат; КонецЕсли;
	
	ОпОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, КалькуляторПР  );
	ПоказатьВопрос(ОпОповещения, "Заполнить текущий план работ из выбранного калькулятора?",
						РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзКалькулятора(Команда)
	Перем КалькуляторПР;
	Если Объект.Проведен Тогда
		ПоказатьПредупреждение(,"Заполнить из калькулятора можно только непроведенный план работ!");
		Возврат;
	КонецЕсли;
	
	ОпОповещения = Новый ОписаниеОповещения("ПодтвердитьЗаполнение", ЭтаФорма );
	ПоказатьВводЗначения( ОпОповещения, КалькуляторПР,, Тип("СправочникСсылка.КалькуляторПланаРабот"));
КонецПроцедуры



&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	Для Каждого ТекДанные ИЗ Объект.ФронтРабот Цикл
		ПересчетСтрокиФОТ_Клиент( ТекДанные );
	КонецЦикла;
	ПоказатьПредупреждение(,"Произведен пересчет фронта работ по показателям нового подразделения",10);
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура ПересчитатьСтавки(Команда)
	
	Для Каждого СтрФР ИЗ Объект.ФронтРабот Цикл
		
		// 2017 04 07
		// пересчитываем тарифную ставку по должности
		СтрФР.ТарифнаяСтавка = СтавкаПоДолжности( СтрФР.Должность  );
		
		
		// без заполнения дерева работ 
		ПересчетСтрокиФОТ_Клиент( СтрФР, Ложь );
	
	КонецЦикла;
	ЗаполнитьДеревоФР();	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры




#Область ОбслуживаниеПосещений



//&НаСервереБезКонтекста
//Процедура ЗаполнитьПосещенияПоИсполнителямЗадачиНаСервере( ПредметПосещения )
//	ЗадачаПроекта 	= ПредметПосещения.ЗадачаПроекта;
//	Контрагент 		= ЗадачаПроекта.Владелец.Контрагент;
//	Если НЕ ЗначениеЗаполнено( Контрагент ) Тогда
//		Возврат;
//	КонецЕсли;
//	//
//	сКонтрагент = Новый Структура;
//	сКонтрагент.Вставить("Контрагент", 			Контрагент );
//	сКонтрагент.Вставить("ПредметПосещения", 	ПредметПосещения );
//	сКонтрагент.Вставить("Часов", 				8 );
//	
//	мФизЛиц = ЗадачаПроекта.Исполнители.ВыгрузитьКолонку( "ФизическоеЛицо");
//	Для Каждого ФизическоеЛицо ИЗ мФизЛиц Цикл
//		сКонтрагент.Вставить( "ФизическоеЛицо", ФизическоеЛицо );
//		УП_РаботаСРабочимКалендаремСервер.ОбновитьКонтрагентаПосещений( сКонтрагент );
//	КонецЦикла;
//	
//КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПосещенияПоИсполнителямЗадачи(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(,"План работ не записан!", 10);
	Иначе
		УП_РаботаСРабочимКалендаремСервер.ЗаполнитьКонтрагентовПосещенияПоИсполнителямЗадачи( Объект.Ссылка );
		//ЗаполнитьПосещенияПоИсполнителямЗадачиНаСервере( Объект.Ссылка );
	КонецЕсли;
	Элементы.КонтрагентыПосещений.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьПосещенияКонтрагентовНаСервере( ПредметПосещения )
	// 
	УП_РаботаСРабочимКалендаремСервер.ОчиститьКонтрагентовПосещенийПоПредмету( ПредметПосещения );
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПосещения(Команда)
	ОчиститьПосещенияКонтрагентовНаСервере( Объект.Ссылка );
	Элементы.КонтрагентыПосещений.Обновить();
	
КонецПроцедуры



#КонецОбласти



