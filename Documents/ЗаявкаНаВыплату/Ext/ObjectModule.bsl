
// пропорционально сметам задач
// 
// таблица с колонками 
//	задача проекта
//	оплачено
//	выплачено
Функция СтруктураОплатыВознаграждения()
	
	//	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыСметы.Документ
		|ПОМЕСТИТЬ ВТ_СметыЗадач
		|ИЗ
		|	Документ.Смета.Документы КАК ДокументыСметы
		|ГДЕ
		|	ДокументыСметы.ВключитьВСмету
		|	И ДокументыСметы.Ссылка.Проект = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(СметаЗадачиПроектаРасчет.Сумма) КАК СуммаПоСмете,
		|	ВТ_СметыЗадач.Документ.ЗадачаПроекта КАК ЗадачаПроекта,
		|	0 КАК Оплатить
		|ИЗ
		|	ВТ_СметыЗадач КАК ВТ_СметыЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СметаЗадачиПроекта.Расчет КАК СметаЗадачиПроектаРасчет
		|		ПО ВТ_СметыЗадач.Документ = СметаЗадачиПроектаРасчет.Ссылка
		|ГДЕ
		|	СметаЗадачиПроектаРасчет.Статья = &стВознаграждение
		|	И СметаЗадачиПроектаРасчет.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_СметыЗадач.Документ,
		|	ВТ_СметыЗадач.Документ.ЗадачаПроекта";

	//
	Запрос.УстановитьПараметр("Проект", 				Проект );
	Запрос.УстановитьПараметр("стВознаграждение", 		Справочники.СтатьиСметы.ВознагрПосредника);
		
	Результат = Запрос.Выполнить().Выгрузить();
	
	// база распределния
	МассивКоэфф = Результат.ВыгрузитьКолонку("СуммаПоСмете");
	
	//
	мРезПоЗадачам = РаспределитьПропорционально( СуммаДокумента, МассивКоэфф);
	Для Каждого СтрРез ИЗ Результат Цикл
		СтрРез.Оплатить = мРезПоЗадачам[Результат.Индекс(СтрРез)];
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Проекты") Тогда
		// Заполнение шапки
		КлиентМенеджер = ДанныеЗаполнения.МенеджерПроекта;
		Проект = ДанныеЗаполнения.Ссылка;
	КонецЕсли;
	
	ИсполнительДокумента = ПараметрыСеанса.ТекущийПользователь;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	// регистр БюджетПоМесяцам 
	Движения.БюджетПоМесяцам.Записывать = Истина;
	тз = СтруктураОплатыВознаграждения();
	Для Каждого ТекСтрокаРаспределение Из тз Цикл
		Если ТекСтрокаРаспределение.Оплатить = 0 Тогда Продолжить; КонецЕсли;
		
		сСметы =  Новый Соответствие;
		сСтатей = Новый Соответствие;
		пСтатей = Новый Соответствие;            
		oСтатей = Новый Соответствие;
		УП_СметаПроекта.ПодготовкаФактБюджета(сСметы, сСтатей, пСтатей, oСтатей, ТекСтрокаРаспределение.ЗадачаПроекта);	
		
		ВыплатаВознПосреднику = Справочники.СтатьиСметы.ВыплатаВознПосреднику.ИмяПредопределенныхДанных;
		сСтатей[ВыплатаВознПосреднику] = ТекСтрокаРаспределение.Оплатить; 
		
		УП_СметаПроекта.ПроведениеФактБюджета(сСметы, сСтатей, oСтатей, Движения, ТекСтрокаРаспределение.ЗадачаПроекта,
			Дата, Дата);
	КонецЦикла;
	
	// регистр ВознаграждениеПосредника Расход
	Движения.ВознаграждениеПосредника.Записывать = Истина;
	Движение = Движения.ВознаграждениеПосредника.Добавить();
	Движение.ВидДвижения 	= ВидДвиженияНакопления.Расход;
	Движение.Период 		= Дата;
	Движение.Проект			= Проект;
	Движение.Посредник		= Посредник;
	Движение.Сумма 			= СуммаДокумента;
	Движения.Записать();
	
	//
	Остаток = РегистрыНакопления.ВознаграждениеПосредника.Остатки(, Новый Структура("Проект", Проект)).Итог("Сумма");
	
	Если Остаток < 0 Тогда 
		Сообщить("Не хватает вознаграждения по проекту " + Формат(Остаток, "ЧЦ=15; ЧДЦ=2"));
		//Отказ = Истина;
		//Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
	И НЕ РазрешеноПроводитьДокумент( Ссылка, Ссылка.Проект ) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;		

КонецПроцедуры
