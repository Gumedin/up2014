#Область СтандартныеОбработчикиФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьАктуальностьРассчета();
	УстановитьСтатусыПроектов();
	УстановитьПериодРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАктуальностьРассчета( НоваяАктуальность = Неопределено )
	
	Если НоваяАктуальность = Неопределено  Тогда
		Если НЕ ЗначениеЗаполнено( Объект.Ссылка ) Тогда
			РасчетНачисленияАктуален = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено( Объект.Начисления ) Тогда
			РасчетНачисленияАктуален = Ложь;
		Иначе
			РасчетНачисленияАктуален = Истина;
		КонецЕсли;
	Иначе
		РасчетНачисленияАктуален = НоваяАктуальность;
	КонецЕсли;

	Элементы.ПерейтиКНачислению.Доступность = РасчетНачисленияАктуален;
	
КонецПроцедуры

#КонецОбласти

#Область СервисныеОбработчикиФормы

&НаСервере
Процедура УстановитьСтатусыПроектов()
	СтатусыПроектов.Очистить();
	
	Если ЗначениеЗаполнено( Объект.СтатусыПроектовСтрокой ) Тогда
		мСт = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Объект.СтатусыПроектовСтрокой,",");
		Для Каждого ЭлСтр ИЗ мСт Цикл
			Статус = Перечисления.СтатусыПроектов.ПолучитьДанныеВыбора( Новый Структура("Отбор,СтрокаПоиска",, ЭлСтр));
			СтатусыПроектов.Добавить( Статус[0].Значение.Значение );
		КонецЦикла;
	Иначе
		СтатусыПроектов.Добавить( Перечисления.СтатусыПроектов.ВРаботе );
		СтатусыПроектов.Добавить( Перечисления.СтатусыПроектов.Закрыт );
	КонецЕсли;
	Объект.СтатусыПроектовСтрокой = ПрочитатьСтатусыПроектов( СтатусыПроектов );	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодРегистрации()
	ПериодРаспределения.ДатаНачала 		= НачалоМесяца( Объект.ПериодРегистрацииНачало );
	ПериодРаспределения.ДатаОкончания 	= КонецМесяца( Объект.ПериодРегистрацииОкончание);
КонецПроцедуры


//&НаКлиенте
//Процедура ОбновитьДоступностьПерейтиКНачислению()
//	Элементы.ПерейтиКНачислению.Доступность = РасчетНачисленияАктуален;
//КонецПроцедуры


&НаСервереБезКонтекста
Функция ПрочитатьСтатусыПроектов(СтатусыПроектов)
	СтатусыСтрокой = "";
	Для Каждого Эл ИЗ СтатусыПроектов Цикл
		СтатусыСтрокой = СтатусыСтрокой + ?(ЗначениеЗаполнено(СтатусыСтрокой), ",", "") +
						 СокрЛП(Эл.Значение);
	КонецЦикла;
	Возврат СтатусыСтрокой;
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеПериодаРаспределения( Начало, Окончание )
	ПериодСтр = ПредставлениеПериода( НачалоМесяца(Начало), КонецМесяца(Окончание),"ФП = Истина ");
	Возврат ПериодСтр;
КонецФункции



&НаКлиенте
Процедура ПериодРаспределенияПриИзменении(Элемент)
	Объект.ПериодРегистрацииНачало 		= НачалоМесяца( ПериодРаспределения.ДатаНачала );
	Объект.ПериодРегистрацииОкончание 	= НачалоМесяца( ПериодРаспределения.ДатаОкончания );
	
	Объект.ПериодРегистрацииСтрокой		= ПредставлениеПериодаРаспределения( Объект.ПериодРегистрацииНачало, Объект.ПериодРегистрацииОкончание );
	
	ОбновитьАктуальностьРассчета( Ложь );
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусыПроектовПриИзменении(Элемент)
	Объект.СтатусыПроектовСтрокой = ПрочитатьСтатусыПроектов( СтатусыПроектов );
	ОбновитьАктуальностьРассчета( Ложь );	
КонецПроцедуры

#КонецОбласти

#Область НачислениеФондов

&НаСервере
Функция ДобавитьПолеФормы(Имя,
						 Заголовок = Неопределено,
						 ОбработчикПриИзменении = "",
						 ОбработчикНачалоВыбора = "",
						 ШиринаПоля,
						 ЦветФона = Неопределено,
						 ЦветФонаЗаголовка = Неопределено,
						 Родитель = Неопределено,
						 КартинкаШапки = Неопределено,
						 ПутьКДанным = Неопределено,
						 ТолькоПросмотрПоля = Ложь,
						 СвязиПараметровВыбора = Неопределено)
						 
	ИмяТаблицы = "ТаблицаНачислений";
	
	
	НовоеПоле                     = Элементы.Добавить(ИмяТаблицы + Имя, Тип("ПолеФормы"), ?(Родитель = Неопределено, Элементы[ИмяТаблицы], Родитель));
	НовоеПоле.ПутьКДанным         = ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИмяТаблицы + "." + Имя);
	НовоеПоле.Заголовок           = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НовоеПоле.Вид                 = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр      = ТолькоПросмотрПоля;
	НовоеПоле.Ширина              = ШиринаПоля;
	
	Если СвязиПараметровВыбора <> Неопределено Тогда
		НовоеПоле.СвязиПараметровВыбора = СвязиПараметровВыбора;
	КонецЕсли;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		НовоеПоле.ЦветФонаЗаголовка = ЦветФонаЗаголовка;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено Тогда
		НовоеПоле.ЦветФона = ЦветФона;
	КонецЕсли;
		
	Если КартинкаШапки <> Неопределено Тогда
		НовоеПоле.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбработчикНачалоВыбора) Тогда
		НовоеПоле.УстановитьДействие("НачалоВыбора", ОбработчикНачалоВыбора);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяПрефиксаКолонки( Н )
	Если 		Н = 1 Тогда
		Возврат "СуммаБаза"
	ИначеЕсли 	Н = 2 Тогда
		Возврат "СуммаНачислено";
	КонецЕсли;
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяКолонкиЗаМесяц( Месяц = Неопределено )
	Если Месяц = Неопределено Тогда
		Возврат "МесяцЗаПериод";
	Иначе
		Возврат "Месяц" + Формат( Месяц, "ДФ=ггггММ");
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция МесяцКолонки( ИмяКолонки  = Неопределено )
	Если 	Найти(ИмяКолонки, ИмяКолонкиЗаМесяц()) <> 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Н = Найти(ИмяКолонки, "Месяц");
	Если Н = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Год 	= Число(Сред( ИмяКолонки, Н + 5, 4 ));
	Месяц 	= Число(Сред( ИмяКолонки, Н + 9, 2 ));
	//Сообщить("Год " + Год + ", Месяц = " + Месяц );
	Возврат НачалоМесяца( Дата( Год, Месяц, 1 ));
	
					
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьПустуюТаблицуНачислений()
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("Проект",   		Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	ТЗ.Колонки.Добавить("ЗадачаПроекта",   	Новый ОписаниеТипов("СправочникСсылка.ЗадачиПроектов"));
	ТЗ.Колонки.Добавить("Параметр",   		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 5, 1, ДопустимыйЗнак.Любой)));
	Возврат ТЗ;
КонецФункции

&НаСервере
Функция ДобавитьГруппуФормы(Имя, Заголовок = Неопределено, ОтображатьВШапке = Ложь, 
							КартинкаШапки = Неопределено, ГруппировкаКолонок, Родитель = Неопределено)
	
	НоваяГруппа                  	= Элементы.Добавить( "ТаблицаНачислений" + Имя, Тип("ГруппаФормы"), 
										?(Родитель = Неопределено, Элементы.ТаблицаНачислений, Родитель));
	НоваяГруппа.Заголовок        	= ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НоваяГруппа.Вид              	= ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.Группировка      	= ГруппировкаКолонок;
	НоваяГруппа.ОтображатьВШапке 	= ОтображатьВШапке;
	
	Если ОтображатьВШапке И КартинкаШапки <> Неопределено Тогда
		НоваяГруппа.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаСервере
Процедура ДобавитьГруппуИПоле( НазваниеГруппы, ИмяКолонки) //, Месяц = Неопределено );
	ЦветЗаголовка 	= Неопределено;
	ЦветФонаСуммы 	= Неопределено;
	ЦветФонаБазы 	= ЦветаСтиля.НедоступныеДанныеЦвет;
	КартинкаШапки 	= Неопределено;
	
	НоваяГруппа 	= ДобавитьГруппуФормы("ГруппаНачисления" + ИмяКолонки, НазваниеГруппы, 
						Истина, КартинкаШапки, ГруппировкаКолонок.Горизонтальная);
	
	// формируем колонки в группе
	ШиринаКолонкиСуммы = 10;
	ИмяБазы 	= Объект.СтатьяБазыРаспределения.ИмяПредопределенныхДанных;
	// 1. фактическое значение базы
	НовоеПоле 	= ДобавитьПолеФормы(ИмяПрефиксаКолонки( 1 )	+ ИмяКолонки, "База", , , 		ШиринаКолонкиСуммы, 
									ЦветФонаБазы, 	ЦветФонаСуммы,НоваяГруппа ,,,Истина);
	// 2. начислить
	НовоеПоле 	= ДобавитьПолеФормы(ИмяПрефиксаКолонки( 2 )	+ ИмяКолонки, "Начислить", , , 	ШиринаКолонкиСуммы, 
									ЦветФонаСуммы, 	ЦветФонаСуммы,НоваяГруппа ,,,Истина);
КонецПроцедуры	

// добавляем для одного месяца
&НаСервере
Процедура ДобавитьКолонкиВТаблицу( ТаблицаЗначений,	ИмяКолонки, НазваниеКолонки )
	ИмяБазы 	= Объект.СтатьяБазыРаспределения.ИмяПредопределенныхДанных;
	// исполнение базы в процентах
	//ТаблицаЗначений.Колонки.Добавить(ИмяБазы 		+ ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 5, 1, ДопустимыйЗнак.Любой)), 	НазваниеКолонки);
	Для Н = 1 ПО 2 Цикл
		ТаблицаЗначений.Колонки.Добавить(ИмяПрефиксаКолонки(Н) 	+ ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)), 	НазваниеКолонки);
	КонецЦикла;
КонецПроцедуры		

&НаСервере
Процедура ПостроитьТаблицуНачислений( МесяцыРегистрации )
	
	ДобавляемыеКолонкиТаблицы 	= Новый Массив();
	УдаляемыеКолонкиТаблицы   	= Новый Массив();
	УдаляемыеЭлементы        	= Новый Массив();
	УсловныеОформления          = Новый Массив();
	ИмяКолонкиЗаПериод			= ИмяКолонкиЗаМесяц();
	НазваниеКолоникЗаПериод		= "За " + ПредставлениеПериодаРаспределения( Объект.ПериодРегистрацииНачало, Объект.ПериодРегистрацииОкончание );
	
	ТаблицаЗначений 	= СоздатьПустуюТаблицуНачислений();
	
	// для всех месяцев
	Для Каждого Месяц ИЗ МесяцыРегистрации Цикл
		// база и сумма за месяц
		ИмяКолонки 		= ИмяКолонкиЗаМесяц( Месяц );
		НазваниеКолонки	= Формат( Месяц, "ДФ=MMММ.гггг");
		ДобавитьКолонкиВТаблицу( ТаблицаЗначений,	ИмяКолонки, НазваниеКолонки );
	КонецЦикла;
	// итоги по таблице
	
	ДобавитьКолонкиВТаблицу( ТаблицаЗначений, ИмяКолонкиЗаПериод, "За период" );
	
	
	//************
	// массив объектов типа РеквизитФормы
	ИмяТаблицы			= "ТаблицаНачислений";
	РеквизитыТаблицы	= ПолучитьРеквизиты(ИмяТаблицы);
	
	// пишем удаляемые колонки
	// для перерерисовки, если изменили период расчета
	Для Каждого Реквизит Из РеквизитыТаблицы Цикл
		Если Найти(Реквизит.Имя, "Месяц") Тогда
		
			УдаляемыеКолонкиТаблицы.Добавить(ИмяТаблицы + "." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// пишем добавляемые колонки
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если Найти(Колонка.Имя, "Месяц")  Тогда
			УдаляемаяКолонка = УдаляемыеКолонкиТаблицы.Найти(ИмяТаблицы + "." + Колонка.Имя);
			Если УдаляемаяКолонка <> Неопределено Тогда
				УдаляемыеКолонкиТаблицы.Удалить(УдаляемаяКолонка);
			Иначе
				ДобавляемыеКолонкиТаблицы.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяТаблицы, Колонка.Заголовок, Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если УдаляемыеКолонкиТаблицы.Количество() > 0 Или ДобавляемыеКолонкиТаблицы.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеКолонкиТаблицы, УдаляемыеКолонкиТаблицы);
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из Элементы.ТаблицаНачислений.ПодчиненныеЭлементы Цикл
		Если Найти(ТекЭлемент.Имя, "Месяц")  Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого Месяц ИЗ МесяцыРегистрации Цикл
		НазваниеГруппы 	= Формат( Месяц, "ДФ='ММММ гггг'");
		ИмяКолонки 		= ИмяКолонкиЗаМесяц( Месяц );
		ДобавитьГруппуИПоле( НазваниеГруппы, ИмяКолонки );
	КонецЦикла;
	// итоги
	ДобавитьГруппуИПоле(НазваниеКолоникЗаПериод, ИмяКолонкиЗаПериод);
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляНачисления( мЗадачиПроектов, МесяцыРегистрации, ФормулаРасчета, мСтатьиФормулы )
	
	Ключ			= Объект.СтатьяБазыРаспределения.ИмяПредопределенныхДанных;
	СтруктураСметы 	= УП_СметаПроекта.ПолучитьСтруктуруСметыЗадачи( Объект.ГодПроектов );	
	ФормулаРасчета	= СтруктураСметы[Объект.СтатьяБазыРаспределения.ИмяПредопределенныхДанных].ФормулаРасчета;
	
	УП_СметаПроекта.СтатьиФормулыРасчета( СтруктураСметы, ФормулаРасчета, мСтатьиФормулы  );
	
	мСтатусы		= СтатусыПроектов.ВыгрузитьЗначения();
	тзРезультат		= УП_СметаПроекта.ОборотыПоМассивуСтатейЗаПериод( мЗадачиПроектов, МесяцыРегистрации, мСтатьиФормулы );
	
	Возврат тзРезультат;
КонецФункции

// за весь период планирования
&НаСервере
Функция ПолучитьСуммыПланаЗаВесьПериод( ЗадачиПроектов, ФормулаРасчета, СтатьиФормулы )
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БюджетПоМесяцамОбороты.ЗадачаПроекта,
		|	БюджетПоМесяцамОбороты.ЗадачаПроекта.Владелец КАК Проект,
		|	СУММА(0) КАК Параметр,
		|	БюджетПоМесяцамОбороты.СтатьяСметы.ИмяПредопределенныхДанных КАК ИмяСтатьи,
		|	СУММА(ВЫБОР
		|			КОГДА БюджетПоМесяцамОбороты.СтатьяСметы = &СтатьяФонда
		|				ТОГДА БюджетПоМесяцамОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаФонда,
		|	СУММА(ВЫБОР
		|			КОГДА БюджетПоМесяцамОбороты.СтатьяСметы В (&СтатьиФормулы)
		|				ТОГДА БюджетПоМесяцамОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБазы
		|ИЗ
		|	РегистрНакопления.БюджетПоМесяцам.Обороты(, , , ) КАК БюджетПоМесяцамОбороты
		|ГДЕ
		|	(БюджетПоМесяцамОбороты.СтатьяСметы = &СтатьяФонда
		|			ИЛИ БюджетПоМесяцамОбороты.СтатьяСметы В (&СтатьиФормулы))
		|	И БюджетПоМесяцамОбороты.ТипСуммы = &ТипСуммыПлан
		|	И БюджетПоМесяцамОбороты.ЗадачаПроекта В(&ЗадачиПроектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	БюджетПоМесяцамОбороты.ЗадачаПроекта,
		|	БюджетПоМесяцамОбороты.ЗадачаПроекта.Владелец,
		|	БюджетПоМесяцамОбороты.СтатьяСметы.ИмяПредопределенныхДанных";
	
	Запрос.УстановитьПараметр("ГодПроекта", 		Объект.ГодПроектов);
	Запрос.УстановитьПараметр("Статусы", 			СтатусыПроектов.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("СтатьяФонда", 		Объект.СтатьяФонда);
	Запрос.УстановитьПараметр("СтатьиФормулы", 		СтатьиФормулы);
	Запрос.УстановитьПараметр("ТипСуммыПлан", 		Перечисления.ТипСуммыБюджета.План);
	Запрос.УстановитьПараметр("ЗадачиПроектов", 	ЗадачиПроектов);
	
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	// выгружаем по задаче проекта
	ЗадачиПроекта = РезультатЗапроса.Скопировать();
	ЗадачиПроекта.Свернуть( "Проект,ЗадачаПроекта", "Параметр,СуммаФонда,СуммаБазы");
	ЗадачиПроекта.Сортировать( "Проект,ЗадачаПроекта");
	
	Для Каждого СтрЗП ИЗ ЗадачиПроекта Цикл
		Если СтрЗП.СуммаФонда = 0 Тогда Продолжить; КонецЕсли;
		
		Отбор = Новый Структура("ЗадачаПроекта", СтрЗП.ЗадачаПроекта );
		ДанныеПоЗадаче 	= РезультатЗапроса.Скопировать( Отбор );
		СтрЗП.СуммаБазы = РасчитатьСуммуБазы( ФормулаРасчета, СтатьиФормулы, ДанныеПоЗадаче, "СуммаБазы" );
		СтрЗП.Параметр 	= ?( СтрЗП.СуммаБазы=0,0, СтрЗП.СуммаФонда/СтрЗП.СуммаБазы);
	КонецЦикла;
	
	
	Возврат ЗадачиПроекта;
	
КонецФункции


// полная версия в форме ФормаДокументПолная
// здесь читаем либо факт либо план, возвращаем сумму
&НаСервере
Функция РасчитатьСуммуБазы( ФормулаРасчета, мСтатьиФормулы, ДанныеПоСтатьям, ИмяТипаСуммы )
	ФорматнаяСтрока	= "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=";
	
	// расчет итоговой статьи по данных формулы расчета
	СтрокаФормулы 	= ФормулаРасчета;
	Для Каждого СтрСтатьи ИЗ ДанныеПоСтатьям Цикл
		ИмяСтатьи 		= СтрСтатьи.ИмяСтатьи;
		СтрокаФормулы	= СтрЗаменить( СтрокаФормулы, ИмяСтатьи, Формат( СтрСтатьи[ИмяТипаСуммы], ФорматнаяСтрока) );
	КонецЦикла;
	
	// чистим в тексте формулы имена статей, по которым нет данных
	Для Каждого Статья ИЗ мСтатьиФормулы Цикл
		ИмяСтатьи 		= Статья.ИмяПредопределенныхДанных;
		СтрокаФормулы 	= СтрЗаменить( СтрокаФормулы, ИмяСтатьи, "0");
	КонецЦикла;
	
	// пытаемся вычислить
	Попытка
		СуммаПоБазе = Вычислить( СтрокаФормулы );
	Исключение
		Сообщить("Ошибка расчета для " );
		СуммаПоБазе = 0;
	КонецПопытки;
	Возврат СуммаПоБазе
КонецФункции
// 

&НаСервере
Функция ЗадачиПроектовПоУсловиям( )
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПроектов.Ссылка
		|ИЗ
		|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
		|ГДЕ
		|	НЕ ЗадачиПроектов.Владелец.ПометкаУдаления
		|	И ЗадачиПроектов.Владелец.ГодПроекта = &ГодПроекта
		|	И ЗадачиПроектов.Владелец.Статус В(&Статусы)";
	
	Запрос.УстановитьПараметр("ГодПроекта", Объект.ГодПроектов);
	Запрос.УстановитьПараметр("Статусы", 	СтатусыПроектов.ВыгрузитьЗначения());
	мЗадачиПроекта = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Возврат мЗадачиПроекта;
КонецФункции

&НаСервере
Функция ПолучитьРезультатыНачисления()
	ИмяБазыЗаПериод 		= ИмяПрефиксаКолонки( 1 ) + ИмяКолонкиЗаМесяц();
	ИмяНачисленоЗаПериод 	= ИмяПрефиксаКолонки( 2 ) + ИмяКолонкиЗаМесяц();
	
	мНачислено = Новый Соответствие;
	Для Каждого СтрН ИЗ Объект.Начисления Цикл
		ЗадачаПроекта = СтрН.ЗадачаПроекта;
		сПоЗадаче = мНачислено.Получить( ЗадачаПроекта );
		Если сПоЗадаче = Неопределено Тогда
			сПоЗадаче = Новый Структура;
			сПоЗадаче.Вставить("Проект", ЗадачаПроекта.Владелец );
		КонецЕсли;
		сПоЗадаче.Вставить("Параметр", СтрН.ЗначениеПараметра );
		ИмяКолонки 			= ИмяКолонкиЗаМесяц( СтрН.ПериодРегистрации );
		сПоЗадаче.Вставить( ИмяПрефиксаКолонки( 1 )	+ ИмяКолонки, СтрН.БазаРаспределения );
		сПоЗадаче.Вставить( ИмяПрефиксаКолонки( 2 )	+ ИмяКолонки, СтрН.Сумма );
		
		// добавляем за весь период
		ЗнЗаПериод = ?( сПоЗадаче.Свойство( ИмяБазыЗаПериод ), сПоЗадаче[ИмяБазыЗаПериод], 0);
		сПоЗадаче.Вставить( ИмяБазыЗаПериод,  ЗнЗаПериод 		+ СтрН.БазаРаспределения);
		ЗнЗаПериод = ?( сПоЗадаче.Свойство( ИмяНачисленоЗаПериод ), сПоЗадаче[ИмяНачисленоЗаПериод], 0);
		сПоЗадаче.Вставить( ИмяНачисленоЗаПериод,  ЗнЗаПериод 	+ СтрН.Сумма);
			
		мНачислено.Вставить( ЗадачаПроекта, сПоЗадаче );
	КонецЦикла;
	Возврат мНачислено;
КонецФункции

&НаСервере
Процедура ЗаполнитьНачислениеПоМесяцам( МесяцыРегистрации, ПересчетНачисления)
	ТаблицаНачислений.Очистить();
	
	
	// для задач проекта (в т.ч все необходимые для расчета формулы)
	Если ПересчетНачисления Тогда
		//
		ЗадачиПроектов = ЗадачиПроектовПоУсловиям();
		
		ФормулаРасчета	= "";
		СтатьиФормулы 	= Новый Массив;
		// данные из регистра по первичным статьям, входящим в формулу расчета статьи базы  за указанные месяцы регистрации
		ДанныеДляНачисления 	= ПолучитьДанныеДляНачисления( ЗадачиПроектов, МесяцыРегистрации, ФормулаРасчета, СтатьиФормулы );
		// задачи проекта с запланированным не нулевым фондом
		ДанныеПоЗадачамСФондом 	= ПолучитьСуммыПланаЗаВесьПериод( ЗадачиПроектов, ФормулаРасчета, СтатьиФормулы );
	Иначе
	// читаем из табличной частм
		ДанныеПоЗадачамСФондом 	= ПолучитьРезультатыНачисления();
	КонецЕсли;

	//
	Для Каждого СтрЗадачаПроекта ИЗ ДанныеПоЗадачамСФондом Цикл
		Если ПересчетНачисления Тогда
		// новый расчет 
			Если СтрЗадачаПроекта.Параметр = 0 Тогда 
				Продолжить;
			КонецЕсли;
				
			ЗадачаПроекта		= СтрЗадачаПроекта.ЗадачаПроекта;
			// за каждый месяц периода по одной задаче
			сРасчетПоЗадаче 		= Новый Структура;
			СуммаНачисленоЗаПериод 	= 0;
			СуммаБазыЗаПериод		= 0;
			Для Каждого Месяц ИЗ МесяцыРегистрации Цикл
				ИмяКолонки 				= ИмяКолонкиЗаМесяц( Месяц );
				//
				Отбор = Новый Структура;
				Отбор.Вставить("Месяц", Месяц );
				Отбор.Вставить("ЗадачаПроекта", ЗадачаПроекта );
				ДанныеПоСтатьямЗаМесяц 	= ДанныеДляНачисления.НайтиСтроки( Отбор );
				
				СуммаБазы = РасчитатьСуммуБазы( ФормулаРасчета, СтатьиФормулы, ДанныеПоСтатьямЗаМесяц, "СуммаФакт" );
				сРасчетПоЗадаче.Вставить(ИмяПрефиксаКолонки( 1 )	+ ИмяКолонки, СуммаБазы );
				СуммаНачислено = Окр( СуммаБазы * СтрЗадачаПроекта.Параметр, 2);
				сРасчетПоЗадаче.Вставить(ИмяПрефиксаКолонки( 2 )	+ ИмяКолонки, СуммаНачислено);
				
				СуммаБазыЗаПериод		= СуммаБазыЗаПериод			+ СуммаБазы;
				СуммаНачисленоЗаПериод 	= СуммаНачисленоЗаПериод 	+ СуммаНачислено;
			КонецЦикла;
			Если СуммаНачисленоЗаПериод = 0 Тогда Продолжить; КонецЕсли;
			ИмяКолонки 				= ИмяКолонкиЗаМесяц(  );
			// итого по строке
			сРасчетПоЗадаче.Вставить( ИмяПрефиксаКолонки( 1 ) + ИмяКолонки, СуммаБазыЗаПериод); 
			сРасчетПоЗадаче.Вставить( ИмяПрефиксаКолонки( 2 ) + ИмяКолонки, СуммаНачисленоЗаПериод); 
			
			// тогда вставляем
			СтрТН  = ТаблицаНачислений.Добавить();
			ЗаполнитьЗначенияСвойств( СтрТН, СтрЗадачаПроекта );
			ЗаполнитьЗначенияСвойств( СтрТН, сРасчетПоЗадаче );
		Иначе
			СтрТН  = ТаблицаНачислений.Добавить();
			СтрТН.ЗадачаПроекта = СтрЗадачаПроекта.Ключ;
			ЗаполнитьЗначенияСвойств( СтрТН, СтрЗадачаПроекта.Значение );
		КонецЕсли;
		
	КонецЦикла;
	
	// итоговая строка 
	ТаблицаНачислений.Сортировать("Проект,ЗадачаПроекта");
	//СтрТН = ТаблицаНачислений.Добавить();
	Для Каждого Месяц ИЗ МесяцыРегистрации Цикл
		ИмяКолонки	= ИмяКолонкиЗаМесяц( Месяц );
		Для Н = 1 По 2 Цикл
			ИмяКолонкиПолное 		= ИмяПрефиксаКолонки(Н) + ИмяКолонки;
			//СтрТН[ИмяКолонкиПолное] = ТаблицаНачислений.Итог( ИмяКолонкиПолное );
			Элементы["ТаблицаНачислений"+ИмяКолонкиПолное].ТекстПодвала 					= ТаблицаНачислений.Итог( ИмяКолонкиПолное );
			Элементы["ТаблицаНачислений"+ИмяКолонкиПолное].ГоризонтальноеПоложениеВПодвале 	= ГоризонтальноеПоложениеЭлемента.Право;
		КонецЦикла;		
	КонецЦикла;
	// по колонкам итого
	ИмяКолонки	= ИмяКолонкиЗаМесяц( );
	Для Н = 1 По 2 Цикл
		ИмяКолонкиПолное 		= ИмяПрефиксаКолонки(Н) + ИмяКолонки;
		//СтрТН[ИмяКолонкиПолное] = ТаблицаНачислений.Итог( ИмяКолонкиПолное );
		Элементы["ТаблицаНачислений"+ИмяКолонкиПолное].ТекстПодвала 					= ТаблицаНачислений.Итог( ИмяКолонкиПолное );
		Элементы["ТаблицаНачислений"+ИмяКолонкиПолное].ГоризонтальноеПоложениеВПодвале 	= ГоризонтальноеПоложениеЭлемента.Право;
	КонецЦикла;		
	
КонецПроцедуры


&НаСервере
Процедура ПереформироватьТаблицуНачислений( МесяцыРегистрации, ПересчетНачисления )
	
	ПостроитьТаблицуНачислений( МесяцыРегистрации );
	ЗаполнитьНачислениеПоМесяцам( МесяцыРегистрации, ПересчетНачисления);
	
КонецПроцедуры

&НаКлиенте
Процедура Начислить(Команда)
	ОчиститьСообщения();
	// переходим
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаНачислениеФондов;
	ПриПереходеКПросмотруНачисленияФондов();
	
КонецПроцедуры

#КонецОбласти


&НаСервере
Процедура ЗагрузитьТаблицуНачисленийВДокумент()
	Документ 				= РеквизитФормыВЗначение("Объект");
	Документ.СуммаДокумента = 0;
	ТаблицаЗначений 		= РеквизитФормыВЗначение("ТаблицаНачислений");
	Документ.Начисления.Очистить();
	Для Каждого Стр ИЗ ТаблицаЗначений Цикл
		Если ЗначениеЗаполнено( Стр.ЗадачаПроекта ) Тогда
			Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
				Если Найти(Колонка.Имя, "СуммаНачисленоМесяц")  Тогда
					Месяц = МесяцКолонки( Колонка.Имя );
					Если ЗначениеЗаполнено( Месяц ) Тогда
						Сумма = Стр[Колонка.Имя];
						Если ЗначениеЗаполнено( Сумма ) Тогда
							//Сообщить("Задача проекта " + Стр.ЗадачаПроекта + ", " + Месяц + ", " + Сумма );
							Документ.СуммаДокумента 	= Документ.СуммаДокумента + Сумма;
							СтрДок = Документ.Начисления.Добавить();
							СтрДок.ЗадачаПроекта 		= Стр.ЗадачаПроекта;
							СтрДок.Сумма		 		= Сумма ;
							СтрДок.ПериодРегистрации 	= Месяц;
							// вариант 2
							СтрДок.ЗначениеПараметра	= Стр.Параметр;
							
							КолонкаБазы = СтрЗаменить( Колонка.Имя, "Начислено","База");
							СтрДок.БазаРаспределения	= Стр[КолонкаБазы];
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КОнецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы( Документ, "Объект");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивМесяцевРегистрации(ПересчетНачисления)
	МесяцыРегистрации = Новый Массив;
	Если ПересчетНачисления Тогда
		Если ЗначениеЗаполнено( Объект.ПериодРегистрацииНачало )
		И	 ЗначениеЗаполнено( Объект.ПериодРегистрацииОкончание ) Тогда
			МесяцНачала		= НачалоМесяца( Объект.ПериодРегистрацииНачало );
			МесяцОкончания 	= НачалоМесяца( Объект.ПериодРегистрацииОкончание );
		КонецЕсли;		
	Иначе
		МесяцНачала		= Дата( 2099, 1, 1);
		МесяцОкончания 	= Дата( 1,1,1);
		Для Каждого СтрНачисления ИЗ Объект.Начисления Цикл
			МесяцНачала		= МИН( МесяцНачала, СтрНачисления.ПериодРегистрации );
			МесяцОкончания 	= МАКС( МесяцОкончания, СтрНачисления.ПериодРегистрации );
		КонецЦикла;
	КонецЕсли;
	
	Месяц = МесяцНачала;
	Пока Месяц <= МесяцОкончания Цикл
		МесяцыРегистрации.Добавить( Месяц );
		Месяц = ДобавитьМесяц( Месяц, 1 );
	КонецЦикла;
	Возврат МесяцыРегистрации;
КонецФункции


&НаКлиенте
Процедура ПриПереходеКПросмотруНачисленияФондов( ПересчетНачисления = Истина )
	МесяцыРегистрации = ПолучитьМассивМесяцевРегистрации(ПересчетНачисления);
	
	Если МесяцыРегистрации.Количество() > 0 Тогда
		ПереформироватьТаблицуНачислений(МесяцыРегистрации, ПересчетНачисления);
			
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для перехода к просмотру начислений в фонды, их необходимо рассчитать'"));
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНастройкам(Команда)
	// переходим
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаНастройка;
	ОбновитьАктуальностьРассчета( Истина );
	

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНачислению(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаНачислениеФондов;
	ПриПереходеКПросмотруНачисленияФондов( Ложь );
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРасчет(Команда)
	ЗагрузитьТаблицуНачисленийВДокумент();
КонецПроцедуры

&НаКлиенте
Процедура СтатьяФондаПриИзменении(Элемент)
	ОбновитьАктуальностьРассчета( Ложь );
КонецПроцедуры
