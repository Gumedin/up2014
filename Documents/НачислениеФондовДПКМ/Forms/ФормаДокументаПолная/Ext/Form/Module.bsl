#Область СтандартныеОбработчикиФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьСтатусыПроектов();
	УстановитьПериодРегистрации();
КонецПроцедуры

#КонецОбласти

#Область СервисныеОбработчикиФормы

&НаСервере
Процедура УстановитьСтатусыПроектов()
	СтатусыПроектов.Очистить();
	
	Если ЗначениеЗаполнено( Объект.СтатусыПроектовСтрокой ) Тогда
		мСт = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Объект.СтатусыПроектовСтрокой,",");
		Для Каждого ЭлСтр ИЗ мСт Цикл
			Статус = Перечисления.СтатусыПроектов.ПолучитьДанныеВыбора( Новый Структура("Отбор,СтрокаПоиска",, ЭлСтр));
			СтатусыПроектов.Добавить( Статус[0].Значение.Значение );
		КонецЦикла;
	Иначе
		СтатусыПроектов.Добавить( Перечисления.СтатусыПроектов.ВРаботе );
		СтатусыПроектов.Добавить( Перечисления.СтатусыПроектов.Закрыт );
	КонецЕсли;
	Объект.СтатусыПроектовСтрокой = ПрочитатьСтатусыПроектов( СтатусыПроектов );	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодРегистрации()
	ПериодРаспределения.ДатаНачала 		= НачалоМесяца( Объект.ПериодРегистрацииНачало );
	ПериодРаспределения.ДатаОкончания 	= КонецМесяца( Объект.ПериодРегистрацииОкончание);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьСтатусыПроектов(СтатусыПроектов)
	СтатусыСтрокой = "";
	Для Каждого Эл ИЗ СтатусыПроектов Цикл
		СтатусыСтрокой = СтатусыСтрокой + ?(ЗначениеЗаполнено(СтатусыСтрокой), ",", "") +
						 СокрЛП(Эл.Значение);
	КонецЦикла;
	Возврат СтатусыСтрокой;
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеПериодаРаспределения( Начало, Окончание )
	ПериодСтр = ПредставлениеПериода( НачалоМесяца(Начало), КонецМесяца(Окончание),"ФП = Истина ");
	Возврат ПериодСтр;
КонецФункции

&НаКлиенте
Процедура ПериодРаспределенияПриИзменении(Элемент)
	Объект.ПериодРегистрацииНачало 		= НачалоМесяца( ПериодРаспределения.ДатаНачала );
	Объект.ПериодРегистрацииОкончание 	= НачалоМесяца( ПериодРаспределения.ДатаОкончания );
	
	Объект.ПериодРегистрацииСтрокой		= ПредставлениеПериодаРаспределения( Объект.ПериодРегистрацииНачало, Объект.ПериодРегистрацииОкончание );
				
КонецПроцедуры

&НаКлиенте
Процедура СтатусыПроектовПриИзменении(Элемент)
	Объект.СтатусыПроектовСтрокой = ПрочитатьСтатусыПроектов( СтатусыПроектов );
КонецПроцедуры

#КонецОбласти

#Область НачислениеФондов

&НаСервере
Функция ДобавитьПолеФормы(Имя,
						 Заголовок = Неопределено,
						 ОбработчикПриИзменении = "",
						 ОбработчикНачалоВыбора = "",
						 ШиринаПоля,
						 ЦветФона = Неопределено,
						 ЦветФонаЗаголовка = Неопределено,
						 Родитель = Неопределено,
						 КартинкаШапки = Неопределено,
						 ПутьКДанным = Неопределено,
						 ТолькоПросмотрПоля = Ложь,
						 СвязиПараметровВыбора = Неопределено)
						 
	ИмяТаблицы = "ТаблицаНачислений";
	
	
	НовоеПоле                     = Элементы.Добавить(ИмяТаблицы + Имя, Тип("ПолеФормы"), ?(Родитель = Неопределено, Элементы[ИмяТаблицы], Родитель));
	НовоеПоле.ПутьКДанным         = ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, ИмяТаблицы + "." + Имя);
	НовоеПоле.Заголовок           = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НовоеПоле.Вид                 = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр      = ТолькоПросмотрПоля;
	НовоеПоле.Ширина              = ШиринаПоля;
	
	Если СвязиПараметровВыбора <> Неопределено Тогда
		НовоеПоле.СвязиПараметровВыбора = СвязиПараметровВыбора;
	КонецЕсли;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		НовоеПоле.ЦветФонаЗаголовка = ЦветФонаЗаголовка;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено Тогда
		НовоеПоле.ЦветФона = ЦветФона;
	КонецЕсли;
		
	Если КартинкаШапки <> Неопределено Тогда
		НовоеПоле.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбработчикНачалоВыбора) Тогда
		НовоеПоле.УстановитьДействие("НачалоВыбора", ОбработчикНачалоВыбора);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяПрефиксаКолонки( Н )
	Если 		Н = 1 Тогда
		Возврат "СуммаПлан"
	ИначеЕсли 	Н = 2 Тогда
		Возврат "СуммаРанее";
	ИначеЕсли 	Н = 3 Тогда
		Возврат "СуммаНачислено";
	КонецЕсли;
	Возврат "";
	
КонецФункции


&НаСервереБезКонтекста
Функция ИмяКолонкиЗаМесяц( Месяц = Неопределено )
	Если Месяц = Неопределено Тогда
		Возврат "МесяцЗаПериод";
	Иначе
		Возврат "Месяц" + Формат( Месяц, "ДФ=ггггММ");
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция МесяцКолонки( ИмяКолонки  = Неопределено )
	Если 	Найти(ИмяКолонки, ИмяКолонкиЗаМесяц()) <> 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Н = Найти(ИмяКолонки, "Месяц");
	Если Н = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Год 	= Число(Сред( ИмяКолонки, Н + 5, 4 ));
	Месяц 	= Число(Сред( ИмяКолонки, Н + 9, 2 ));
	//Сообщить("Год " + Год + ", Месяц = " + Месяц );
	Возврат НачалоМесяца( Дата( Год, Месяц, 1 ));
	
					
КонецФункции



&НаСервереБезКонтекста
Функция СоздатьПустуюТаблицуНачислений()
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("Проект",   		Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	ТЗ.Колонки.Добавить("ЗадачаПроекта",   	Новый ОписаниеТипов("СправочникСсылка.ЗадачиПроектов"));
	Возврат ТЗ;
КонецФункции


&НаСервере
Функция ДобавитьГруппуФормы(Имя, Заголовок = Неопределено, ОтображатьВШапке = Ложь, 
							КартинкаШапки = Неопределено, ГруппировкаКолонок, Родитель = Неопределено)
	
	НоваяГруппа                  	= Элементы.Добавить( "ТаблицаНачислений" + Имя, Тип("ГруппаФормы"), 
										?(Родитель = Неопределено, Элементы.ТаблицаНачислений, Родитель));
	НоваяГруппа.Заголовок        	= ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НоваяГруппа.Вид              	= ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.Группировка      	= ГруппировкаКолонок;
	НоваяГруппа.ОтображатьВШапке 	= ОтображатьВШапке;
	
	Если ОтображатьВШапке И КартинкаШапки <> Неопределено Тогда
		НоваяГруппа.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаСервере
Процедура ДобавитьГруппуИПоле( НазваниеГруппы, ИмяКолонки) //, Месяц = Неопределено );
	ЦветЗаголовка 	= Неопределено;
	ЦветФонаСуммы 	= Неопределено;
	ЦветФонаБазы 	= ЦветаСтиля.НедоступныеДанныеЦвет;
	КартинкаШапки 	= Неопределено;
	
	НоваяГруппа 	= ДобавитьГруппуФормы("ГруппаНачисления" + ИмяКолонки, НазваниеГруппы, 
						Истина, КартинкаШапки, ГруппировкаКолонок.Горизонтальная);
	
	// формируем колонки в группе
	ШиринаКолонкиСуммы = 10;
	ИмяБазы 	= Объект.СтатьяБазыРаспределения.ИмяПредопределенныхДанных;
	//// 1. процент исполнения базы начисления
	НовоеПоле 	= ДобавитьПолеФормы(ИмяБазы 		+ ИмяКолонки, "%", , ,  	 	 						6,  ЦветФонаБазы, 	ЦветФонаБазы,НоваяГруппа ,,,Истина);
	//// 2. целевое значение статьи фонда с учетом исполнения базы начисления
	НовоеПоле 	= ДобавитьПолеФормы(ИмяПрефиксаКолонки( 1 )	+ ИмяКолонки, "План", , , 		ШиринаКолонкиСуммы, ЦветФонаСуммы, 	ЦветФонаСуммы,НоваяГруппа ,,,Истина);
	//// 3. исполнение статьи фонда в других документах (ранее)
	НовоеПоле 	= ДобавитьПолеФормы(ИмяПрефиксаКолонки( 2 )	+ ИмяКолонки, "Ранее", , , 		ШиринаКолонкиСуммы, ЦветФонаСуммы, 	ЦветФонаСуммы,НоваяГруппа ,,,Истина);
	// 4. исполнение в текущем документе
	НовоеПоле 	= ДобавитьПолеФормы(ИмяПрефиксаКолонки( 3 )	+ ИмяКолонки, "Начислить", , , 	ШиринаКолонкиСуммы, 
									 ЦветФонаСуммы, 	ЦветФонаСуммы,НоваяГруппа ,,,Истина);
КонецПроцедуры	

// добавляем для одного месяца
&НаСервере
Процедура ДобавитьКолонкиВТаблицу( ТаблицаЗначений,	ИмяКолонки, НазваниеКолонки )
	ИмяБазы 	= Объект.СтатьяБазыРаспределения.ИмяПредопределенныхДанных;
	// исполнение базы в процентах
	ТаблицаЗначений.Колонки.Добавить(ИмяБазы 		+ ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла( 5, 1, ДопустимыйЗнак.Любой)), 	НазваниеКолонки);
	Для Н = 1 ПО 3 Цикл
		ТаблицаЗначений.Колонки.Добавить(ИмяПрефиксаКолонки(Н) 	+ ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)), 	НазваниеКолонки);
	КонецЦикла;
	//ТаблицаЗначений.Колонки.Добавить("СуммаПлан" 	+ ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)), 	НазваниеКолонки);
	//ТаблицаЗначений.Колонки.Добавить("СуммаРанее" 	+ ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)), 	НазваниеКолонки);
	//ТаблицаЗначений.Колонки.Добавить("Сумма" 		+ ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)), 	НазваниеКолонки);
КонецПроцедуры		


&НаСервере
Процедура ПостроитьТаблицуНачислений( МесяцыРегистрации )
	
	ДобавляемыеКолонкиТаблицы 	= Новый Массив();
	УдаляемыеКолонкиТаблицы   	= Новый Массив();
	УдаляемыеЭлементы        	= Новый Массив();
	УсловныеОформления          = Новый Массив();
	ИмяКолонкиЗаПериод			= ИмяКолонкиЗаМесяц();
	НазваниеКолоникЗаПериод		= "За " + ПредставлениеПериодаРаспределения( Объект.ПериодРегистрацииНачало, Объект.ПериодРегистрацииОкончание );
	
	ТаблицаЗначений 	= СоздатьПустуюТаблицуНачислений();
	
	// для всех месяцев
	Для Каждого Месяц ИЗ МесяцыРегистрации Цикл
		// база и сумма за месяц
		ИмяКолонки 		= ИмяКолонкиЗаМесяц( Месяц );
		НазваниеКолонки	= Формат( Месяц, "ДФ=MMММ.гггг");
		ДобавитьКолонкиВТаблицу( ТаблицаЗначений,	ИмяКолонки, НазваниеКолонки );
	КонецЦикла;
	// итоги по таблице
	
	ДобавитьКолонкиВТаблицу( ТаблицаЗначений, ИмяКолонкиЗаПериод, "За период" );
	
	
	//************
	// массив объектов типа РеквизитФормы
	ИмяТаблицы			= "ТаблицаНачислений";
	РеквизитыТаблицы	= ПолучитьРеквизиты(ИмяТаблицы);
	
	// пишем удаляемые колонки
	// для перерерисовки, если изменили период расчета
	Для Каждого Реквизит Из РеквизитыТаблицы Цикл
		Если Найти(Реквизит.Имя, "Месяц") Тогда
		
			УдаляемыеКолонкиТаблицы.Добавить(ИмяТаблицы + "." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	// пишем добавляемые колонки
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если Найти(Колонка.Имя, "Месяц")  Тогда
			УдаляемаяКолонка = УдаляемыеКолонкиТаблицы.Найти(ИмяТаблицы + "." + Колонка.Имя);
			Если УдаляемаяКолонка <> Неопределено Тогда
				УдаляемыеКолонкиТаблицы.Удалить(УдаляемаяКолонка);
			Иначе
				ДобавляемыеКолонкиТаблицы.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяТаблицы, Колонка.Заголовок, Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если УдаляемыеКолонкиТаблицы.Количество() > 0 Или ДобавляемыеКолонкиТаблицы.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеКолонкиТаблицы, УдаляемыеКолонкиТаблицы);
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из Элементы.ТаблицаНачислений.ПодчиненныеЭлементы Цикл
		Если Найти(ТекЭлемент.Имя, "Месяц")  Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого Месяц ИЗ МесяцыРегистрации Цикл
		НазваниеГруппы 	= Формат( Месяц, "ДФ='ММММ гггг'");
		ИмяКолонки 		= ИмяКолонкиЗаМесяц( Месяц );
		ДобавитьГруппуИПоле( НазваниеГруппы, ИмяКолонки );
	КонецЦикла;
	// итоги
	ДобавитьГруппуИПоле(НазваниеКолоникЗаПериод, ИмяКолонкиЗаПериод);
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДляНачисления( мЗадачиПроектов, МесяцыРегистрации, ФормулаРасчета, мСтатьиФормулы )
	
	//Ключ			= СтатьяДоходОтРеализации.ИмяПредопределенныхДанных;
	Ключ			= Объект.СтатьяБазыРаспределения.ИмяПредопределенныхДанных;
	СтруктураСметы 	= УП_СметаПроекта.ПолучитьСтруктуруСметыЗадачи( Объект.ГодПроектов );	
	ФормулаРасчета	= СтруктураСметы[Объект.СтатьяБазыРаспределения.ИмяПредопределенныхДанных].ФормулаРасчета;
	
	УП_СметаПроекта.СтатьиФормулыРасчета( СтруктураСметы, ФормулаРасчета, мСтатьиФормулы  );
	
	мСтатусы		= СтатусыПроектов.ВыгрузитьЗначения();
	тзРезультат		= УП_СметаПроекта.ОборотыПоМассивуСтатейЗаПериод( мЗадачиПроектов, МесяцыРегистрации, мСтатьиФормулы );
	
	Возврат тзРезультат;
КонецФункции

&НаСервере
Функция ПолучитьСуммыПоФонду( МесяцыРегистрации )
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БюджетПоМесяцам.ЗадачаПроекта,
		|	БюджетПоМесяцам.ЗадачаПроекта.Владелец КАК Проект,
		|	БюджетПоМесяцам.Месяц,
		|	СУММА(ВЫБОР
		|			КОГДА БюджетПоМесяцам.ТипСуммы = &ТипСуммыПлан
		|				ТОГДА БюджетПоМесяцам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПлан,
		|	СУММА(ВЫБОР
		|			КОГДА БюджетПоМесяцам.ТипСуммы = &ТипСуммыФакт
		|				ТОГДА БюджетПоМесяцам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаФакт
		|ИЗ
		|	РегистрНакопления.БюджетПоМесяцам КАК БюджетПоМесяцам
		|ГДЕ
		|	БюджетПоМесяцам.ЗадачаПроекта.Владелец.ГодПроекта = &ГодПроекта
		|	И БюджетПоМесяцам.ЗадачаПроекта.Владелец.Статус В(&Статусы)
		|	И БюджетПоМесяцам.СтатьяСметы = &СтатьяФонда
		|	И БюджетПоМесяцам.Месяц В(&МесяцыРегистрации)
		|	И БюджетПоМесяцам.Регистратор <> &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	БюджетПоМесяцам.ЗадачаПроекта,
		|	БюджетПоМесяцам.Месяц,
		|	БюджетПоМесяцам.ЗадачаПроекта.Владелец
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА БюджетПоМесяцам.ТипСуммы = &ТипСуммыПлан
		|				ТОГДА БюджетПоМесяцам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) <> 0";
	
	Запрос.УстановитьПараметр("ГодПроекта", 		Объект.ГодПроектов);
	Запрос.УстановитьПараметр("Статусы", 			СтатусыПроектов.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("СтатьяФонда", 		Объект.СтатьяФонда);
	Запрос.УстановитьПараметр("МесяцыРегистрации", 	МесяцыРегистрации);
	Запрос.УстановитьПараметр("ТипСуммыПлан", 		Перечисления.ТипСуммыБюджета.План);
	Запрос.УстановитьПараметр("ТипСуммыФакт", 		Перечисления.ТипСуммыБюджета.Факт);
	Запрос.УстановитьПараметр("Регистратор", 		Объект.Ссылка );
	
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса
	
КонецФункции


&НаСервере
Функция РасчитатьДанныеСтроки( ИмяБазы, ИмяКолонки, ФормулаРасчета, мСтатьиФормулы, ДанныеПоФондуЗаМесяц, ДанныеПоСтатьямЗаМесяц )
	ФорматнаяСтрока	= "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=";
	// уже известные цифры
	сДС 			= Новый Структура;
	Если ДанныеПоФондуЗаМесяц.Количество() <> 0 Тогда
		СуммаПлан		= ДанныеПоФондуЗаМесяц[0].СуммаПлан;
		СуммаРанее		= ДанныеПоФондуЗаМесяц[0].СуммаФакт;
	Иначе
		СуммаПлан		= 0;
		СуммаРанее		= 0;
	КонецЕсли;
	// 
	сДС.Вставить( "СуммаПлан" 	+ ИмяКолонки, СуммаПлан);
	сДС.Вставить( "СуммаРанее" 	+ ИмяКолонки, СуммаРанее);
	
	// расчет итоговой статьи по данных формулы расчета
	СтрокаПлан 	= ФормулаРасчета;
	СтрокаФакт	= ФормулаРасчета;
	Для Каждого СтрСтатьи ИЗ ДанныеПоСтатьямЗаМесяц Цикл
		ИмяСтатьи 	= СтрСтатьи.ИмяСтатьи;
		СтрокаПлан	= СтрЗаменить( СтрокаПлан, ИмяСтатьи, Формат( СтрСтатьи.СуммаПлан, ФорматнаяСтрока) );
		СтрокаФакт	= СтрЗаменить( СтрокаФакт, ИмяСтатьи, Формат( СтрСтатьи.СуммаФакт, ФорматнаяСтрока) );
	КонецЦикла;
	
	// чистим в тексте формулы имена статей, по которым нет данных
	Для Каждого Статья ИЗ мСтатьиФормулы Цикл
		ИмяСтатьи 	= Статья.ИмяПредопределенныхДанных;
		СтрокаПлан 	= СтрЗаменить( СтрокаПлан, ИмяСтатьи, "0");
		СтрокаФакт 	= СтрЗаменить( СтрокаФакт, ИмяСтатьи, "0");
	КонецЦикла;
	
	// пытаемся вычислить
	Попытка
		СуммаБазаПлан = Вычислить( СтрокаПлан );
		СуммаБазаФакт = Вычислить( СтрокаФакт );
	Исключение
		Сообщить("Ошибка расчета для " + ИмяКолонки );
		Возврат сДС;
	КонецПопытки;
	// считаем показатели
	// процент исполнения
	Если СуммаБазаПлан = 0 Тогда
		ИсполнениеБазы = 1; // символически
	Иначе
		ИсполнениеБазы = СуммаБазаФакт/СуммаБазаПлан;
	КонецЕсли;
	
	сДС.Вставить( ИмяБазы + ИмяКолонки, ИсполнениеБазы*100);
	// пропорционально исполнению базы  за вычетом начисленного ранее
	СуммаНачислить	= Окр(ИсполнениеБазы * СуммаПлан - СуммаРанее,2);
	сДС.Вставить( "СуммаНачислено" + ИмяКолонки, СуммаНачислить );
	
	Возврат сДС;
КонецФункции


&НаСервере
Процедура ЗаполнитьНачислениеПоМесяцам( МесяцыРегистрации)
	ТаблицаНачислений.Очистить();
	
	// обороты по фонду БЕЗ нулевых планов, фильтр по году проекта и статусам проектов
	ДанныеПоФонду			= ПолучитьСуммыПоФонду( МесяцыРегистрации );
	// задачи проекта
	ЗадачиПроектов			= ДанныеПоФонду.Скопировать(, "ЗадачаПроекта" );
	ЗадачиПроектов.Свернуть("ЗадачаПроекта", "");
	мЗадачиПроектовСФондом	= ЗадачиПроектов.ВыгрузитьКолонку( "ЗадачаПроекта" );
	
	// для задач проекта (в т.ч все необходимые для расчета формулы)
	ФормулаРасчета	= "";
	мСтатьиФормулы 	= Новый Массив;
	// данные из регистра по первичным статьям, входящим в формулу расчета статьи базы
	ДанныеДляНачисления = ПолучитьДанныеДляНачисления( мЗадачиПроектовСФондом, МесяцыРегистрации, ФормулаРасчета, мСтатьиФормулы );
	
	// по тем задачам проектов, по которым план по фонду отличен от нуля
	ИмяБазы 		= Объект.СтатьяБазыРаспределения.ИмяПредопределенныхДанных;
	
	Для Каждого ЗадачаПроекта ИЗ мЗадачиПроектовСФондом Цикл
		СтрТН  = ТаблицаНачислений.Добавить();
		// задача проекта, проект
		СтрТН.ЗадачаПроекта = ЗадачаПроекта;
		СтрТН.Проект 		= СтрТН.ЗадачаПроекта.Владелец;
		
		// за каждый месяц периода по одной задаче
		Для Каждого Месяц ИЗ МесяцыРегистрации Цикл
			ИмяКолонки 				= ИмяКолонкиЗаМесяц( Месяц );
			//
			Отбор = Новый Структура;
			Отбор.Вставить("Месяц", Месяц );
			Отбор.Вставить("ЗадачаПроекта", ЗадачаПроекта );
			ДанныеПоФондуЗаМесяц	= ДанныеПоФонду.НайтиСтроки( Отбор ); // 1 строка
			ДанныеПоСтатьямЗаМесяц 	= ДанныеДляНачисления.НайтиСтроки( Отбор );
			
			сДанныеСтроки 			= РасчитатьДанныеСтроки( ИмяБазы, ИмяКолонки, ФормулаРасчета, мСтатьиФормулы, ДанныеПоФондуЗаМесяц, ДанныеПоСтатьямЗаМесяц );
			// заполняем за текущий месяц
			ЗаполнитьЗначенияСвойств( СтрТН, сДанныеСтроки );
		КонецЦикла;
		
		// итоги по задаче проекта, за период
		// за период
		ИмяКолонки 				= ИмяКолонкиЗаМесяц();
		Отбор = Новый Структура;
		Отбор.Вставить("ЗадачаПроекта", ЗадачаПроекта );
		ДанныеПоФондуЗаМесяц	= ДанныеПоФонду.Скопировать( Отбор );
		ДанныеПоФондуЗаМесяц.Свернуть("ЗадачаПроекта", "СуммаПлан,СуммаФакт"); 
		//
		ДанныеПоСтатьямЗаМесяц	= ДанныеДляНачисления.Скопировать( Отбор );
		ДанныеПоСтатьямЗаМесяц.Свернуть("ИмяСтатьи", "СуммаПлан,СуммаФакт"); 

		сДанныеСтроки 			= РасчитатьДанныеСтроки( ИмяБазы, ИмяКолонки, ФормулаРасчета, мСтатьиФормулы, ДанныеПоФондуЗаМесяц, ДанныеПоСтатьямЗаМесяц );
		// заполняем за текущий месяц
		ЗаполнитьЗначенияСвойств( СтрТН, сДанныеСтроки );
	КонецЦикла;
	
	// итоговая строка 
	ТаблицаНачислений.Сортировать("Проект,ЗадачаПроекта");
	//тзИтог = ТаблицаНачислений.Выгрузить();
	СтрТН = ТаблицаНачислений.Добавить();
	Для Каждого Месяц ИЗ МесяцыРегистрации Цикл
		ИмяКолонки	= ИмяКолонкиЗаМесяц( Месяц );
		Для Н = 1 По 3 Цикл
			ИмяКолонкиПолное = ИмяПрефиксаКолонки(Н) + ИмяКолонки;
			СтрТН[ИмяКолонкиПолное] 	= ТаблицаНачислений.Итог( ИмяКолонкиПолное );
		КонецЦикла;		
	КонецЦикла;
	// по колонкам итого
	ИмяКолонки	= ИмяКолонкиЗаМесяц( );
	Для Н = 1 По 3 Цикл
		ИмяКолонкиПолное = ИмяПрефиксаКолонки(Н) + ИмяКолонки;
		СтрТН[ИмяКолонкиПолное] 	= ТаблицаНачислений.Итог( ИмяКолонкиПолное );
	КонецЦикла;		
	
КонецПроцедуры


&НаСервере
Процедура ПереформироватьТаблицуНачислений( МесяцыРегистрации )
	
	ПостроитьТаблицуНачислений( МесяцыРегистрации );
	ЗаполнитьНачислениеПоМесяцам( МесяцыРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура Начислить(Команда)
	ОчиститьСообщения();
	// переходим
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаНачислениеФондов;
	ПриПереходеКПросмотруНачисленияФондов();
	
КонецПроцедуры

#КонецОбласти


&НаСервере
Процедура ЗагрузитьТаблицуНачисленийВДокумент()
	Документ 				= РеквизитФормыВЗначение("Объект");
	Документ.СуммаДокумента = 0;
	ТаблицаЗначений 		= РеквизитФормыВЗначение("ТаблицаНачислений");
	Документ.Начисления.Очистить();
	Для Каждого Стр ИЗ ТаблицаЗначений Цикл
		Если ЗначениеЗаполнено( Стр.ЗадачаПроекта ) Тогда
			Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
				Если Найти(Колонка.Имя, "СуммаНачисленоМесяц")  Тогда
					Месяц = МесяцКолонки( Колонка.Имя );
					Если ЗначениеЗаполнено( Месяц ) Тогда
						Сумма = Стр[Колонка.Имя];
						Если ЗначениеЗаполнено( Сумма ) Тогда
							//Сообщить("Задача проекта " + Стр.ЗадачаПроекта + ", " + Месяц + ", " + Сумма );
							Документ.СуммаДокумента 	= Документ.СуммаДокумента + Сумма;
							СтрДок = Документ.Начисления.Добавить();
							СтрДок.ЗадачаПроекта 		= Стр.ЗадачаПроекта;
							СтрДок.Сумма		 		= Сумма ;
							СтрДок.ПериодРегистрации 	= Месяц;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КОнецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы( Документ, "Объект");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивМесяцевРегистрации()
	МесяцыРегистрации = Новый Массив;
	Если ЗначениеЗаполнено( Объект.ПериодРегистрацииНачало )
	И	 ЗначениеЗаполнено( Объект.ПериодРегистрацииОкончание ) Тогда
		Месяц = НачалоМесяца( Объект.ПериодРегистрацииНачало );
		Пока Месяц <= Объект.ПериодРегистрацииОкончание Цикл
			МесяцыРегистрации.Добавить( Месяц );
			Месяц = ДобавитьМесяц( Месяц, 1 );
		КонецЦикла;
	КонецЕсли;		
	Возврат МесяцыРегистрации;
КонецФункции

&НаКлиенте
Процедура ПриПереходеКПросмотруНачисленияФондов()
	МесяцыРегистрации = ПолучитьМассивМесяцевРегистрации();
	
	Если МесяцыРегистрации.Количество() > 0 Тогда
		ПереформироватьТаблицуНачислений(МесяцыРегистрации);
			
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для перехода к просмотру начислений в фонды, их необходимо рассчитать'"));
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНастройкам(Команда)
	// переходим
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаНастройка;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНачислению(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРасчет(Команда)
	ЗагрузитьТаблицуНачисленийВДокумент();
КонецПроцедуры
