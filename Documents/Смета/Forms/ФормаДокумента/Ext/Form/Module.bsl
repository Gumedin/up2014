&НаСервере
// Формирует уникальное имя колонки таблицы
//
Функция ПолучитьИмяКолонкиПоСметеЗадачи( СметаЗадачи )
	Значение = "Задача" + СтрЗаменить(СметаЗадачи.УникальныйИдентификатор(), "-", "");
	Возврат Значение;
КонецФункции

// форирует уникальное имя сводной колонки по виду задачи
Функция ПолучитьИмяКолонкиПоВидуЗадачи( ВидЗадачи  )
	//Значение = "Задача" + СтрЗаменить(ВидЗадачи.УникальныйИдентификатор(), "-", "");
	Значение = "Задача" + ВидЗадачи;
	Возврат Значение;
	
КонецФункции

// Добавляет колонку на форму
//
// Параметры:
// Имя - Строка - имя колонки на форме
// Заголовок - Строка - заголовок колонки на форме
// ОбработчикПриИзменении - Строка - путь к обработчику поля ПриИзменении()
// ОбработчикНачалоВыбора - Строка - путь к обработчику поля НачалоВыбора()
// ЦветФона - Цвет - цвет фона поля 
// ЦветФонаЗаголовка - Цвет - цвет фона заголовка поля
//
// Возвращаемое значение:
// ПолеФормы
//
&НаСервере
Функция ДобавитьПолеФормы(Имя,
						 Заголовок = Неопределено,
						 ОбработчикПриИзменении = "",
						 ОбработчикНачалоВыбора = "",
						 ШиринаПоля,
						 ЦветФона = Неопределено,
						 ЦветФонаЗаголовка = Неопределено,
						 Родитель = Неопределено,
						 КартинкаШапки = Неопределено,
						 ПутьКДанным = Неопределено,
						 ТолькоПросмотрПоля = Ложь,
						 СвязиПараметровВыбора = Неопределено)
	
	НовоеПоле                     = Элементы.Добавить("ТаблицаСмет" + Имя, Тип("ПолеФормы"), ?(Родитель = Неопределено, Элементы.ТаблицаСмет, Родитель));
	НовоеПоле.ПутьКДанным         = ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, "ТаблицаСмет." + Имя);
	НовоеПоле.Заголовок           = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НовоеПоле.Вид                 = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр      = ТолькоПросмотрПоля;
	НовоеПоле.Ширина              = ШиринаПоля;
	
	Если СвязиПараметровВыбора <> Неопределено Тогда
		НовоеПоле.СвязиПараметровВыбора = СвязиПараметровВыбора;
	КонецЕсли;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		НовоеПоле.ЦветФонаЗаголовка = ЦветФонаЗаголовка;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено Тогда
		НовоеПоле.ЦветФона = ЦветФона;
	КонецЕсли;
		
	Если КартинкаШапки <> Неопределено Тогда
		НовоеПоле.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбработчикНачалоВыбора) Тогда
		НовоеПоле.УстановитьДействие("НачалоВыбора", ОбработчикНачалоВыбора);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

// Добавляет колонку на форму
//
// Параметры:
// Имя - Строка - имя колонки на форме
// Заголовок - Строка - заголовок колонки на форме
// ОбработчикПриИзменении - Строка - путь к обработчику поля ПриИзменении()
// ОбработчикНачалоВыбора - Строка - путь к обработчику поля НачалоВыбора()
// ЦветФона - Цвет - цвет фона поля 
// ЦветФонаЗаголовка - Цвет - цвет фона заголовка поля
//
// Возвращаемое значение:
// ПолеФормы
//
&НаСервере
Функция ДобавитьГруппуФормы(Имя, Заголовок = Неопределено, ОтображатьВШапке = Ложь, КартинкаШапки = Неопределено, ГруппировкаКолонок, Родитель = Неопределено)
	
	НоваяГруппа                  = Элементы.Добавить("ТаблицаСмет" + Имя, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Элементы.ТаблицаСмет, Родитель));
	НоваяГруппа.Заголовок        = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.Группировка      = ГруппировкаКолонок;
	НоваяГруппа.ОтображатьВШапке = ОтображатьВШапке;
	
	Если ОтображатьВШапке И КартинкаШапки <> Неопределено Тогда
		НоваяГруппа.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
	
	Возврат НоваяГруппа;
	
КонецФункции

// Формирует дерево значений с колонками по умолчанию
//
// Возвращаемое значение:
// ДеревоЗначений
//
&НаСервереБезКонтекста
Функция СоздатьПустуюТаблицуСмет()
	
	ТЗ = Новый ТаблицаЗначений();
	
	ТЗ.Колонки.Добавить("КодСтатьи",   	Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("ИмяСтатьи",   	Новый ОписаниеТипов("Строка"));
	ТЗ.Колонки.Добавить("Статья",      	Новый ОписаниеТипов("СправочникСсылка.СтатьиСметы"));
	ТЗ.Колонки.Добавить("ЗнПараметра",	Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(7,	3,	ДопустимыйЗнак.Любой)));
	ТЗ.Колонки.Добавить("Сумма",       	Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,	2,	ДопустимыйЗнак.Любой)));
	Возврат ТЗ;
	
КонецФункции

&НаСервере
Процедура ДобавитьКолонкиВТаблицу( ТаблицаЗначений,	ИмяКолонки, НазваниеКолонки, НеВыводитьП, НеВыводитьС )
	Если НеВыводитьП Тогда
	Иначе
		// значение параметра 
		ТаблицаЗначений.Колонки.Добавить("ЗнПараметра" 	+ ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 3, ДопустимыйЗнак.Любой)), 	НазваниеКолонки);
	КонецЕсли;
	
	Если НеВыводитьС Тогда
	Иначе
		ТаблицаЗначений.Колонки.Добавить("Сумма" 		+ ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)), 	НазваниеКолонки);
	КонецЕсли;
КонецПроцедуры		

&НаСервере
Процедура ДобавитьГруппуИПоле( НазваниеГруппы, ИмяКолонки, НеВыводитьП, НеВыводитьС );
	ЦветЗаголовка = Неопределено;
	ЦветФона      = Неопределено;
	КартинкаШапки = Неопределено;
				
	// формируем группу
	НоваяГруппа 	= ДобавитьГруппуФормы("ГруппаСметы" + ИмяКолонки, НазваниеГруппы, Истина, КартинкаШапки, ГруппировкаКолонок.Горизонтальная);
	
	Если НеВыводитьП Тогда
	Иначе
		НовоеПоле = ДобавитьПолеФормы("ЗнПараметра" 	+ ИмяКолонки, "Параметр", , , 12, 	ЦветФона, ЦветЗаголовка, НоваяГруппа,,,Истина);
	КонецЕсли;		
	Если НеВыводитьС Тогда
	Иначе
		НовоеПоле = ДобавитьПолеФормы("Сумма" 			+ ИмяКолонки, "Сумма", , , 12, 		ЦветФона, ЦветЗаголовка, НоваяГруппа,,,Истина);
	КонецЕсли;		
КонецПроцедуры	

&НаСервереБезКонтекста
Функция НазваниеСметыЗадачи( СметаЗадачи )
	//Возврат "Смета №" + СокрЛП( СметаЗадачи.Номер )+", " +СокрЛП( СметаЗадачи.ЗадачаПроекта);
	
	ЗадачаПроекта = СметаЗадачи.ЗадачаПроекта;
	ПечПериод =	Формат(ЗадачаПроекта.НачалоРабот, "ДФ=dd.MM.yy" ) + "-" + 
				Формат( ЗадачаПроекта.ОкончаниеРабот, "ДФ=dd.MM.yy" );
				
	Возврат "Смета №" + СокрЛП( СметаЗадачи.Номер )	+  ", " + Символы.ПС +
			СокрЛП( ЗадачаПроекта)					+ Символы.ПС + 
			ПечПериод;
КонецФункции


&НаСервере
Функция ВозвратТаблицыГруппировки()
	Если ВыводитьПоВидамЗадач Тогда
		ТаблицаГруппировки = ВидыЗадач;
	Иначе
		ТаблицаГруппировки = ГруппировкаЗадач;
	КонецЕсли;
	Возврат ТаблицаГруппировки;
КонецФункции

&НаСервере
Функция ВозвратКолонкиГруппировки()
	Если ВыводитьПоВидамЗадач Тогда
		КолонкаГруппировки = "ВидЗадачи";
	Иначе
		КолонкаГруппировки = "Группировка";
	КонецЕсли;
	Возврат КолонкаГруппировки;
КонецФункции


&НаСервере
Процедура ПостроитьТаблицуСмет()
	//Если ВыводитьПоВидамЗадач Тогда
	//	ТаблицаГруппировки = ВидыЗадач;
	//	КолонкаГруппировки = "ВидЗадачи";
	//	
	//Иначе
	//	ТаблицаГруппировки = ГруппировкаЗадач;
	//	КолонкаГруппировки = "Группировка";
	//	
	//КонецЕсли;
	ТаблицаГруппировки = ВозвратТаблицыГруппировки();
	КолонкаГруппировки = ВозвратКолонкиГруппировки();
	
	
	ДобавляемыеКолонкиТаблицыЦен = Новый Массив();
	УдаляемыеКолонкиТаблицыЦен   = Новый Массив();
	УдаляемыеЭлементы            = Новый Массив();
	УсловныеОформления           = Новый Массив();
	
	ТаблицаЗначений = СоздатьПустуюТаблицуСмет();
	
	//Для Каждого СтрВидЗадачи ИЗ ВидыЗадач Цикл
	//	Если НЕ СтрВидЗадачи.Выводить Тогда Продолжить; КонецЕслИ;
	Для Каждого СтрГруппировки ИЗ ТаблицаГруппировки Цикл
		Если НЕ СтрГруппировки.Выводить Тогда Продолжить; КонецЕслИ;
	
		
		// итоговая колонка по виду задачи
		//ИмяКолонки 		= ПолучитьИмяКолонкиПоВидуЗадачи( "ВидНомер" + ВидыЗадач.Индекс( СтрВидЗадачи )  );
		ИмяКолонки 	= ПолучитьИмяКолонкиПоВидуЗадачи( "ВидНомер" + ТаблицаГруппировки.Индекс( СтрГруппировки )  );
		//НазваниеКолонки	= "Итого по " + СтрВидЗадачи.ВидЗадачи;
		НазваниеКолонки	= "Итого по " + СтрГруппировки[КолонкаГруппировки];
		ДобавитьКолонкиВТаблицу( ТаблицаЗначений,	ИмяКолонки, НазваниеКолонки, Истина, НеВыводитьСуммы );
		
		Если ВыводитьТолькоСводныеКолонки Тогда
			Продолжить; 
		КонецЕсли;
		
		Для Каждого СметаЗадачи Из Объект.Документы Цикл
			// простенько
			//ВидЗадачи = ВидЗадачиПоСмете( СметаЗадачи.Документ );
			//Если НЕ СметаЗадачи.ВключитьВСмету или ВидЗадачи <>  СтрВидЗадачи.ВидЗадачи Тогда Продолжить; КонецЕсли;
			ЗнГруппировки = ЗначениеГруппировкиСметы( СметаЗадачи.Документ );
			Если НЕ СметаЗадачи.ВключитьВСмету или ЗнГруппировки <>  СтрГруппировки[КолонкаГруппировки] Тогда Продолжить; КонецЕсли;
			
			// "Задача" + GUID()
			ИмяКолонки 		= ПолучитьИмяКолонкиПоСметеЗадачи( СметаЗадачи.Документ  );
			НазваниеКолонки	= НазваниеСметыЗадачи( СметаЗадачи.Документ );
			ДобавитьКолонкиВТаблицу( ТаблицаЗначений,	ИмяКолонки, НазваниеКолонки, НеВыводитьПараметры, НеВыводитьСуммы );
			
		КонецЦикла;
		
	КонецЦикла;
	
	//******************************************************************************************
	РеквизитыТаблицыСмет = ПолучитьРеквизиты("ТаблицаСмет");
	
	// пишем удаляемые колонки
	Для Каждого Реквизит Из РеквизитыТаблицыСмет Цикл
		Если Найти(Реквизит.Имя, "Задача") Тогда
			УдаляемыеКолонкиТаблицыЦен.Добавить("ТаблицаСмет." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	// пишем добавляемые колонки
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если Найти(Колонка.Имя, "Задача") Тогда
			УдаляемаяКолонка = УдаляемыеКолонкиТаблицыЦен.Найти("ТаблицаСмет." + Колонка.Имя);
			Если УдаляемаяКолонка <> Неопределено Тогда
				УдаляемыеКолонкиТаблицыЦен.Удалить(УдаляемаяКолонка);
			Иначе
				ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ТаблицаСмет", Колонка.Заголовок, Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если УдаляемыеКолонкиТаблицыЦен.Количество() > 0 Или ДобавляемыеКолонкиТаблицыЦен.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеКолонкиТаблицыЦен, УдаляемыеКолонкиТаблицыЦен);
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из Элементы.ТаблицаСмет.ПодчиненныеЭлементы Цикл
		Если Найти(ТекЭлемент.Имя, "Задача") Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	// с прошлого раза
	Для Каждого Оформление Из ЭтаФорма.УсловноеОформление.Элементы Цикл
		Если Оформление.Представление = "СозданоПрограммно" Тогда
			УсловныеОформления.Добавить(Оформление);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Оформление Из УсловныеОформления Цикл
		УсловноеОформление.Элементы.Удалить(Оформление);
	КонецЦикла;
	
	
	
	//******************************************************************************************
	//			
	
	//Для Каждого СтрВидЗадачи ИЗ ВидыЗадач Цикл
	//	Если НЕ СтрВидЗадачи.Выводить Тогда Продолжить; КонецЕслИ;
	Для Каждого СтрГруппировки ИЗ ТаблицаГруппировки Цикл
		Если НЕ СтрГруппировки.Выводить Тогда Продолжить; КонецЕслИ;
		
		// поле формы
		//ИмяКолонки 		= ПолучитьИмяКолонкиПоВидуЗадачи( "ВидНомер" + ВидыЗадач.Индекс( СтрВидЗадачи )  );
		ИмяКолонки 	= ПолучитьИмяКолонкиПоВидуЗадачи( "ВидНомер" + ТаблицаГруппировки.Индекс( СтрГруппировки )  );
		
		//НазваниеГруппы	= "Итого по " + СтрВидЗадачи.ВидЗадачи;
		НазваниеГруппы	= "Итого по " + СтрГруппировки[КолонкаГруппировки];;
		ДобавитьГруппуИПоле( НазваниеГруппы, ИмяКолонки, Истина, НеВыводитьСуммы );
		
		Если ВыводитьТолькоСводныеКолонки Тогда	Продолжить;	КонецЕсли;
		
		Для Каждого СметаЗадачи Из Объект.Документы Цикл
			// простенько
			//ВидЗадачи = ВидЗадачиПоСмете( СметаЗадачи.Документ );
			//Если НЕ СметаЗадачи.ВключитьВСмету или ВидЗадачи <>  СтрВидЗадачи.ВидЗадачи Тогда Продолжить; КонецЕсли;
			ЗнГруппировки = ЗначениеГруппировкиСметы( СметаЗадачи.Документ );
			Если НЕ СметаЗадачи.ВключитьВСмету или ЗнГруппировки <>  СтрГруппировки[КолонкаГруппировки] Тогда Продолжить; КонецЕсли;
			
			// 	
			ИмяКолонки 		= ПолучитьИмяКолонкиПоСметеЗадачи( СметаЗадачи.Документ );
			НазваниеГруппы	= "Смета №" + СокрЛП( СметаЗадачи.Документ.Номер )+", " +СокрЛП( СметаЗадачи.Документ.ЗадачаПроекта);
			ДобавитьГруппуИПоле( НазваниеГруппы, ИмяКолонки, НеВыводитьПараметры, НеВыводитьСуммы );
	
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДокументов_НаСервере()
	ДокОб = РеквизитФормыВЗначение("Объект");
	ДокОб.Документы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БюджетПроекта.Регистратор КАК Документ,
		|	ИСТИНА КАК ВключитьВСмету
		|ИЗ
		|	РегистрНакопления.БюджетПоМесяцам КАК БюджетПроекта
		|ГДЕ
		|	БюджетПроекта.ЗадачаПроекта.Владелец = &Проект
		|	И ТИПЗНАЧЕНИЯ(БюджетПроекта.Регистратор) = ТИП(Документ.СметаЗадачиПроекта)
		|
		|СГРУППИРОВАТЬ ПО
		|	БюджетПроекта.Регистратор";

	Запрос.УстановитьПараметр("Проект", 		Объект.Проект);

	Результат = Запрос.Выполнить().Выгрузить();
	ДокОб.Документы.Загрузить( Результат );
	
	ЗначениеВРеквизитФормы( ДокОб, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументы(Команда)
	ЗаполнитьСписокДокументов_НаСервере();
	ЗаполнитьВидыЗадач();
	ЗаполнитьГруппировкуЗадач();
	ЭтаФорма.Модифицированность=Истина;
	
	
КонецПроцедуры

// Возвращает массив строк выбранных пользователем видов цен
//
&НаКлиенте
Функция ПолучитьВыбранныеСметыЗадачПроектов()
	
	СметыЗадач = Новый Массив();
	
	Для Каждого ТекСтрока Из Объект.Документы Цикл
		Если ТекСтрока.ВключитьВСмету Тогда
			СметыЗадач.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СметыЗадач;
	
КонецФункции

//&НаСервереБезКонтекста
//Функция ПрочитатьДанныеСметыЗадачи( СметаЗадачи )
//	СтрС 	= Новый Соответствие;
//	// 
//	Для Каждого СтрР ИЗ СметаЗадачи.Расчет Цикл
//		СтрС.Вставить(СтрР.ИмяСтатьи, СтрР.Сумма);
//	КонецЦикла;
//	
//	Возврат СтрС;
//	
//КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьДанныеСметыЗадачи( СметаЗадачи )
	СтрП 	= Новый Структура;
	СтрС 	= Новый Структура;
	// 
	Для Каждого СтрР ИЗ СметаЗадачи.Расчет Цикл
		СтрП.Вставить(СтрР.ИмяСтатьи, СтрР.ЗначениеПараметра);
		СтрС.Вставить(СтрР.ИмяСтатьи, СтрР.Сумма);
	КонецЦикла;
	Стр 	= Новый Структура;
	Стр.Вставить( "ЗнПараметра", 	СтрП );
	Стр.Вставить( "Сумма",			СтрС );
	Возврат Стр;
	
КонецФункции


&НаСервереБезКонтекста
 Процедура ВывестиДанныеСметыЗадачи( ТаблицаСметы, ИмяКолонка, СтСметыЗадачи, НеВыводитьПараметры, НеВыводитьСуммы )
	Перем Зн;
	Для Каждого СтрСм ИЗ ТаблицаСметы Цикл
		Если НЕ НеВыводитьПараметры Тогда
			СтрСм["ЗнПараметра" + ИмяКолонка]	= СтСметыЗадачи.ЗнПараметра[СтрСм.ИмяСтатьи];
		КонецЕсли;
		Если НЕ НеВыводитьСуммы Тогда
			СтрСм["Сумма"		+ ИмяКолонка]	= СтСметыЗадачи.Сумма[СтрСм.ИмяСтатьи];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// у итогов нет зн.параметра, и сИтог - соответствие
&НаСервереБезКонтекста
 Процедура ВывестиДанныеИтоговыеДанные( ТаблицаСметы, ИмяКолонка, сИтог, НеВыводитьСуммы )
	Перем Зн;
	Для Каждого СтрСм ИЗ ТаблицаСметы Цикл
		Если НЕ НеВыводитьСуммы Тогда
			СтрСм["Сумма"		+ ИмяКолонка]	= сИтог[СтрСм.ИмяСтатьи];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры



// пересчет параметров по суммам
// снизу вверх
//&НаСервереБезКонтекста
//Процедура ПересчетПараметровПоСуммам( СтИтого )
//	сСтатей = СтИтого.Сумма;
//	сПарам	= СтИтого.ЗнПараметра;
//	// расчет
//	Дф  = сСтатей["ДохФинансовые"];
//	Если ДФ = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	ДохВс   		= сСтатей["ДоходыВс"];
//	СуммаВознПоср 	= сСтатей["ВознагрПосредника"];
//	Если СуммаВознПоср <> 0 Тогда
//		сПарам.Вставить( "ВознагрПосредника", 		Окр(  СуммаВознПоср / ДФ * 100, 1));
//		сПарам.Вставить( "РасходыВознПосредника", 	Окр(  сСтатей["РасходыВознПосредника"]/ СуммаВознПоср  * 100, 1));
//	КонецЕсли;
//	// налоговая нагрузка по проекту
//	сПарам.Вставить( "НалогНагрузкаВыч", 	Окр(  сСтатей["НалогНагрузкаВыч"] / ДФ * 100, 1)); 
//	СуммаППЛЛ = сСтатей["РасходыППЛО"];
//	сПарам.Вставить( "РасходыППЛО",			Окр(  СуммаППЛЛ / ДФ * 100, 1)); 
//	
//	СуммаЧД = сСтатей["ЧистыйДоход"];
//	Если сСтатей["РасходыКоммерческие"] <> 0 Тогда
//		//сПарам.Вставить( "РасходыКоммерческие", 			Окр(  сСтатей["РасходыКоммерческие"] /(СуммаЧД- СуммаППЛЛ) * 100, 1)); 
//		// 18.04.2013
//		сПарам.Вставить( "РасходыКоммерческие", 			Окр(  сСтатей["РасходыКоммерческие"] /(ДохВс- СуммаППЛЛ) * 100, 1)); 
//		сПарам.Вставить( "РасходыПоВыплатеКоммРасходов", 	Окр(  сСтатей["РасходыПоВыплатеКоммРасходов"]/сСтатей["РасходыКоммерческие"] * 100, 1)); 
//	КонецЕсли;
//	СуммаФОТ = сСтатей["ФОТ_ПП"];
//	Если СуммаФОТ <> 0 Тогда
//		сПарам.Вставить( "ФОТ_ПП", 					Окр(  СуммаФОТ /СуммаЧД * 100, 1)); 
//		сПарам.Вставить( "ФОТ_ПремиальныйФонд", 	Окр(  сСтатей["ФОТ_ПремиальныйФонд"] 	/СуммаФОТ * 100, 1)); 
//		сПарам.Вставить( "ФОТ_администрации", 		Окр(  сСтатей["ФОТ_администрации"] 		/СуммаФОТ * 100, 1)); 
//		сПарам.Вставить( "КомпенсВыплаты", 			Окр(  сСтатей["КомпенсВыплаты"] 		/СуммаФОТ * 100, 1)); 
//		сПарам.Вставить( "РасходыПоВыплате_ФОТ", 	Окр(  сСтатей["РасходыПоВыплате_ФОТ"] 	/СуммаФОТ * 100, 1)); 
//	КонецЕсли;
//	// прочие расходы
//	СуммаПрР = сСтатей["РасходыППпоПроекту"];
//	Если СуммаПрР <> 0 Тогда
//		сПарам.Вставить( "РасходыППпоПроекту", Окр(  сСтатей["РасходыППпоПроекту"] 	/СуммаЧД * 100, 1)); 
//	КонецЕсли;
//	// 
//	СуммаОПР = сСтатей["РасходыОПР"];
//	Если СуммаОПР <> 0 Тогда
//		сПарам.Вставить( "РасходыОПР", Окр(  сСтатей["РасходыОПР"] 	/ СуммаЧД * 100, 1)); 
//	КонецЕсли;
//	// 
//	СуммаОХР = сСтатей["РасходыОХР"];
//	Если СуммаОХР <> 0 Тогда
//		сПарам.Вставить( "РасходыОХР", Окр(  сСтатей["РасходыОХР"] 	/ СуммаЧД * 100, 1)); 
//	КонецЕсли;
//	
//КонецПроцедуры

// прибавляем в структуру
&НаСервереБезКонтекста
Процедура ОбновитьИтоговуюСтруктуру( СтИтого, СтСметыЗадачи )
	Перем Зн;
	Если СтИтого.Количество() = 0 Тогда
		СтИтого = Новый Соответствие;
	КонецЕсли;
	// считаем сумму
	Для Каждого Эл ИЗ СтСметыЗадачи Цикл
		Зн =  СтИтого.Получить( Эл.Ключ );
		Если Зн = Неопределено Тогда
			Зн = 0;
		КонецЕсли;
		СтИтого.Вставить( Эл.Ключ, Зн + Эл.Значение );
	КонецЦикла;			
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьРасчетСметыПроектаПоСметамЗадач()
	//Если ВыводитьПоВидамЗадач Тогда
	//	ТаблицаГруппировки = ВидыЗадач;
	//	КолонкаГруппировки = "ВидЗадачи";
	//	
	//Иначе
	//	ТаблицаГруппировки = ГруппировкаЗадач;
	//	КолонкаГруппировки = "Группировка";
	//	
	//КонецЕсли;
	ТаблицаГруппировки = ВозвратТаблицыГруппировки();
	КолонкаГруппировки = ВозвратКолонкиГруппировки();
	
	//
	ТаблицаСмет.Очистить();
	
	// структура сметы
	ГодПроекта 		= Объект.Проект.ГодПроекта;
	СтруктураСметы 	= УП_СметаПроекта.ПолучитьСтруктуруСметыЗадачи( ГодПроекта );	
	Если СтруктураСметы = Неопределено Тогда
		Сообщить("Структура сметы не определена на указанный год "+ ГодПроекта);
		Возврат;
	КонецЕсли;
	// 
	СтатьяДоходы = Справочники.СтатьиСметы.ДохФинансовые;
	
	// по табличной части документа
	Для Каждого СтрСС ИЗ СтруктураСметы Цикл
		СтрР 			= ТаблицаСмет.Добавить();
		ЗаполнитьЗначенияСвойств( СтрР, СтрСС.Значение );
		СтрР.ИмяСтатьи 	= СтрСС.Ключ;
	КонецЦикла;
	
	
	// общий итог
	сИТОГО = Новый Соответствие;

	// по видам задач
	//Для Каждого СтрВидЗадачи ИЗ ВидыЗадач Цикл
	//	Если НЕ СтрВидЗадачи.Выводить Тогда Продолжить; КонецЕслИ;
	Для Каждого СтрГруппировки ИЗ ТаблицаГруппировки Цикл
		Если НЕ СтрГруппировки.Выводить Тогда Продолжить; КонецЕслИ;
		
		сИтогоПоГруппе = Новый Соответствие;
		
		Для Каждого СметаЗадачи Из Объект.Документы Цикл
			// простенько
			//ВидЗадачи = ВидЗадачиПоСмете( СметаЗадачи.Документ );
			//Если НЕ СметаЗадачи.ВключитьВСмету или ВидЗадачи <>  СтрВидЗадачи.ВидЗадачи Тогда Продолжить; КонецЕсли;
			ЗнГруппировки = ЗначениеГруппировкиСметы( СметаЗадачи.Документ );
			Если НЕ СметаЗадачи.ВключитьВСмету или ЗнГруппировки <>  СтрГруппировки[КолонкаГруппировки] Тогда Продолжить; КонецЕсли;
			
			// данные сметы задачи
			СтСметыЗадачи = ПрочитатьДанныеСметыЗадачи( СметаЗадачи.Документ );
			
			// складываем по группировке
			ОбновитьИтоговуюСтруктуру( сИтогоПоГруппе, СтСметыЗадачи.Сумма );
			// итого
			ОбновитьИтоговуюСтруктуру( сИТОГО, СтСметыЗадачи.Сумма );
			
			Если НЕ ВыводитьТолькоСводныеКолонки Тогда
				// записать структуру в таблицу значений
				ИмяКолонки 		= ПолучитьИмяКолонкиПоСметеЗадачи( СметаЗадачи.Документ  );
				ВывестиДанныеСметыЗадачи( ТаблицаСмет, ИмяКолонки, СтСметыЗадачи, НеВыводитьПараметры, НеВыводитьСуммы );
			КонецЕсли;
			
		КонецЦикла;
		// по виду задачи заполняем после вывода задач
		//ИмяКолонки 		= ПолучитьИмяКолонкиПоВидуЗадачи( "ВидНомер" + ВидыЗадач.Индекс( СтрВидЗадачи )  );
		ИмяКолонки 	= ПолучитьИмяКолонкиПоВидуЗадачи( "ВидНомер" + ТаблицаГруппировки.Индекс( СтрГруппировки )  );
		// 
		// пересчет итогов
		УП_СметаПроекта.ПересчетСметыЗадачи( СтруктураСметы, сИтогоПоГруппе );	
		ВывестиДанныеИтоговыеДанные( ТаблицаСмет, ИмяКолонки, сИтогоПоГруппе, НеВыводитьСуммы )
		
	КонецЦикла;
	//ПересчетПараметровПоСуммам( СтИТОГО );
	УП_СметаПроекта.ПересчетСметыЗадачи( СтруктураСметы, сИТОГО );		
	ВывестиДанныеИтоговыеДанные( ТаблицаСмет, "", сИТОГО, НеВыводитьСуммы );
	
	
КонецПроцедуры


// Формирует таблицу цен смет задач
//
// Параметры:
// ПересчитатьЦены - Булево - Указывает на необходимость перерасчета цен
//
&НаСервере
Процедура ПереформироватьТаблицуСмет() 
	
	// построить таблицу значений (т.е. состав колонок)
	ПостроитьТаблицуСмет();
	
	//
	ЗаполнитьРасчетСметыПроектаПоСметамЗадач();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидЗадачиПоСмете( СметаЗадачи  )
	Возврат СметаЗадачи.ЗадачаПроекта.ТиповаяЗадача.ВидТиповойЗадачи;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВидыЗадач( )
	ВидыЗадач.Очистить();
	Для Каждого СтрД ИЗ Объект.Документы Цикл
		ВидЗадачи = ВидЗадачиПоСмете( СтрД.Документ  );
		Если ВидыЗадач.НайтиСтроки(  Новый Структура("ВидЗадачи", ВидЗадачи )).Количество() = 0 Тогда
			СтрВЗ = ВидыЗадач.Добавить();
			СтрВЗ.ВидЗадачи = ВидЗадачи;
			СтрВЗ.Выводить	= Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГруппировкаПоСмете( СметаЗадачи  )
	Возврат ?(ЗначениеЗаполнено(СметаЗадачи.Группировка), СметаЗадачи.Группировка, "Без группировки");
КонецФункции
	

&НаКлиенте
Процедура ЗаполнитьГруппировкуЗадач( )
	ГруппировкаЗадач.Очистить();
	Для Каждого СтрД ИЗ Объект.Документы Цикл
		ЗначГруппировки = ГруппировкаПоСмете( СтрД.Документ  );
		
		Если ГруппировкаЗадач.НайтиСтроки(  Новый Структура("Группировка", ЗначГруппировки )).Количество() = 0 Тогда
			СтрГЗ = ГруппировкаЗадач.Добавить();
			СтрГЗ.Группировка = ЗначГруппировки;
			СтрГЗ.Выводить	= Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


// Выполняет необходимые действия при переходе к странице просмотра смет
//
&НаКлиенте
Процедура ПриПереходеКПросмотруСметЗадач()
	
	Если ПолучитьВыбранныеСметыЗадачПроектов().Количество() > 0 Тогда
		
		ПереформироватьТаблицуСмет( );
			
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для перехода к смете задачи, необходимо выбрать одну или несколько смет задач'"));
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДокументы;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСметамЗадач(Команда)
	ОчиститьСообщения();
	
	// переходим
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаСметыЗадач;
	ПриПереходеКПросмотруСметЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСоставуСметыПроекта(Команда)
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаДокументы;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьВидыЗадач();
	ЗаполнитьГруппировкуЗадач();
	ВыводитьПоВидамЗадач = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФлажкиВидовЗадач( Выводить )
	Для Каждого Стр ИЗ ВидыЗадач Цикл
		Стр.Выводить = Выводить;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВсеВыводить(Команда)
	ЗаполнитьФлажкиВидовЗадач( Истина );
КонецПроцедуры

&НаКлиенте
Процедура ВсеНеВыводить(Команда)
	ЗаполнитьФлажкиВидовЗадач( Ложь );
КонецПроцедуры

&НаСервере
Процедура ВывестиОбластьСметы( ТабДок, Макет, ИмяСтрокиМакета, ИмяКолонкиМакета,  
							   СтрСметы = Неопределено, ИмяКолонки = Неопределено, Название = Неопределено,
							   НеВыводитьП, НеВыводитьС )
							   
							   
	ОблДШ = Макет.ПолучитьОбласть( ИмяСтрокиМакета + ИмяКолонкиМакета + "Начало");
	Если Название <> Неопределено Тогда
		ОблДШ.Параметры.Название = Название;
	КонецЕсли;
	ТабДок.Присоединить( ОблДШ );
	
	Если НЕ НеВыводитьП Тогда
		ОблДШ = Макет.ПолучитьОбласть(ИмяСтрокиМакета + ИмяКолонкиМакета + "ЗнПараметра");
		Если ИмяКолонки <> Неопределено Тогда
			ОблДШ.Параметры.ЗнПараметра = СтрСметы["ЗнПараметра"+ИмяКолонки];
		КонецЕсли;
		ТабДок.Присоединить( ОблДШ );
	КонецЕсли;
	Если НЕ НеВыводитьС Тогда
		ОблДШ = Макет.ПолучитьОбласть(ИмяСтрокиМакета + ИмяКолонкиМакета + "Сумма");
		Если ИмяКолонки <> Неопределено Тогда
			ОблДШ.Параметры.Сумма = СтрСметы["Сумма" + ИмяКолонки];
		КонецЕсли;
		ТабДок.Присоединить( ОблДШ );
	КонецЕсли;
КонецПроцедуры


&НаСервере
Функция ЗначениеГруппировкиСметы( СметаЗадачи )
	Если ВыводитьПоВидамЗадач Тогда
		Возврат ВидЗадачиПоСмете( СметаЗадачи  );
	Иначе
		Возврат ГруппировкаПоСмете( СметаЗадачи  );
	КонецЕсли;
КонецФункции

// кросс вариант
// ТаблицаГруппировки - таблица, по которой будут группироваться сметы зада
// КолонкаГруппировки - название колонки со значением группировки 
&НаСервере
Процедура ПечатьСметыПоЗадачам_НаСервере(ТабДок)
	
	//Если ВыводитьПоВидамЗадач Тогда
	//	ТаблицаГруппировки = ВидыЗадач;
	//	КолонкаГруппировки = "ВидЗадачи";
	//	
	//Иначе
	//	ТаблицаГруппировки = ГруппировкаЗадач;
	//	КолонкаГруппировки = "Группировка";
	//	
	//КонецЕсли;
	ТаблицаГруппировки = ВозвратТаблицыГруппировки();
	КолонкаГруппировки = ВозвратКолонкиГруппировки();
	
	Макет = Документы.Смета.ПолучитьМакет("СметаПроектаКросс");
	ОблШ  = Макет.ПолучитьОбласть("Шапка|Начало");
	ОблШ.Параметры.Проект 	= Объект.Проект;
	ОблШ.Параметры.Номер 	= Объект.Номер;
	ОблШ.Параметры.Дата 	= Формат( Объект.Дата, "ДЛФ=DD");
	// шапка
	ТабДок.Вывести( ОблШ );

	Для Каждого СтрГруппировки ИЗ ТаблицаГруппировки Цикл
		Если НЕ СтрГруппировки.Выводить Тогда Продолжить; КонецЕслИ;
		//
		ВывестиОбластьСметы( ТабДок, Макет, "Шапка|", "ВЗ",,, СтрГруппировки[КолонкаГруппировки], Истина, НеВыводитьСуммы);
		
		Если ВыводитьТолькоСводныеКолонки Тогда Продолжить; КонецЕсли;
		
		// по сметам задач
		Для Каждого СметаЗадачи Из Объект.Документы Цикл
			// простенько
			ЗнГруппировки = ЗначениеГруппировкиСметы( СметаЗадачи.Документ );
			Если НЕ СметаЗадачи.ВключитьВСмету или ЗнГруппировки <>  СтрГруппировки[КолонкаГруппировки] Тогда Продолжить; КонецЕсли;
			
			ВывестиОбластьСметы( ТабДок, Макет, "Шапка|", "СЗ",,, НазваниеСметыЗадачи( СметаЗадачи.Документ ), НеВыводитьПараметры, НеВыводитьСуммы);
		
		КонецЦикла;
	КонецЦикла;
		
	ОблДШ = Макет.ПолучитьОбласть("Шапка|СметаПолнаяКонец");
	ТабДок.Присоединить( ОблДШ );
	
	
	// данные 
	Для Каждого СтрСметы ИЗ ТаблицаСмет Цикл
		Если СтрСметы.Итоговая Тогда
			ИмяСтрокиМакета = "ИтоговаяСтрокаСметы" + 
							  ?(СтрСметы.ИмяСтатьи = "Рентабельность", "Рентабельность|", "|");
		Иначе
			ИмяСтрокиМакета = "СтрокаСметы|";
		КонецЕсли;
		ОблСтр = Макет.ПолучитьОбласть(ИмяСтрокиМакета + "Начало");
		ОблСтр.Параметры.Заполнить( СтрСметы );
		ТабДок.Вывести( ОблСтр );
		
		// данные по строке
		//Для Каждого СтрВидЗадачи ИЗ ВидыЗадач Цикл
		Для Каждого СтрГруппировки ИЗ ТаблицаГруппировки Цикл
			//Если НЕ СтрВидЗадачи.Выводить Тогда Продолжить; КонецЕслИ;
			Если НЕ СтрГруппировки.Выводить Тогда Продолжить; КонецЕслИ;
	
			
			//ИмяКолонки 	= ПолучитьИмяКолонкиПоВидуЗадачи( "ВидНомер" + ВидыЗадач.Индекс( СтрВидЗадачи )  );
			ИмяКолонки 	= ПолучитьИмяКолонкиПоВидуЗадачи( "ВидНомер" + ТаблицаГруппировки.Индекс( СтрГруппировки )  );
			ВывестиОбластьСметы( ТабДок, Макет, ИмяСтрокиМакета, "ВЗ",  СтрСметы, ИмяКолонки,, Истина, НеВыводитьСуммы );
			
			Если ВыводитьТолькоСводныеКолонки Тогда Продолжить; КонецЕсли;
			
			// по сметам задач
			Для Каждого СметаЗадачи Из Объект.Документы Цикл
				// простенько
				//ВидЗадачи = ВидЗадачиПоСмете( СметаЗадачи.Документ );
				//Если НЕ СметаЗадачи.ВключитьВСмету или ВидЗадачи <>  СтрВидЗадачи.ВидЗадачи Тогда Продолжить; КонецЕсли;
				ЗнГруппировки = ЗначениеГруппировкиСметы( СметаЗадачи.Документ );
				Если НЕ СметаЗадачи.ВключитьВСмету или ЗнГруппировки <>  СтрГруппировки[КолонкаГруппировки] Тогда Продолжить; КонецЕсли;
				// 			
				ИмяКолонки 		= ПолучитьИмяКолонкиПоСметеЗадачи( СметаЗадачи.Документ  );
				ВывестиОбластьСметы( ТабДок, Макет, ИмяСтрокиМакета, "СЗ",  СтрСметы, ИмяКолонки,,  НеВыводитьПараметры, НеВыводитьСуммы);
				
			КонецЦикла;
		КонецЦикла;
		ОблДШ = Макет.ПолучитьОбласть(ИмяСтрокиМакета + "СметаПолнаяКонец");
		ТабДок.Присоединить( ОблДШ );
		
	КонецЦикла;
	
	ПечататьПодписи = Истина;
	Если ПечататьПодписи Тогда
		ОблПодв = Макет.ПолучитьОбласть("Подписи");
		ОблПодв.Параметры.КлиентМенеджер 	= Объект.Проект.МенеджерПроекта;
		ОблПодв.Параметры.ДиректорПроекта	= Объект.Проект.ДиректорПроекта;
		ТабДок.Вывести( ОблПодв );
		
	Иначе
	
		ОблПодв = Макет.ПолучитьОбласть("Подвал|Начало");
		ОблПодв.Параметры.МенеджерПроекта 	= Объект.Проект.МенеджерПроекта;
		ОблПодв.Параметры.ДатаВремяПечати	= Формат( ТекущаяДата(), "ДЛФ=DDT");
		ТабДок.Вывести( ОблПодв );
	КонецЕсли;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры


&НаКлиенте
Процедура ПечатьСметы(Команда)
	ТабДок = Новый ТабличныйДокумент;
	ПечатьСметыПоЗадачам_НаСервере(ТабДок);
	
	//
	ТабДок.АвтоМасштаб			= Истина;
	ТабДок.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабДок.ОтображатьСетку 		= Ложь;
	ТабДок.Защита 				= Ложь;
	ТабДок.ТолькоПросмотр 		= Истина;
	ТабДок.ОтображатьЗаголовки 	= Ложь;
	ТабДок.Показать();
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.Редактор 		= ПараметрыСеанса.ТекущийПользователь;
	ТекущийОбъект.ДатаИзменения	= ТекущаяДата();
	
КонецПроцедуры

