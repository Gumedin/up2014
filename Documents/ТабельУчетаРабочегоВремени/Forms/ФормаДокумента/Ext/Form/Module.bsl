//************************
//  Excel
&НаКлиенте
Процедура ФайлЗагрузкиExcelНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла( РежимДиалогаВыбораФайла.Открытие );
	ДиалогОткрытияФайла.ПолноеИмяФайла 	= "";
	ДиалогОткрытияФайла.Фильтр			= "Лист Excel(*.xls)|*.xls|Лист Excel2007-...(*.xlsx)|*.xlsx";
	ДиалогОткрытияФайла.ПолноеИмяФайла	= ФайлЗагрузкиExcel;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Укажите файл для загрузки'");
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ФайлЗагрузкиExcel = ДиалогОткрытияФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	Если ПустаяСтрока(ФайлЗагрузкиExcel) Тогда
		ПоказатьПредупреждение(,"Укажите файл Microsoft Excel.", 10);
		Возврат;
	КонецЕсли;
	Если Объект.РабочееВремя.Количество() <> 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработкаФайлаПоВопросу", ЭтаФорма);
		ПоказатьВопрос( Оповещение, "При загрузке текущий табель будет очищен, продолжить?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
		
	ОбработкаФайла();
	// Вставить содержимое обработчика.

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаФайлаПоВопросу( Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработкаФайла();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаФайла() Экспорт
	ТаблицаЗагрузки = Новый ТабличныйДокумент;
	
	Попытка
		// Загрузка Microsoft Excel
		//Сообщить("Загрузка Microsoft Excel...");
		ExcelПриложение = Новый COMОбъект("Excel.Application");
		
	Исключение
		
		Сообщить("Ошибка при загрузке Microsoft Excel." + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Внимание);
		Возврат;
		
	КонецПопытки;
		
	Попытка
		
		// Открытие файла Microsoft Excel
		//Состояние("Открытие файла Microsoft Excel...");
		ExcelФайл = ExcelПриложение.WorkBooks.Open(ФайлЗагрузкиExcel);
		
		// Обработка файла Microsoft Excel
		//Состояние("Обработка файла Microsoft Excel...");
		ExcelЛист = ExcelФайл.Sheets(1);
		xlCellTypeLastCell = 11;
		ExcelПоследняяСтрока = ExcelЛист.Cells.SpecialCells(xlCellTypeLastCell).Row;
		ExcelПоследняяКолонка = ExcelЛист.Cells.SpecialCells(xlCellTypeLastCell).Column;
		
		//ТаблицаЗагрузки.Очистить();
		
		Для Строка = 1 По ExcelПоследняяСтрока Цикл
			
			Для Колонка = 1 По ExcelПоследняяКолонка Цикл
				
				//Состояние("Обработка файла Microsoft Excel : "
							//+ "строка " + Строка + " из " + ExcelПоследняяСтрока
							//+ ", колонка " + Колонка + " из " + ExcelПоследняяКолонка);
				ExcelЯчейка = ExcelЛист.Cells(Строка, Колонка);
				ТаблицаЗагрузки.Область(Строка, Колонка, Строка, Колонка).Текст = ExcelЯчейка.Value;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка при открытии/чтении файла " + ФайлЗагрузкиExcel + "." + Символы.ПС + ОписаниеОшибки();
		Сообщение.Сообщить();
		
	КонецПопытки;
			
	ExcelПриложение.Quit();
	
	ОтбработатьТаблицуЗагрузки( ТаблицаЗагрузки );
	
КонецПроцедуры // ОбработкаФайла(Элемент)

&НаСервереБезКонтекста
Функция НедопустимыеСимволыВСтроке(ПроверяемаяСтрока, ДопустимыеСимволы)
	
	СписокНедопустимыхСимволов = Новый СписокЗначений;
	
	ДлинаСтроки = СтрДлина(ПроверяемаяСтрока);
	Для Итератор = 1 По ДлинаСтроки Цикл
		ТекущийСимвол = Сред(ПроверяемаяСтрока, Итератор, 1);
		//Если Найти(ДопустимыеСимволы, ТекущийСимвол) = 0 Тогда
		Если Найти(ДопустимыеСимволы, ТекущийСимвол) <> 0 Тогда
			Если СписокНедопустимыхСимволов.НайтиПоЗначению(ТекущийСимвол) = Неопределено Тогда
				СписокНедопустимыхСимволов.Добавить(ТекущийСимвол);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НедопустимыеСимволыСтрокой = "";
	Запятая                    = Ложь;
	
	Для каждого ЭлементНедопустимыйСимвол Из СписокНедопустимыхСимволов Цикл
		
		НедопустимыеСимволыСтрокой = НедопустимыеСимволыСтрокой
			+ ?(Запятая, ",", "")
			+ """"
			+ ЭлементНедопустимыйСимвол.Значение
			+ """";
		Запятая = Истина;
		
	КонецЦикла;
	
	Возврат НедопустимыеСимволыСтрокой;
	
КонецФункции


&НаСервере
Процедура ОтбработатьТаблицуЗагрузки( ТаблицаЗагрузки )
	
	//ТаблицаЗагрузки = Новый ТабличныйДокумент;
	ФИО = ТаблицаЗагрузки.Область(1,1).Текст;
	НедопустимыеСимволы = НедопустимыеСимволыВСтроке(ФИО,
				"0123456789aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ_-:*?");
	Если НЕ ПустаяСтрока(НедопустимыеСимволы) Тогда
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтрЗаменить(НСтр("ru = 'Фамилии сотрудника найдены недопустимые символы: %1'"),
					"%1",
					НедопустимыеСимволы);
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
				

	Если НЕ ЗначениеЗаполнено( ФИО ) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан сотрудник!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	//
	Документ 		= РеквизитФормыВЗначение("Объект");
	Документ.РабочееВремя.Очистить();
	// по умолчанию
	ОтметкаТабеляПоУмолчанию	= Справочники.ОтметкиТабеля.НайтиПоКоду("05");
	
	//Документ.ФизическоеЛицо = Справочники.ФизическиеЛица.НайтиПоНаименованию( ФИО, Истина );
	Документ.ФизическоеЛицо = Справочники.ФизическиеЛица.НайтиПоКоду( ФИО );
	Если Документ.ФизическоеЛицо.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не найден ["+ФИО+"]";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	
	МаксимальнаяДата = Дата(1,1,1);
	// для 
	СдвигНачалаЗаДень 	= 0;
	ПредыдущаяДата 		= "";
	Для Н = 3 ПО ТаблицаЗагрузки.ВысотаТаблицы Цикл
		// дата 
		Дата = ДатаИзФайлаExcel( ТаблицаЗагрузки.Область(Н,1).Текст);
		Если Дата = Неопределено Тогда Прервать; КонецЕсли;
		МаксимальнаяДата  = Макс( МаксимальнаяДата , Дата);
		
		// продолжительность
		//КоличествоЧасов = ЧасовИзФайлаExcel( ТаблицаЗагрузки.Область(Н,2).Текст );
		
		// 2016 04 05 иначе при присвоении целочисленному полю сбрасывает все меньше 1
		КоличествоЧасов 	= Окр( ЧасовИзФайлаExcel( ТаблицаЗагрузки.Область(Н,2).Текст ), 0, РежимОкругления.Окр15как20);
		Если КоличествоЧасов = 0 Тогда Продолжить; КонецЕсли;
		
		// дата и время есть !!!
		СтрТаб 					= Документ.РабочееВремя.Добавить();
		СтрТаб.ДатаТабеля 		= Дата;
		
		// отметка табеля
		ОтметкаТабеля	= ТаблицаЗагрузки.Область(Н,3).Текст;
		// описание работ
		СтрТаб.ОтметкаТабеля =  ОтметкаТабеляПоПроекту(ОтметкаТабеля, ОтметкаТабеляПоУмолчанию );
		
		// представление проекта = план работ
		стПланРабот		= ПланРаботИзФайлаExcel( ТаблицаЗагрузки.Область(Н,4).Текст, Дата );
		ЗаполнитьЗначенияСвойств( СтрТаб, стПланРабот );
		
		// если в файле загрузки указана норма стоимости ЯВНО, то переписываем 
		НазвТарифнойСтавки = СокрЛП(ТаблицаЗагрузки.Область(Н,7).Текст);
		Если ЗначениеЗаполнено(НазвТарифнойСтавки) Тогда
			СтрТаб.ТарифнаяСтавка   = ЗагрузитьТарифнуюСтавку( Документ.ФизическоеЛицо, Дата, НазвТарифнойСтавки );
		КонецЕсли;
		
		// если указана явно подзадача, то 
		НазвЗадачи = СокрЛП(ТаблицаЗагрузки.Область(Н,6).Текст);
		Если 	ЗначениеЗаполнено( НазвЗадачи ) 
		И 		ЗначениеЗаполнено( СтрТаб.Основание )  
		И 		ТипЗнч(СтрТаб.Основание )=Тип("ДокументСсылка.ПланРабот") Тогда
		
			СтрТаб.Задача = ЗагрузитьЗадачуСтруктурыПроекта( СтрТаб.Основание.ЗадачаПроекта, НазвЗадачи );;
		КонецЕсли;
		
		// начало работы, если дата измененилась, то 9 утра
		Если Дата <>  ПредыдущаяДата Тогда
			ПредыдущаяДата 		= Дата;
			СдвигНачалаЗаДень 	= 0;
		КонецЕсли;
		
		// 
		СтрТаб.Начало					= 9 + СдвигНачалаЗаДень;
		СтрТаб.КоличествоЧасов			= КоличествоЧасов;
		СтрТаб.СодержаниеРабот			= ТаблицаЗагрузки.Область(Н,5).Текст;
		
		// 		
		СдвигНачалаЗаДень 	= СдвигНачалаЗаДень + КоличествоЧасов;
			
		
	КонецЦикла;
	Документ.РабочееВремя.Сортировать("ДатаТабеля,Начало");
	
	//Документ.Дата = МаксимальнаяДата;
	Документ.ПериодРегистрации = НачалоМесяца( МаксимальнаяДата );
	// закрываем
	ЗначениеВРеквизитФормы(Документ, "Объект");
	// меняем подразделение	
	ПриИзмененииФизическогоЛица();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗагрузитьТарифнуюСтавку( ФизическоеЛицо, Дата, НазвТарифнойСтавки )
	Если ЗначениеЗаполнено( НазвТарифнойСтавки ) Тогда
		СпрСс = Справочники.ТарифныеСтавки.НайтиПоНаименованию( НазвТарифнойСтавки, Истина );
		Если НЕ СпрСс.Пустая() Тогда
			Возврат СпрСс;
		Иначе
			Сообщение 		= Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдена тарифная ставка [" + НазвТарифнойСтавки + "] у " + ФизическоеЛицо + " на " + Формат( Дата, "ДЛФ=DD");
			Сообщение.Сообщить();
			
		КонецЕсли;
	КонецЕсли;
	Возврат ТарифнаяСтавкаСотрудника( ФизическоеЛицо, Дата );
			
КонецФункции

&НаСервереБезКонтекста
Функция ТарифнаяСтавкаСотрудника( ФизическоеЛицо, Дата )
	МенЗап = РегистрыСведений.ТарифныеСтавкиФизическихЛиц.ПолучитьПоследнее( Дата, 
			Новый Структура( "ФизическоеЛицо", ФизическоеЛицо ));
	Возврат МенЗап.ТарифнаяСтавка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДатаИзФайлаExcel( ДатаТекст)
	Попытка
		День 	= Число(Лев(ДатаТекст,2));
		Месяц 	= Число(Сред(ДатаТекст,4,2));	 
		Год 	= Число(Сред(ДатаТекст,7,4));	 
		Возврат Дата( Год, Месяц, День );
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Функция ЧасовИзФайлаExcel( ЧасовТекст )
	Если НЕ ЗначениеЗаполнено( ЧасовТекст ) Тогда Возврат 0; КонецЕсли;
	Возврат Число( ЧасовТекст );
		
КонецФункции

// пока по умолчанию
&НаСервереБезКонтекста
Функция ОтметкаТабеляПоПроекту( КодОтметкиТабеля, ОтметкаТабеляПоУмолчанию)
	СпрСс = Справочники.ОтметкиТабеля.НайтиПоКоду( КодОтметкиТабеля );
	Если СпрСс.Пустая() Тогда 
		Возврат ОтметкаТабеляПоУмолчанию;
	КонецЕсли;
	Возврат СпрСс;
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьЗадачуСтруктурыПроекта( ЗадачаПроекта, НазваниеЗадачиСтруктурыПроекта )
	Если ЗначениеЗаполнено( НазваниеЗадачиСтруктурыПроекта ) Тогда
		СпрСс = Справочники.ЗадачиПроектовСтруктура.НайтиПоНаименованию( НазваниеЗадачиСтруктурыПроекта, Истина, , ЗадачаПроекта);
		Если НЕ СпрСс.Пустая() Тогда
			Возврат СпрСс.Ссылка;
		Иначе
			Сообщение 		= Новый СообщениеПользователю;
			Сообщение.Текст = "Не найдена задача " + НазваниеЗадачиСтруктурыПроекта;
			Сообщение.Сообщить();
			
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции


&НаСервереБезКонтекста
Функция ПланРаботИзФайлаExcel( Знач НомерПланаРабот, Дата )
	Возврат УП_ПланыРаботПоПроектам.ПланРаботИзФайлаExcel( НомерПланаРабот, Дата );
КонецФункции


// если подразделение установлен
// то должность в этом подразделениии
&НаСервере
Процедура УстановитьПодразделениДолжность()
	Объект.Организация 		= Объект.ФизическоеЛицо.Организация;
	// на начало месяца
	//тз = УП_КадрыСервер.СотрудникиФизЛица( Объект.ФизическоеЛицо, НачалоМесяца( Объект.Дата ));
	
	// на дату табеля месяца
	тз = УП_КадрыСервер.СотрудникиФизЛица( Объект.ФизическоеЛицо, Объект.Дата);
	
	
	Если тз.Количество() = 0 Тогда
		Объект.Подразделение	= "";
		Объект.Должность		= "";
	Иначе
		СтрПД = тз[0];
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			мСтр = тз.НайтиСтроки( Новый Структура("Подразделение", Объект.Подразделение));
			Если мСтр.Количество() > 0 Тогда 
				СтрПД = мСтр[0];
			КонецЕсли;
		КонецЕсли;
		
		Объект.Подразделение	= СтрПД.Подразделение;
		Объект.Должность		= СтрПД.Должность;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПриИзмененииФизическогоЛица()
	УстановитьПодразделениДолжность();
	//
	ПланыРаботПоИсполнениюЗаполнить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидимостьТарифнойСтавки( Должность )
	Если ЗначениеЗаполнено( Должность ) Тогда 
		Возврат Должность.Производственная;
	Конецесли;
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция ВидимостьНеОперативноеПроведение()
	Возврат  СКД_ПолныеПрава();
КонецФункции

&НаКлиенте
Процедура ВидимостьЭлементов()
	//ЭтаФорма.элементы.РабочееВремяТарифнаяСтавка.Видимость = ВидимостьТарифнойСтавки( Объект.Должность );
//	Этаформа.Элементы.ФормаПровестиНеОперативно.Видимость  = ВидимостьНеОперативноеПроведение();
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	ПриИзмененииФизическогоЛица();
	ВидимостьЭлементов();
КонецПроцедуры

//************************
//  По производственному календарю
// с начала по конец месяца !!!

&НаСервере
Процедура ЗаполнитьПоКалендарюРабочегоВремени()
	
	Календарь 		= СКД_ПроизводственныйКалендарь(); //Справочники.ПроизводственныеКалендари.НайтиПоНаименованию("Российская Федерация");
	Документ 		= РеквизитФормыВЗначение("Объект");
	//
	//НачалоТабеля	= НачалоМесяца( Документ.Дата );
	// 21,11,2014
	НачалоТабеля	= НачалоМесяца( Документ.ПериодРегистрации );
	Сутки			= 24 * 60 * 60;
	ОтметкаТабеля	= Справочники.ОтметкиТабеля.НайтиПоКоду("05");
	
	// загружаем 
	Документ.РабочееВремя.Очистить();
	//Для Н = 1 По День( КонецМесяца( Документ.Дата )) Цикл
	// 21,11,2014
	Для Н = 1 По День( КонецМесяца( Документ.ПериодРегистрации )) Цикл
		Дата 			= НачалоТабеля + (Н-1) * Сутки;
		КоличествоЧасов	= УП_ПланыРаботПоПроектам.КоличествоРабочихЧасовВДне( Дата, Календарь );
		Если КоличествоЧасов <> 0 Тогда
			СтрРабочееВремя 						= Документ.РабочееВремя.Добавить();
			СтрРабочееВремя.ДатаТабеля 				= Дата;
			СтрРабочееВремя.Начало					= 9;
			СтрРабочееВремя.ОтметкаТабеля 			= ОтметкаТабеля;
			СтрРабочееВремя.КоличествоЧасов			= КоличествоЧасов;
		КонецЕсли;			
	КонецЦикла;
	
	// закрываем
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоКРВ( Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоКалендарюРабочегоВремени();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКалендарю(Команда)
	Если Объект.РабочееВремя.Количество() <> 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоКРВ", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "В табель рабочего времени уже внесены данные, очистить их и заполнить по календарю?",
					РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоКалендарюРабочегоВремени();	
	
КонецПроцедуры

//************************************************************
//	заполняем по личному плану сотрудника
//  вариант стираем все

&НаКлиенте
Процедура ЗаполнитьПоЛП( Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоЛичномуПлануФизЛица();
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьЛичномуПлану(Команда)
	Если Объект.ФизическоеЛицо.Пустая() Тогда
		ПоказатьПредупреждение(,"Укажите сотрудника!", 10);
		Возврат;
	КонецЕсли;
	Если Объект.РабочееВремя.Количество() <> 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоЛП", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "В табель рабочего времени уже внесены данные, очистить их и заполнить по личному плану?",РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоЛичномуПлануФизЛица();
	// Вставить содержимое обработчика.   
КонецПроцедуры

// с начала по конец месяца !!!
&НаСервере
Процедура ЗаполнитьПоЛичномуПлануФизЛица()
	//ПланПоДнямНедели = Новый 
	Сутки			= 24 * 60 * 60;
	
	Документ 		= РеквизитФормыВЗначение("Объект");
	//НачалоТабеля	= НачалоМесяца( Документ.Дата );
	// 21,11,20
	НачалоТабеля	= НачалоМесяца( Документ.ПериодРегистрации );
	ЛичныйПлан		= Документ.ФизическоеЛицо.РасписаниеРаботы.Выгрузить();
	
	// загружаем 
	Документ.РабочееВремя.Очистить();
	//Для Н = 1 По День( КонецМесяца( Документ.Дата )) Цикл
	Для Н = 1 По День( КонецМесяца( Документ.ПериодРегистрации )) Цикл
		Дата 		=  НачалоТабеля + (Н-1) * Сутки;
		// 
		ПланНаДень	= ЛичныйПлан.НайтиСтроки( Новый Структура("ДеньНедели", ДеньНедели(Дата)));
		Для Каждого СтрокаПлана Из ПланНаДень Цикл
			СтрРабочееВремя 						= Документ.РабочееВремя.Добавить();
			СтрРабочееВремя.ДатаТабеля 				= Дата;
			ЗаполнитьЗначенияСвойств( СтрРабочееВремя, СтрокаПлана );
		КонецЦикла;
	КонецЦикла;
	
	// закрываем
	ЗначениеВРеквизитФормы(Документ, "Объект");
	
	
КонецПроцедуры


//************************************************************
//	расставить временные отметки одного дня со сдвигом по количеству часов
//

&НаСервере
Процедура РасставитьВремяНачалаСтрокТабеля()
	// открываем
	Документ 		= РеквизитФормыВЗначение("Объект");
	тз = Документ.РабочееВремя.Выгрузить();
	тз.Сортировать("ДатаТабеля,Начало");
	
	ДатаТабеля 	= Дата(1,1,1);
	Начало		= 0;
	
	Для Каждого СтрокаТабеля Из тз Цикл
		Если СтрокаТабеля.ДатаТабеля <> ДатаТабеля Тогда
		// ничего не меняем в первой строке табеля
			ДатаТабеля 		= СтрокаТабеля.ДатаТабеля;
			Начало			= СтрокаТабеля.Начало + СтрокаТабеля.КоличествоЧасов;
		Иначе
			СтрокаТабеля.Начало = Начало;
			Начало				= Начало + СтрокаТабеля.КоличествоЧасов;
		КонецЕсли;
		
	КонецЦикла;
	Документ.РабочееВремя.Загрузить( тз );
	
	// закрываем
	ЗначениеВРеквизитФормы(Документ, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура РасставитьВремя(Команда)
	РасставитьВремяНачалаСтрокТабеля()
КонецПроцедуры

//************************************************************
//	Заполнить по кадровым документам
//

&НаКлиенте
Процедура ЗаполнитьОтпуск(Команда)
	ЗаполнитьОтпускПоКадровымДокументам_НаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаполнитьОтпускПоКадровымДокументам_НаСервере()
	// открываем
	ОтметкаОтпуск	= Справочники.ОтметкиТабеля.НайтиПоКоду("10");
	//НачалоТабеля	= НачалоМесяца( Объект.Дата );
	// 21,11,2014
	НачалоТабеля	= НачалоМесяца( Объект.ПериодРегистрации );
	Сутки			= 24 * 60 * 60;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Подразделение", 	Объект.Подразделение);
	Отбор.Вставить("Должность", 		Объект.Должность);
	Отбор.Вставить("ФизическоеЛицо", 	Объект.ФизическоеЛицо);
	// 
	Для Каждого Стр ИЗ Объект.РабочееВремя Цикл
		СтатусНаДату =  УП_КадрыСервер.СтатусСотрудникаНаДату( Отбор, Стр.ДатаТабеля );
		Если СтатусНаДату = Справочники.СтатусыСотрудников.Отпуск Тогда
			Стр.ОтметкаТабеля 	= ОтметкаОтпуск;
			Стр.Основание 		= "";
			Стр.Задача 			= "";
			Стр.СодержаниеРабот	= "";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// 
&НаСервере
Процедура ЗаполнитьОтпускПоКадровымДокументам_НаСервере()
	
	Документ = РеквизитФормыВЗначение("Объект");
	// открываем
	ОтметкаОтпуск		= Справочники.ОтметкиТабеля.НайтиПоКоду("10");
	ОтметкаБольничный	= Справочники.ОтметкиТабеля.НайтиПоКоду("08");
	//НачалоТабеля	= НачалоМесяца( Объект.Дата );
	// 21,11,2014
	ДатаТабеля		= НачалоМесяца( Объект.ПериодРегистрации );
	КонецТабеля		= КонецМесяца(  Объект.ПериодРегистрации );
	
	Отбор = Новый Структура;
	Отбор.Вставить("Подразделение", 	Объект.Подразделение);
	Отбор.Вставить("Должность", 		Объект.Должность);
	Отбор.Вставить("ФизическоеЛицо", 	Объект.ФизическоеЛицо);
	
	
	Сутки	= 24 * 60 * 60;
	Пока ДатаТабеля <= КонецТабеля Цикл
		СтатусНаДату 	= УП_КадрыСервер.СтатусСотрудникаНаДату( Отбор, ДатаТабеля );
		ВидДня			= УП_КадрыСервер.ПолучитьВидДняНаДату( ДатаТабеля );
		
		Если ВидДня = Неопределено Тогда
			Сообщить("Не заполнен производственный календарь на " +ДатаТабеля,СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
		Если ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник 	Тогда 
		// в праздники ничего не ставим
			ДатаТабеля = ДатаТабеля + Сутки;
			Продолжить;
			
		ИначеЕсли 		СтатусНаДату = Справочники.СтатусыСотрудников.Отпуск 	Тогда
			ОтметкаТабеля = ОтметкаОтпуск;
		ИначеЕсли 	СтатусНаДату = Справочники.СтатусыСотрудников.Больничный	Тогда
			ОтметкаТабеля = ОтметкаБольничный;
		Иначе
		// другие статусы не исправляем
			ДатаТабеля = ДатаТабеля + Сутки;
			Продолжить;
		КонецЕсли;
	
		ОтборРВ = Новый Структура("ДатаТабеля", ДатаТабеля);
		мСтрокТабеля = Документ.РабочееВремя.НайтиСтроки( ОтборРВ );
		
		Если мСтрокТабеля.Количество() = 0 Тогда
			ТекСтрока = Документ.РабочееВремя.Добавить();
			ТекСтрока.ДатаТабеля = ДатаТабеля;
		Иначе
		// строк может быть несколько, пока берем первую
			ТекСтрока = мСтрокТабеля[0];
		КонецЕсли;
		
		ТекСтрока.ОтметкаТабеля 	= ОтметкаТабеля;
		ТекСтрока.Начало			= 9;
		ТекСтрока.КоличествоЧасов	= ОтметкаТабеля.ЧасовПоУмолчанию;
		ТекСтрока.Основание 		= "";
		ТекСтрока.Задача 			= "";
		ТекСтрока.СодержаниеРабот	= "";
		
		// 
		ДатаТабеля = ДатаТабеля + Сутки;


	КонецЦикла;
	
	Документ.РабочееВремя.Сортировать("ДатаТабеля,Начало");
	ЗначениеВРеквизитФормы( Документ, "Объект");
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ВидимостьЭлементов();
КонецПроцедуры


&НаКлиенте
Процедура ДолжностьПриИзменении(Элемент)
	ВидимостьЭлементов();
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлиентРазрешеноИсправлениеТабеля( Дата )
	Возврат УП_КадрыСервер.РазрешеноИсправлениеТабеля( Дата );
КонецФункции


&НаСервереБезКонтекста
Функция РабочееВремя( ОтметкаТабеля)
	Возврат ОтметкаТабеля.РабочееВремя;
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	
	
	Отказ = Истина;
	
//	Если КлиентРазрешеноИсправлениеТабеля( Объект.Дата ) = 0 Тогда
//	21,11,2014
	Если КлиентРазрешеноИсправлениеТабеля( Объект.ПериодРегистрации ) = 0 Тогда
		Сообщить("Табели учета рабочего времени закрыты на " + Объект.ПериодРегистрации );
		Возврат;
	КонецЕсли;  
	
	Если НЕ ЗначениеЗаполнено( Объект.ФизическоеЛицо )	Тогда
		Сообщить("Не выбран сотрудник!");
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено( Объект.Организация )	Тогда
		Сообщить("Не выбрана организация!");
		Возврат;
	КонецЕсли;        
	Если НЕ ЗначениеЗаполнено( Объект.Подразделение)Тогда
		Сообщить("Не указано подразделение!");
		Возврат;
	КонецЕсли;        
	
	Если Объект.РабочееВремя.Количество() = 0 Тогда 
		Сообщить("Не указано содержание табеля!");
		Возврат;
	КонецЕсли;        

	Для Каждого ОтметкаРВ Из Объект.РабочееВремя Цикл
		Если НЕ ЗначениеЗаполнено( ОтметкаРВ.ДатаТабеля ) Тогда 
			Сообщить("Не указана дата в строке " + ОтметкаРВ.НомерСтроки);
			Возврат;
		КонецЕсли;
		
		//Если ОтметкаРВ.ДатаТабеля < НачалоМесяца( Объект.Дата )	Тогда
		// 21,11,2014
		Если ОтметкаРВ.ДатаТабеля < НачалоМесяца( Объект.ПериодРегистрации )	Тогда
			Сообщить("Дата в строке " + ОтметкаРВ.НомерСтроки + " меньше начала месяца табеля");
			Возврат;
		КонецЕсли;
		
		//Если ОтметкаРВ.ДатаТабеля > КонецМесяца( Объект.Дата )	Тогда
		// 21,11,2014
		Если ОтметкаРВ.ДатаТабеля > КонецМесяца( Объект.ПериодРегистрации )	Тогда
			Сообщить("Дата в строке " + ОтметкаРВ.НомерСтроки + " позднее конца месяца табеля");
			Возврат;
		КонецЕсли;
	
		Если НЕ КлиентРазрешеноИсправлениеТабеля( ОтметкаРВ.ДатаТабеля ) 	Тогда
			Сообщить("Табель содержит дату " + ОтметкаРВ.ДатаТабеля + ", на которую исправление закрыто");
			Возврат;
		КонецЕсли;                                       
		
		Если НЕ ЗначениеЗаполнено( ОтметкаРВ.ОтметкаТабеля ) 		Тогда 
			Сообщить("Не указана отметка табеля в строке " + ОтметкаРВ.НомерСтроки );
			Возврат;
		КонецЕсли;                                                 
		
		// просьба Григорьевой 24,10,2014
		Если НЕ РабочееВремя(ОтметкаРВ.ОтметкаТабеля) И  ЗначениеЗаполнено( ОтметкаРВ.Основание ) Тогда
			Сообщить("В строке " + ОтметкаРВ.НомерСтроки + ", " + 
					 "заполнено основание для нерабочего времени");
		КонецЕсли;
				 
		
		Если НЕ ЗначениеЗаполнено( ОтметкаРВ.КоличествоЧасов ) Тогда 
			Сообщить("Не указана продолжительность в строке " + ОтметкаРВ.НомерСтроки );
			Возврат;
		КонецЕсли;                                                                            
		Если НЕ ЗначениеЗаполнено( ОтметкаРВ.Начало ) Тогда 
			Сообщить("Не указано начало отметки в строке " + ОтметкаРВ.НомерСтроки );
			Возврат;
		КонецЕсли;         
		
	КонецЦикла;		
	             
	Отказ = Ложь;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЧасовПоУмолчанию( Отметка) 
	Возврат Отметка.ЧасовПоУмолчанию;
КонецФункции

&НаКлиенте
Процедура РабочееВремяОтметкаТабеляПриИзменении(Элемент)
	Стр = Элементы.РабочееВремя.ТекущиеДанные;
	Стр.КоличествоЧасов =  ЧасовПоУмолчанию( Стр.ОтметкаТабеля); 
	Если Стр.Начало = 0 Тогда
		Стр.Начало = 9;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПланыРаботПоИсполнениюЗаполнить() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПроектовИсполнители.Ссылка КАК ЗадачаПроекта
		|ПОМЕСТИТЬ ВТ_ЗадачиПроектаПоИсполнению
		|ИЗ
		|	Справочник.ЗадачиПроектов.Исполнители КАК ЗадачиПроектовИсполнители
		|ГДЕ
		|	ЗадачиПроектовИсполнители.ФизическоеЛицо = &ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланРабот.Ссылка КАК ПланРабот
		|ПОМЕСТИТЬ ВТ_ПланыРабот
		|ИЗ
		|	ВТ_ЗадачиПроектаПоИсполнению КАК ЗадачиПроектаПоИсполнению
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПланРабот КАК ПланРабот
		|		ПО ЗадачиПроектаПоИсполнению.ЗадачаПроекта = ПланРабот.ЗадачаПроекта
		|ГДЕ
		|	ПланРабот.Проведен
		|	И ПланРабот.ЗадачаПроекта.Владелец.Статус = &Статус
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланРабот.Ссылка
		|ИЗ
		|	Документ.ПланРабот КАК ПланРабот
		|ГДЕ
		|	ПланРабот.Подразделение = &Подразделение
		|	И ПланРабот.Проведен
		|	И ПланРабот.ЗадачаПроекта.Владелец.Статус = &Статус
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ПланыРабот.ПланРабот
		|ИЗ
		|	ВТ_ПланыРабот КАК ВТ_ПланыРабот";

	Запрос.УстановитьПараметр("ФизическоеЛицо", Объект.ФизическоеЛицо );
	Запрос.УстановитьПараметр("Подразделение", 	Объект.Подразделение );
	Запрос.УстановитьПараметр("Статус", 		Перечисления.СтатусыПроектов.ВРаботе );
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПланРабот");

	ПланыРаботПоИсполнению.ЗагрузитьЗначения(Результат);
	
КонецФункции

&НаКлиенте
Процедура РабочееВремяОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПланыРаботПоИсполнениюЗаполнить();
КонецПроцедуры

&НаКлиенте
Процедура РабочееВремяОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Основание  = ЭтаФорма.Элементы.РабочееВремя.ТекущиеДанные.Основание;
	Если ТипЗнч( Основание ) = Тип( "ДокументСсылка.ПланРабот") Тогда
		//
		ПараметрыПР = Новый Структура;
		ПараметрыПР.Вставить("ПланыРабот", 		ПланыРаботПоИсполнению );
		ПараметрыПР.Вставить("Физическоелицо",  Объект.ФизическоеЛицо );
		
		ФормаВыбора 	= ПолучитьФорму( "Документ.ПланРабот.Форма.ФормаВыбораДляТРВ", ПараметрыПР, Элемент );
		ФормаВыбора.Открыть();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РабочееВремяОснованиеПриИзменении(Элемент)
КонецПроцедуры

&НаСервере
Процедура ПровестиНеОперативноНаСервере()
	Попытка
		ЭтаФорма.ИспользоватьРежимПроведения = ИспользованиеРежимаПроведения.Неоперативный;
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение );
		Записать( ПараметрыЗаписи );
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПровестиНеОперативно(Команда)
	
	ПровестиНеОперативноНаСервере();
	Оповестить("Запись_ТабельРабочегоВремени", Объект.Ссылка);
	ЭтаФорма.Закрыть();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииПриИзменении(Элемент)
	Объект.ПериодРегистрации = НачалоМесяца( Объект.ПериодРегистрации );
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Объект.ПериодРегистрации = НачалоМесяца( Объект.Дата );
	УстановитьПодразделениДолжность();
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьРабочееВремяПоКалендарю(Команда)
	ДополнитьРВ_НаСервере();
	// сортируем
	РасставитьВремяНачалаСтрокТабеля();
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ДополнитьРВ_НаСервере()
	Сутки			= 24 * 60 * 60;
	РаботаВОфисе 	= Справочники.ОтметкиТабеля.НайтиПоКоду("05");
	
	Документ 		= РеквизитФормыВЗначение("Объект");
	//Документ 		= Документы.ТабельУчетаРабочегоВремени.СоздатьДокумент();
	тзРабочееВремя 	= Документ.РабочееВремя.Выгрузить();
	
	Д1 = НачалоМесяца( Документ.ПериодРегистрации );
	ОкончаниеТабеля	= КонецМесяца( Д1 );
	Пока Д1 < ОкончаниеТабеля Цикл
		РабочихЧасов = СКД_РабочихЧасовВДне( Д1 );
		Отбор = Новый Структура;
		Отбор.Вставить( "ДатаТабеля", Д1);
		РВзаДень 		= тзРабочееВремя.Скопировать( Отбор );
		ДобавитьЧасов 	= РабочихЧасов - РВзаДень.Итог("КоличествоЧасов");
		Если ДобавитьЧасов > 0 Тогда
			СтрТабеля 					= тзРабочееВремя.Добавить();
			СтрТабеля.ДатаТабеля    	= Д1;
			// если первая запись то 9, иначе в конец дня
			СтрТабеля.Начало	    	= ?(ДобавитьЧасов = РабочихЧасов, 9, 99);
			СтрТабеля.КоличествоЧасов 	= ДобавитьЧасов;
			СтрТабеля.ОтметкаТабеля		= РаботаВОфисе;
		КонецЕсли;
		
		Д1 = Д1 + Сутки;
	КонецЦикла;
	Документ.РабочееВремя.Загрузить( тзРабочееВремя );
	
	ЗначениеВРеквизитФормы( Документ, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	//УстановитьПодразделениДолжность();
	ПланыРаботПоИсполнениюЗаполнить();
КонецПроцедуры
