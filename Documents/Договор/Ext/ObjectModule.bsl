
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	ИсполнительДокумента = ПараметрыСеанса.ТекущийПользователь;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
	И	НЕ ВсеЗадачиВУказанномСтатусе( Перечисления.СтатусыПроектов.ВРаботе, 
										Ссылка.ЗадачиПроекта.Выгрузить(, "ЗадачаПроекта") ) Тогда
		Сообщить("Не все проекты в статусе " + Перечисления.СтатусыПроектов.ВРаботе );
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	//Добавлено 28.04.2018 Гумединым А.Г. по задаче 129402
	//Проверка на возможность проведения документа
	Фиктивный = ЭтотОбъект.Фиктивный;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Фиктивный Тогда
			Сообщить("Проведение фиктивного документа недопустимо");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//////////////////////////////////////////////////////
	
	//Добавлено 15.05.2018 Гумединым А.Г. по задаче 129069
	//Проверка на  равенство сумм по задаче (Сумма по задаче = Сумма отгрузки по задаче = Сумма оплаты по задаче)	
	Для Каждого Элемент Из ЗадачиПроекта Цикл
		СуммаЗадачи = Элемент.Сумма;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ЗадачаПроекта", Элемент.ЗадачаПроекта); 
		ГрафикиОтгрузки = ЭтотОбъект.ЭтапыГрафикаОтгрузки.НайтиСтроки(ПараметрыОтбора);
		ГрафикиОплаты = ЭтотОбъект.ЭтапыГрафикаОплаты.НайтиСтроки(ПараметрыОтбора);
		
		СуммаОплаты = ПолучитьСуммыПоГрафикам(ГрафикиОплаты, Ложь);
		СуммаОтгрузки = ПолучитьСуммыПоГрафикам(ГрафикиОтгрузки, Истина);
		
		Если НЕ (СуммаЗадачи = СуммаОплаты И СуммаОплаты = СуммаОтгрузки) Тогда
			Сообщить("Не совпадают суммы у графиков и Задачи " + Элемент.ЗадачаПроекта);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	//////////////////////////////////////////////////////
	
	//Добавлено 15.05.2018 Гумединым А.Г. по задаче 129069
	//Если установлен признак фиктивного договора, то в Графиках не должно быть 
	//дат ранее начала текущего месяца
	Если ЭтотОбъект.Фиктивный Тогда
		ДатыСоответствуют = ПроверитьДатыГрафиков(ЭтапыГрафикаОтгрузки, Истина);
		ДатыСоответствуют = ПроверитьДатыГрафиков(ЭтапыГрафикаОплаты, Ложь);
		Если Не ДатыСоответствуют Тогда
			Сообщить("У фиктивного договора даты графиков не могут быть раньше начала текущего месяца");
			Отказ = Истина;
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	//////////////////////////////////////////////////////
	
КонецПроцедуры

//Добавлено 15.05.2018 Гумединым А.Г. по задаче 129069
Функция ПолучитьСуммыПоГрафикам(Элементы, ЭтоОтгрузка)
	Сумма = 0;
	Для Каждого Элемент Из Элементы Цикл
		Если ЭтоОтгрузка Тогда
			Сумма = Сумма + Элемент.СуммаОтгрузки;
		Иначе 
			Сумма = Сумма + Элемент.СуммаПлатежа;
		КонецЕсли;
	КонецЦикла;
	Возврат Сумма;
КонецФункции

//Добавлено 15.05.2018 Гумединым А.Г. по задаче 129069
Функция ПроверитьДатыГрафиков(Элементы, ЭтоОтгрузка)
	Ответ = Истина;
	ТекущаяДата = НачалоМесяца(ТекущаяДата());
	Для Каждого Элемент Из Элементы Цикл
		Если ЭтоОтгрузка Тогда
			Если ТекущаяДата > Элемент.ДатаОтгрузки Тогда
				Ответ = Ложь;
			КонецЕсли;	
		Иначе 
			Если ТекущаяДата > Элемент.ДатаПлатежа Тогда
				Ответ = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Ответ
КонецФункции



//
Функция НеПерепроведениеСметЗадач()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СметаДокументы.Документ КАК СметаЗадачи
		|ИЗ
		|	Документ.Смета.Документы КАК СметаДокументы
		|ГДЕ
		|	СметаДокументы.Ссылка.Проведен
		|	И СметаДокументы.Ссылка.Проект = &Проект
		|	И СметаДокументы.Документ.ЗадачаПроекта В(&ЗадачиПроекта)
		|	И СметаДокументы.Документ.Проведен";   // перестраховка

	Запрос.УстановитьПараметр("ЗадачиПроекта", ЗадачиПроекта.ВыгрузитьКолонку("ЗадачаПроекта"));
	Запрос.УстановитьПараметр("Проект", Проект);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// перепроводим смету задачи
		Попытка
			СмЗадачиОб = ВыборкаДетальныеЗаписи.СметаЗадачи.ПолучитьОбъект();
			СмЗадачиОб.Записать( РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный );
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Истина;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Если УП_ПереносДанных.ПроведениеПриПереносе() Тогда
		Возврат;
	КонецЕсли;
	// 2016 11 02
	Если ЗадачиПроекта.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	мК = ЭтапыГрафикаОплаты.ВыгрузитьКолонку( "ПроцентПлатежа");
	
	// график платежа всегда заполнен
	Движения.ОбеспечениеОплата.Записывать = Истина;
	Для Каждого ТекСтрокаЗадачиПроекта Из ЗадачиПроекта Цикл
		//
		мСумм 	= РаспределитьПропорционально( ТекСтрокаЗадачиПроекта.Сумма, мК, 2 );
		Индекс 	= 0;
		Для Каждого Сумма ИЗ мСумм Цикл
			ЭтапОплаты				= ЭтапыГрафикаОплаты[Индекс];
			Индекс	= Индекс + 1;
			
			Движение 					= Движения.ОбеспечениеОплата.Добавить();
			Движение.Период 			= Дата;
			Движение.ЗадачаПроекта 		= ТекСтрокаЗадачиПроекта.ЗадачаПроекта;
			Движение.Договор 			= Ссылка;
			Движение.Месяц 				= НачалоМесяца( ЭтапОплаты.ДатаПлатежа );
			//
			Движение.СуммаОбеспечено	= Сумма;
		КонецЦикла;
	КонецЦикла;
	
	Движения.Записать();
	
	// если неполучилось перепровести смету задачи проекта
 	Отказ = НеПерепроведениеСметЗадач();
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	Если Не Проведен Тогда
	// т.е отмена проведения 
		Отказ = НеПерепроведениеСметЗадач();
	КонецЕсли;
	
	
КонецПроцедуры

