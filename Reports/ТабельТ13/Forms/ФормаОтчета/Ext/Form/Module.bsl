&НаСервере
Функция ПолучитьМакетНаСервере( НазваниеМакета )
    ЭтотОбъект 	= РеквизитФормыВЗначение("Отчет");
    Макет 		= ЭтотОбъект.ПолучитьМакет(НазваниеМакета); 
    Возврат Макет;
КонецФункции

&НаСервере
Функция ЗаполнитьСписокСотрудников( )
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабельУчетаРабочегоВремени.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТабельУчетаРабочегоВремени.Должность КАК Должность
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремени КАК ТабельУчетаРабочегоВремени
		|ГДЕ
		|	ТабельУчетаРабочегоВремени.Ссылка.Проведен
		|	И ТабельУчетаРабочегоВремени.ПериодРегистрации МЕЖДУ &НачДата И &КонДата
		|	И (&ВсеОрганизации
		|			ИЛИ ТабельУчетаРабочегоВремени.Организация = &Организация)
		|	И (&ВсеПодразделения
		|			ИЛИ ТабельУчетаРабочегоВремени.Подразделение = &Подразделение)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабельУчетаРабочегоВремени.Должность,
		|	ТабельУчетаРабочегоВремени.ФизическоеЛицо";
		
	Запрос.УстановитьПараметр("НачДата", 			НачалоМесяца( Месяц.Дата ));
	Запрос.УстановитьПараметр("КонДата", 			КонецМесяца(Месяц.Дата ));
	Запрос.УстановитьПараметр("Подразделение", 		Подразделение );
	Запрос.УстановитьПараметр("ВсеПодразделения", 	НЕ ЗначениеЗаполнено( Подразделение ));
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("ВсеОрганизации", 	НЕ ЗначениеЗаполнено( Организация ));

	Результат = Запрос.Выполнить().Выгрузить();
	СписокСотрудников.Очистить();
	Для Каждого Стр ИЗ Результат Цикл
		
		СписокСотрудников.Добавить( Стр.ФизическоеЛицо, "" + Стр.ФизическоеЛицо + ", " + Стр.Должность, Истина);
	КонецЦикла;
	//СписокСотрудников.ЗагрузитьЗначения( Результат.ВыгрузитьКолонку( "ФизическоеЛицо" ));
	//
	//СписокСотрудников.ЗаполнитьПометки(Истина);

КонецФункции


&НаСервере
Функция УстСформироватьЗапросПоТабелю( ПараметрыПечати )
	МесяцТабеля = ПараметрыПечати.Месяц;
	
	мФизическихЛиц = Новый Массив;
	Если ПараметрыПечати.Свойство("ФизическоеЛицо") Тогда
		мФизическихЛиц.Добавить( ПараметрыПечати.ФизическоеЛицо);
	Иначе
		Для Каждого Эл ИЗ СписокСотрудников Цикл
			Если Эл.Пометка Тогда
				мФизическихЛиц.Добавить( Эл.Значение );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.ФизическоеЛицо,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Должность,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ДатаТабеля,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ОтметкаТабеля,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ОтметкаТабеля.РабочееВремя КАК РабочееВремя,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ОтметкаТабеля.РабочееВремяТ13 КАК РабочееВремяТ13,
		|	СУММА(ТабельУчетаРабочегоВремениРабочееВремя.КоличествоЧасов) КАК КоличествоЧасов,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Подразделение
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремени.РабочееВремя КАК ТабельУчетаРабочегоВремениРабочееВремя
		|ГДЕ
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Проведен
		|	И ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.ПериодРегистрации МЕЖДУ &НачДата И &КонДата
		|	И ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.ФизическоеЛицо В(&мФизическихЛиц)
		//|	И ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Подразделение В ИЕРАРХИИ(&Подразделение)
		|	И ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Подразделение В(&Подразделение)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.ФизическоеЛицо,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Должность,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ОтметкаТабеля,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ДатаТабеля,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ОтметкаТабеля.РабочееВремя,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ОтметкаТабеля.РабочееВремяТ13,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Подразделение";

		
	Запрос.УстановитьПараметр("мФизическихЛиц", мФизическихЛиц );
	Запрос.УстановитьПараметр("Подразделение", 	ПараметрыПечати.Подразделение );
	Запрос.УстановитьПараметр("НачДата", 		НачалоМесяца( МесяцТабеля ));
	Запрос.УстановитьПараметр("КонДата", 		КонецМесяца( МесяцТабеля));

	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;

КонецФункции

&НаСервере
Функция СформироватьЗапросПоТабелю( ПараметрыПечати )
	МесяцТабеля = ПараметрыПечати.Месяц;
	
	мФизическихЛиц = Новый Массив;
	Если ПараметрыПечати.Свойство("ФизическоеЛицо") Тогда
		мФизическихЛиц.Добавить( ПараметрыПечати.ФизическоеЛицо);
	Иначе
		Для Каждого Эл ИЗ СписокСотрудников Цикл
			Если Эл.Пометка Тогда
				мФизическихЛиц.Добавить( Эл.Значение );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.ФизическоеЛицо,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Должность,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ДатаТабеля,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ОтметкаТабеля,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ОтметкаТабеля.РабочееВремя КАК РабочееВремя,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ОтметкаТабеля.РабочееВремяТ13 КАК РабочееВремяТ13,
		|	СУММА(ТабельУчетаРабочегоВремениРабочееВремя.КоличествоЧасов) КАК КоличествоЧасов,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Подразделение,
		|	ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ВидДня, &ВидДня) КАК ВидДня
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремени.РабочееВремя КАК ТабельУчетаРабочегоВремениРабочееВремя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО ТабельУчетаРабочегоВремениРабочееВремя.ДатаТабеля = ДанныеПроизводственногоКалендаря.Дата
		|ГДЕ
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Проведен
		|	И ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.ПериодРегистрации МЕЖДУ &НачДата И &КонДата
		|	И ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.ФизическоеЛицо В(&мФизическихЛиц)
		|	И ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Подразделение В(&Подразделение)
		|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.ФизическоеЛицо,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Должность,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ОтметкаТабеля,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ДатаТабеля,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ОтметкаТабеля.РабочееВремя,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ОтметкаТабеля.РабочееВремяТ13,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Подразделение,
		|	ЕСТЬNULL(ДанныеПроизводственногоКалендаря.ВидДня, &ВидДня)";

		
	Запрос.УстановитьПараметр("мФизическихЛиц", мФизическихЛиц );
	Запрос.УстановитьПараметр("Подразделение", 	ПараметрыПечати.Подразделение );
	Запрос.УстановитьПараметр("НачДата", 		НачалоМесяца( МесяцТабеля ));
	Запрос.УстановитьПараметр("КонДата", 		КонецМесяца( МесяцТабеля));
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", 		СКД_ПроизводственныйКалендарь());
	Запрос.УстановитьПараметр("ВидДня", 						Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий );

	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;

КонецФункции


//*******************************************     
//	Если в течение дня есть рабочие часы, то выводится не более 8 часов
//	Иначе, если есть не рабочие, то выводится их сумма с первой пометкой
&НаСервереБезКонтекста
Функция УстОтбработатьТабельТ13( РезультатПоСотруднику )
	
	ТЗс = Новый ТаблицаЗначений;
	ТЗс.Колонки.Добавить("ДатаТабеля");
	ТЗс.Колонки.Добавить("РабочееВремя", 	Новый ОписаниеТипов("Число"));
	ТЗс.Колонки.Добавить("НеРабочееВремя",	Новый ОписаниеТипов("Число"));
	ТЗс.Колонки.Добавить("Компенсировано",	Новый ОписаниеТипов("Число"));
	ТЗс.Колонки.Добавить("ОтметкаНеРВ",     Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(2)));

	Для Каждого СтрСотр Из РезультатПоСотруднику Цикл
		СтрДатыТабеля = ТЗс.Найти( СтрСотр.ДатаТабеля, "ДатаТабеля" );
		Если СтрДатыТабеля = Неопределено Тогда
			СтрДатыТабеля 			 = ТЗс.Добавить();
			СтрДатыТабеля.ДатаТабеля = СтрСотр.ДатаТабеля;
		КонецЕсли;
		
		Если СтрСотр.РабочееВремя Тогда           
		// рабочее время 		
			СтрДатыТабеля.РабочееВремя = СтрДатыТабеля.РабочееВремя	+ СтрСотр.КоличествоЧасов;
		Иначе			
		// не рабочее время                      
			Если СтрСотр.РабочееВремяТ13  Тогда
			// отражается как рабочее время				
				СтрДатыТабеля.Компенсировано = СтрДатыТабеля.Компенсировано	+ СтрСотр.КоличествоЧасов;
			Иначе
			// отражается как нерабочее по первой отметке
				Если НЕ ЗначениеЗаполнено( СтрДатыТабеля.ОтметкаНеРВ ) Тогда
					СтрДатыТабеля.ОтметкаНеРВ = СтрСотр.ОтметкаТабеля.ОтметкаТ13;
				КонецЕсли;                           
				СтрДатыТабеля.НеРабочееВремя = СтрДатыТабеля.НеРабочееВремя + СтрСотр.КоличествоЧасов;
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;       
	
	КолСверхурочных		= 0;
	КолКомпенсировано	= 0;
	// 
	Для Каждого СтрДТ ИЗ ТЗс Цикл
		// в указанный день 
		РабочихЧасовПоКалендарю = УП_ПланыРаботПоПроектам.КоличествоРабочихЧасовВДне( СтрДТ.ДатаТабеля );
		Если СтрДТ.Компенсировано <> 0 Тогда
			КолКомпенсировано 	= КолКомпенсировано 	+ СтрДТ.Компенсировано;
			// переносим в рабочее время 
			СтрДТ.РабочееВремя 	= СтрДТ.РабочееВремя	+ СтрДТ.Компенсировано; 
		КонецЕсли;
		
        // затем обрезаем разрешенными количеством рабочего времени
		Если СтрДТ.РабочееВремя > РабочихЧасовПоКалендарю Тогда
			Сверхурочно		 	= СтрДТ.РабочееВремя - РабочихЧасовПоКалендарю;
			КолСверхурочных	 	= КолСверхурочных + Сверхурочно;
			СтрДТ.РабочееВремя 	= РабочихЧасовПоКалендарю; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗс;                                                  
КонецФункции


// в результате по сотруднику на одну дату может быть несколько записей
&НаСервереБезКонтекста
Функция ОбработатьТабельТ13( РезультатПоСотруднику )
	
	ТЗс = Новый ТаблицаЗначений;
	ТЗс.Колонки.Добавить("ДатаТабеля");
	ТЗс.Колонки.Добавить("ВидДня" );
	ТЗс.Колонки.Добавить("РабочееВремя", 	Новый ОписаниеТипов("Число"));
	ТЗс.Колонки.Добавить("НеРабочееВремя",	Новый ОписаниеТипов("Число"));
	ТЗс.Колонки.Добавить("Компенсировано",	Новый ОписаниеТипов("Число"));
	ТЗс.Колонки.Добавить("ОтметкаНеРВ",     Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(2)));
	// чтобы два раза не считать
	ТЗс.Колонки.Добавить("ОтметкаТ13",     	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(2)));

	Для Каждого СтрСотр Из РезультатПоСотруднику Цикл
		СтрДатыТабеля = ТЗс.Найти( СтрСотр.ДатаТабеля, "ДатаТабеля" );
		Если СтрДатыТабеля = Неопределено Тогда
			СтрДатыТабеля 			 = ТЗс.Добавить();
			СтрДатыТабеля.ДатаТабеля = СтрСотр.ДатаТабеля;
			СтрДатыТабеля.ВидДня 	 = СтрСотр.ВидДня;
		КонецЕсли;
		
		// праздники 
		Если 		СтрСотр.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
			СтрДатыТабеля.ОтметкаТ13 		= "В";  // отметка воскресенья
			СтрДатыТабеля.Компенсировано 	= СтрДатыТабеля.Компенсировано	+ СтрСотр.КоличествоЧасов;
			
		// рабочие дни
		ИначеЕсли	СтрСотр.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий
		или			СтрСотр.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
					
			// отметку из справочника
			СтрДатыТабеля.ОтметкаТ13 =	СтрСотр.ОтметкаТабеля.ОтметкаТ13;
			
			Если СтрСотр.РабочееВремя Тогда           
			// у отметки табеля установлен признак рабочего времени
				СтрДатыТабеля.РабочееВремя = СтрДатыТабеля.РабочееВремя	+ СтрСотр.КоличествоЧасов;
				
			Иначе
			// записываем неявку
				СтрДатыТабеля.ОтметкаНеРВ = СтрСотр.ОтметкаТабеля.ОтметкаТ13;
				СтрДатыТабеля.НеРабочееВремя = СтрДатыТабеля.НеРабочееВремя + СтрСотр.КоличествоЧасов;
				
			КонецЕсли;
			
		Иначе // суббота, воскресенье
			// у отметки табеля установлен признак рабочего времени
			Если НЕ СтрСотр.РабочееВремя Тогда           
				// устанавливаем отметку неявки на выходных
				СтрДатыТабеля.ОтметкаТ13 =	СтрСотр.ОтметкаТабеля.ОтметкаТ13;
			КонецЕсли;
					
			СтрДатыТабеля.Компенсировано = СтрДатыТабеля.Компенсировано	+ СтрСотр.КоличествоЧасов;
		КонецЕсли;			
		
	КонецЦикла;       
	
	КолСверхурочных		= 0;
	КолКомпенсировано	= 0;
	// 
	Для Каждого СтрДТ ИЗ ТЗс Цикл
		// в указанный день 
		РабочихЧасовПоКалендарю = УП_ПланыРаботПоПроектам.КоличествоРабочихЧасовВДне( СтрДТ.ДатаТабеля );
		Если СтрДТ.Компенсировано <> 0 Тогда
			КолКомпенсировано 	= КолКомпенсировано 	+ СтрДТ.Компенсировано;
			// переносим в рабочее время 
			СтрДТ.РабочееВремя 	= СтрДТ.РабочееВремя	+ СтрДТ.Компенсировано; 
		КонецЕсли;
		
        // затем обрезаем разрешенными количеством рабочего времени
		Если СтрДТ.РабочееВремя > РабочихЧасовПоКалендарю Тогда
			Сверхурочно		 	= СтрДТ.РабочееВремя - РабочихЧасовПоКалендарю;
			КолСверхурочных	 	= КолСверхурочных + Сверхурочно;
			СтрДТ.РабочееВремя 	= РабочихЧасовПоКалендарю; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗс;                                                  
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьВНеявки( Отм, НеРабочееВремя, тзНеявки )						
	стрНеявки = тзНеявки.Найти( Отм, "ОтметкаНеявки" );
	Если стрНеявки = Неопределено Тогда
		стрНеявки = тзНеявки.Добавить();
		стрНеявки.ОтметкаНеявки = Отм;
	КонецЕсли;
	стрНеявки.НеявкиДней	= стрНеявки.НеявкиДней	+ 1;
	стрНеявки.НеявкиЧасов	= стрНеявки.НеявкиЧасов + МИН( 8, НеРабочееВремя );
КонецПроцедуры


&НаСервереБезКонтекста
Процедура УстВывестиСекциюРаботник( ТабДок, ОбластьСотр, Сотрудник, РезультатПоСотруднику, ДатаНач, ДатаКон  )
	
	// результат по сотруднику подготовленный для печати табеля
	тзСотрудник = ОбработатьТабельТ13( РезультатПоСотруднику );
	//
	Сутки = 24*60*60;
	ДниПерваяПоловина 	= 0; 
	ЧасыПерваяПоловина	= 0;
	ДниВтораяПоловина	= 0;  
	ЧасыВтораяПоловина	= 0;  
	ДниЗаМесяц			= 0;      
	ЧасыЗаМесяц			= 0;      
	
	// список неявок по причинам
	тзНеявки	= Новый ТаблицаЗначений;
	тзНеявки.Колонки.Добавить("ОтметкаНеявки", 	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(2)));
	тзНеявки.Колонки.Добавить("НеявкиДней", 	Новый ОписаниеТипов("Число"));
	тзНеявки.Колонки.Добавить("НеявкиЧасов", 	Новый ОписаниеТипов("Число"));
	
	Для Н = 1 ПО 31 Цикл
		ТекДата = ДатаНач + Сутки * (Н-1); // текущая дата
		Если ТекДата <= ДатаКон Тогда
			РабочихЧасовПоКалендарю = УП_ПланыРаботПоПроектам.КоличествоРабочихЧасовВДне( ТекДата );
			ВидДня = УП_КадрыСервер.ПолучитьВидДняНаДату( ТекДата );
			// 
			СтрТабеля  = тзСотрудник.Найти( ТекДата, "ДатаТабеля");
			Если СтрТабеля <> Неопределено  Тогда
				Если СтрТабеля.РабочееВремя <> 0 Тогда
				// день отмечен отметкой рабочего времени 
					КолЧ 	= МИН( РабочихЧасовПоКалендарю, СтрТабеля.РабочееВремя );
					КолД 	= 1;
					Отм		= ?(РабочихЧасовПоКалендарю = 0, "РВ", "Я" );
				Иначе
				// отметка не рабочего дня
					КолЧ	= 0;
					КолД	= 0;
					Если РабочихЧасовПоКалендарю = 0 Тогда
						Отм	 = "В";
					Иначе						
						// 
						Отм	 = СтрТабеля.ОтметкаНеРВ; 
						ДобавитьВНеявки( Отм, СтрТабеля.НеРабочееВремя, тзНеявки );
						
					КонецЕсли;						
				КонецЕсли;	
			Иначе
			// нет отметок за данный день
				// нет отметок в табеле
				Если ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье 
				или	 ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота
				или	 ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник 	Тогда
					//Отм	 	= ?(РабочихЧасовПоКалендарю = 0, "В", "" );
					Отм	 	= "В";
					КолЧ	= 0;   
					КолД	= 0;
					
				Иначе // неявка
					//Отм	 	= "НН";
					КолЧ	= 0;   
					КолД	= 0;
				КонецЕсли;
				
			КонецЕсли;		
			
			
			// половины
			Если Н <= 15 Тогда
				ДниПерваяПоловина 	= ДниПерваяПоловина + КолД; 
				ЧасыПерваяПоловина	= ЧасыПерваяПоловина+ КолЧ;
			Иначе
				ДниВтораяПоловина	= ДниВтораяПоловина + КолД;  
				ЧасыВтораяПоловина	= ЧасыВтораяПоловина+ КолЧ;  
			КонецЕсли;
			
			ДниЗаМесяц			= ДниЗаМесяц + КолД;      
			ЧасыЗаМесяц			= ЧасыЗаМесяц+ КолЧ;      
				
			ОбластьСотр.Параметры["Символ" + Н]  = Отм;
			ОбластьСотр.Параметры["ДопЗн"  + Н]  = Формат( КолЧ, "Ч02.0");
		Иначе     
			ОбластьСотр.Параметры["Символ" + Н]  = "";
			ОбластьСотр.Параметры["ДопЗн"  + Н]  = "";
		КонецЕсли;
	КонецЦикла;
	//
	ОбластьСотр.Параметры.ДниПерваяПоловина 	= ДниПерваяПоловина;
	ОбластьСотр.Параметры.ЧасыПерваяПоловина	= ЧасыПерваяПоловина;
	ОбластьСотр.Параметры.ДниВтораяПоловина 	= ДниВтораяПоловина;
	ОбластьСотр.Параметры.ЧасыВтораяПоловина	= ЧасыВтораяПоловина;
	ОбластьСотр.Параметры.ДниЗаМесяц 			= ДниЗаМесяц;
	ОбластьСотр.Параметры.ЧасыЗаМесяц			= ЧасыЗаМесяц;
	
	// для неявок                             
	Для Н = 1 ПО 8 Цикл
		Если Н <= тзНеявки.Количество()		Тогда
			ОбластьСотр.Параметры["НеявкаКод" 		+ Н]	= тзНеявки[Н-1].ОтметкаНеявки;
			ОбластьСотр.Параметры["НеявкаДниЧасы" 	+ Н]	= "" + тзНеявки[Н-1].НеявкиДней + "(" + тзНеявки[Н-1].НеявкиЧасов + ")";
		Иначе
			ОбластьСотр.Параметры["НеявкаКод" 		+ Н]	= "";
			ОбластьСотр.Параметры["НеявкаДниЧасы" 	+ Н]	= "";
		
		КонецЕсли;			
	КонецЦикла;
	ТабДок.Вывести(ОбластьСотр);
	
		
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ВывестиСекциюРаботник( ТабДок, ОбластьСотр, Сотрудник, РезультатПоСотруднику, ДатаНач, ДатаКон  )
	
	// результат по сотруднику подготовленный для печати табеля
	тзСотрудник = ОбработатьТабельТ13( РезультатПоСотруднику );
	//
	Сутки = 24*60*60;
	ДниПерваяПоловина 	= 0; 
	ЧасыПерваяПоловина	= 0;
	ДниВтораяПоловина	= 0;  
	ЧасыВтораяПоловина	= 0;  
	ДниЗаМесяц			= 0;      
	ЧасыЗаМесяц			= 0;      
	
	// список неявок по причинам
	тзНеявки	= Новый ТаблицаЗначений;
	тзНеявки.Колонки.Добавить("ОтметкаНеявки", 	Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(2)));
	тзНеявки.Колонки.Добавить("НеявкиДней", 	Новый ОписаниеТипов("Число"));
	тзНеявки.Колонки.Добавить("НеявкиЧасов", 	Новый ОписаниеТипов("Число"));
	
	Для Н = 1 ПО 31 Цикл
		ТекДата = ДатаНач + Сутки * (Н-1); // текущая дата
		Если ТекДата <= ДатаКон Тогда
			// из производственного календаря 7 - для предпраздничных, 8 -для рабочих, 0 -  для остальных
			РабочихЧасовПоКалендарю = УП_ПланыРаботПоПроектам.КоличествоРабочихЧасовВДне( ТекДата );
			ВидДня = УП_КадрыСервер.ПолучитьВидДняНаДату( ТекДата );
			// 
			СтрТабеля  = тзСотрудник.Найти( ТекДата, "ДатаТабеля");
			Если СтрТабеля = Неопределено  Тогда
			// в табеле нет строки на текущую дату
				Если 	ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник
				или		ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота
				или 	ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье Тогда
						Отм	 	= "В";
						КолЧ	= 0;   
						КолД	= 0;
				Иначе		// рабочий, предпраздничный
						//Отм	 	= "НН";
						//ДобавитьВНеявки( Отм, РабочихЧасовПоКалендарю, тзНеявки );
						//
						//КолЧ	= РабочихЧасовПоКалендарю;   
						//КолД	= 1;
						Отм	 	= "";
						КолЧ	= 0;   
						КолД	= 0;
						
				КонецЕсли
			Иначе
			// в табеле есть строка на дату
				Если 		ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник 	Тогда
						Отм	 	= "В";
						КолЧ	= 0;   
						КолД	= 0;
				
				ИначеЕсли 	ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота
				или 		ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье Тогда
					//Если СтрТабеля.РабочееВремя = 0 Тогда
					//// отпуск, больничный, отметку ставим, в неявки не записываем
					//	Отм	 	= СтрТабеля.ОтметкаТ13;
					//Иначе
					//	Отм	 	= "В";
					//КонецЕсли;
					
					// 2017 04 28
					Отм     = ?(ЗначениеЗаполнено( СтрТабеля.ОтметкаТ13), СтрТабеля.ОтметкаТ13, "В");
					КолЧ	= 0;   
					КолД	= 0;
				Иначе 
				// рабочий, предпраздничный 
			
					Если СтрТабеля.РабочееВремя <> 0 Тогда
					// день отмечен отметкой рабочего времени 
						КолЧ 	= МИН( РабочихЧасовПоКалендарю, СтрТабеля.РабочееВремя );
						КолД 	= 1;
						//Отм		= ?(РабочихЧасовПоКалендарю = 0, "РВ", "Я" );
						Отм		= "Я";
					Иначе
					// отметка не рабочего дня
						КолЧ	= 0;
						КолД	= 0;
						Отм	 = СтрТабеля.ОтметкаНеРВ; 
						ДобавитьВНеявки( Отм, СтрТабеля.НеРабочееВремя, тзНеявки );
							
					КонецЕсли;	
					
				КонецЕсли;
			
			
			КонецЕсли;
			
			// половины
			Если Н <= 15 Тогда
				ДниПерваяПоловина 	= ДниПерваяПоловина + КолД; 
				ЧасыПерваяПоловина	= ЧасыПерваяПоловина+ КолЧ;
			Иначе
				ДниВтораяПоловина	= ДниВтораяПоловина + КолД;  
				ЧасыВтораяПоловина	= ЧасыВтораяПоловина+ КолЧ;  
			КонецЕсли;
			
			ДниЗаМесяц			= ДниЗаМесяц + КолД;      
			ЧасыЗаМесяц			= ЧасыЗаМесяц+ КолЧ;      
				
			ОбластьСотр.Параметры["Символ" + Н]  = Отм;
			ОбластьСотр.Параметры["ДопЗн"  + Н]  = Формат( КолЧ, "Ч02.0");
		Иначе     
			ОбластьСотр.Параметры["Символ" + Н]  = "";
			ОбластьСотр.Параметры["ДопЗн"  + Н]  = "";
		КонецЕсли;
	КонецЦикла;
	//
	ОбластьСотр.Параметры.ДниПерваяПоловина 	= ДниПерваяПоловина;
	ОбластьСотр.Параметры.ЧасыПерваяПоловина	= ЧасыПерваяПоловина;
	ОбластьСотр.Параметры.ДниВтораяПоловина 	= ДниВтораяПоловина;
	ОбластьСотр.Параметры.ЧасыВтораяПоловина	= ЧасыВтораяПоловина;
	ОбластьСотр.Параметры.ДниЗаМесяц 			= ДниЗаМесяц;
	ОбластьСотр.Параметры.ЧасыЗаМесяц			= ЧасыЗаМесяц;
	
	// для неявок                             
	Для Н = 1 ПО 8 Цикл
		Если Н <= тзНеявки.Количество()		Тогда
			ОбластьСотр.Параметры["НеявкаКод" 		+ Н]	= тзНеявки[Н-1].ОтметкаНеявки;
			ОбластьСотр.Параметры["НеявкаДниЧасы" 	+ Н]	= "" + тзНеявки[Н-1].НеявкиДней + "(" + тзНеявки[Н-1].НеявкиЧасов + ")";
		Иначе
			ОбластьСотр.Параметры["НеявкаКод" 		+ Н]	= "";
			ОбластьСотр.Параметры["НеявкаДниЧасы" 	+ Н]	= "";
		
		КонецЕсли;			
	КонецЦикла;
	ТабДок.Вывести(ОбластьСотр);
	
		
КонецПроцедуры


//*******************************************************************************
// формирует документ
// ФизическиеЛица - массив физ лиц, если неопределен, заполняется по форме
Процедура ПечатьТ13( ТабДок, ПараметрыПечати )
	Макет		= Отчеты.ТабельТ13.ПолучитьМакет( "Т13" );
	ДатаНач		= НачалоМесяца(ПараметрыПечати.Месяц);
	ДатаКон		= КонецМесяца(ПараметрыПечати.Месяц);
	
	ОбластьШ	= Макет.ПолучитьОбласть("Шапка");
	ОбластьШ.Параметры.Организация 		= ПараметрыПечати.Организация;
	ОбластьШ.Параметры.Подразделение	= ПараметрыПечати.Подразделение;
	ОбластьШ.Параметры.ДатаЗаполнения	= Формат( ТекущаяДата(), 		"ДЛФ=D");
	ОбластьШ.Параметры.ДатаНач			= ДатаНач;
	ОбластьШ.Параметры.ДатаКон			= ДатаКон;
	ТабДок.Вывести(ОбластьШ);
	// колонтитул выводим пока 1 раз
	ОбластьК	= Макет.ПолучитьОбласть("Колонтитул");
	ТабДок.Вывести(ОбластьК);
	
	// список сотрудников
	Результат 	= СформироватьЗапросПоТабелю(ПараметрыПечати );
	тзСотр 		= Результат.Скопировать(,"ФизическоеЛицо,Подразделение,Должность");
	тзСотр.Свернуть("ФизическоеЛицо,Подразделение,Должность", "");
	тзСотр.Сортировать("ФизическоеЛицо,Подразделение,Должность");
	
	// три уровня
	Для Каждого СтрСотр ИЗ тзСотр Цикл
		Сотрудник = СтрСотр.ФизическоеЛицо;
		// 
		ОбластьС						= Макет.ПолучитьОбласть("Сотрудник");
		ОбластьС.Параметры.НомерПП 		= тзСотр.Индекс( СтрСотр ) + 1;
		ОбластьС.Параметры.Сотрудник	= СокрЛП(Сотрудник) + Символы.ПС + СокрЛП( Сотрудник.Организация);
		//ОбластьС.Параметры.Сотрудник	= СокрЛП(Сотрудник) + Символы.ПС + СокрЛП(СтрСотр.Должность);
											//+ Символы.ПС + СокрЛП(Сотрудник.Организация);
		//
		Отбор = Новый Структура;
		Отбор.Вставить("ФизическоеЛицо", 	Сотрудник);
		Отбор.Вставить("Подразделение", 	СтрСотр.Подразделение);
		Отбор.Вставить("Должность", 		СтрСотр.Должность);
		РезультатПоСотруднику = Результат.Скопировать(Отбор);
		ВывестиСекциюРаботник( ТабДок, ОбластьС, Сотрудник, РезультатПоСотруднику, ДатаНач, ДатаКон );
		//ТабДок.Вывести(ОбластьС);
	КонецЦикла;
	
	
	// подписи
	ОбластьП	= Макет.ПолучитьОбласть("Подвал");
	ОбластьП.Параметры.ДолжностьОтветственного	= "";
	ОбластьП.Параметры.ФИООтветственного		= "";
	сРП = УП_КадрыСервер.РуководительПодразделения( ПараметрыПечати.Подразделение,  ДатаКон);
	Если сРП <> Неопределено Тогда
		ОбластьП.Параметры.ДолжностьРуководителя	= сРП.Должность;
		ОбластьП.Параметры.ФИОРуководителя			= сРП.Руководитель;
		
	КонецЕсли;
	ОбластьП.Параметры.ДолжностьКадровика		= "Руководитель кадровой службы";
	ОбластьП.Параметры.ФИОКадровика				= "";
	
	ТабДок.Вывести(ОбластьП);
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПараметрыПоТабелюРабочегоВремени( ТабельРВ )
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Месяц", 			ТабельРВ.ПериодРегистрации );
	ПараметрыПечати.Вставить("Подразделение", 	ТабельРВ.Подразделение );
	//ПараметрыПечати.Вставить("Должность", 		ТабельРВ.Должность );
	ПараметрыПечати.Вставить("Организация", 	ТабельРВ.Организация );
	ПараметрыПечати.Вставить("ФизическоеЛицо", 	ТабельРВ.ФизическоеЛицо );
	Возврат ПараметрыПечати;
КонецФункции

&НаКлиенте
Процедура Сформировать(Команда)
		
	ТабДок = Новый ТабличныйДокумент;
	// 
	
	Если ОтчетПоТабелю() Тогда
		ПараметрыПечати = ПараметрыПоТабелюРабочегоВремени( ТабельРабочегоВремени );
		ПечатьТ13( ТабДок, ПараметрыПечати );
	Иначе
		
		ПараметрыПечати = Новый Структура;
		ПараметрыПечати.Вставить("Месяц", Месяц.Дата );
		ПараметрыПечати.Вставить("Подразделение", 	Подразделение );
		ПараметрыПечати.Вставить("Организация", 	Организация );
		
		ПечатьТ13( ТабДок, ПараметрыПечати );
	КонецЕсли;
		
	ТабДок.ОтображатьСетку = Ложь;
	//ТабДок.Защита = Истина;
	ТабДок.ТолькоПросмотр 			= Истина;
	ТабДок.АвтоМасштаб				= Истина;
	ТабДок.ОриентацияСтраницы		= ОриентацияСтраницы.Ландшафт;
	ТабДок.ПовторятьПриПечатиСтроки = ТабДок.Область("Колонтитул");
	ТабДок.ОтображатьЗаголовки 		= Ложь;
	ТабДок.Показать();
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьФлажки(Команда)
	СписокСотрудников.ЗаполнитьПометки( Истина );
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	СписокСотрудников.ЗаполнитьПометки( Ложь );
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ЗаполнитьСписокСотрудников();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ЗаполнитьСписокСотрудников( );
КонецПроцедуры

&НаКлиенте
Процедура МесяцПриИзменении(Элемент)
	ЗаполнитьСписокСотрудников( );
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
	Если НЕ ОтчетПоТабелю() Тогда
		ЗаполнитьСписокСотрудников( );
	Иначе
		Сформировать("");
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОтчетПоТабелю()
	Возврат ЗначениеЗаполнено( ТабельРабочегоВремени );
КонецФункции


&НаКлиенте
Процедура УстановитьВидимость();
	ПоТабелю = ОтчетПоТабелю();
	
	Элементы.ГруппаПоПодразделению.Видимость 		= НЕ ПоТабелю;
	Элементы.ГруппаТабельРабочегоВремени.Видимость 	= ПоТабелю;
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	СписокСотрудников.Очистить();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ТабельРВ") Тогда
		ТабельРабочегоВремени = Параметры.ТабельРВ.Ссылка;
	Иначе
		ТабельРабочегоВремени = Документы.ТабельУчетаРабочегоВремени.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры
