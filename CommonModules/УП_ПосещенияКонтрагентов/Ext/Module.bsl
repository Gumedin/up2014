#Область ФункцииПреобразования

Функция ФункцияПреобразованияЗаписиПосещения(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	ТипСтрокой = Строка(ТипЗнч( Значение ));
	
    Если ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
        Возврат Строка(Значение);
	КонецЕсли;
	Если 	Свойство = "Посещение" 
	ИЛИ		Свойство = "Подразделение" 
	ИЛИ		Свойство = "Контрагент" 
	ИЛИ		Свойство = "ПредметПосещения"
	ИЛИ		Свойство = "ФизическоеЛицо"
	Тогда
		Если 		ТипЗнч( Значение ) = Тип("Строка") Тогда
			Возврат Значение;
		Иначе
			Возврат Строка( Значение.УникальныйИдентификатор() );
		КонецЕсли;
		
	ИначеЕсли Свойство = "МнемокодПредмета" Тогда
		Возврат УП_РаботаСРабочимКалендаремСервер.МнемоПредметаПосещения( Значение );
		
		
	ИначеЕсли Свойство = "ТипПредмета" Тогда
		Возврат Строка(Значение);
		
	ИначеЕсли 	Свойство = "ФайлКартинки" Тогда
	// преобразуем картинку в 
		
		
		
	ИначеЕсли 	Свойство = "Цвет" Тогда
			Возврат Строка(Значение);
	КонецЕсли;
	Возврат "";
    //Отказ = Истина;
КонецФункции

Функция ФункцияВосстановленияЧтенияПосещений(Свойство, Значение, ДополнительныеПараметры) Экспорт
	Если Свойство = "ПредметПосещения" Тогда
		Попытка
			Возврат Новый УникальныйИдентификатор( Значение );
		Исключение
			Возврат Строка( Значение );
		КонецПопытки;
		
	ИначеЕсли 	Свойство = "Дата"
	ИЛИ 		Свойство = "МесяцПосещений"	Тогда
        Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		
	ИначеЕсли 	Свойство = "Посещение" 		Тогда
		// уже записанное посещение
		Если ЗначениеЗаполнено( Значение ) Тогда
			УнИдентификатор = Новый УникальныйИдентификатор( Значение );
			Возврат УнИдентификатор;
			//Возврат Справочники.ПосещенияКонтрагентов.ПолучитьСсылку( УнИдентификатор );
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
    ИначеЕсли 	Свойство = "Подразделение" 	Тогда
		УнИдентификатор = Новый УникальныйИдентификатор( Значение );
		Возврат Справочники.Подразделения.ПолучитьСсылку( УнИдентификатор );
		
    ИначеЕсли 	Свойство = "Контрагент" 		Тогда
		УнИдентификатор = Новый УникальныйИдентификатор( Значение );
		Возврат Справочники.Контрагенты.ПолучитьСсылку( УнИдентификатор );
		
	ИначеЕсли 	Свойство = "Цвет" Тогда
		Если ЗначениеЗаполнено( Значение ) Тогда
			Возврат Перечисления.ЦветаРабочегоКалендаря[Значение];
		Иначе
			Возврат Перечисления.ЦветаРабочегоКалендаря.Нет;
		КонецЕсли;
		
    ИначеЕсли Свойство = "ФизическоеЛицо" 		Тогда
		УнИдентификатор = Новый УникальныйИдентификатор( Значение );
		Возврат Справочники.ФизическиеЛица.ПолучитьСсылку( УнИдентификатор );
		
    КонецЕсли;
КонецФункции

#КонецОбласти


#Область ЖурналПосещений

Функция ПолучитьЖурналПосещенийФизическогоЛица( ФизическоеЛицо, МесяцПосещений = Неопределено )  Экспорт
	Если МесяцПосещений = Неопределено Тогда
		МесяцПосещений = НачалоМесяцаПосещений();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.Ссылка КАК Посещение,
		|	ПосещенияКонтрагентов.Подразделение.Ссылка КАК Подразделение,
		|	ПосещенияКонтрагентов.Контрагент.Ссылка КАК Контрагент,
		|	ПосещенияКонтрагентов.ПредметПосещения,
		|	ПосещенияКонтрагентов.Дата,
		|	ПосещенияКонтрагентов.Отработано,
		|	ПосещенияКонтрагентов.Количество,
		|	ПосещенияКонтрагентов.Часов,
		|	ПосещенияКонтрагентов.Задание,
		|	ПосещенияКонтрагентов.Результат,
		|	ПосещенияКонтрагентов.Цвет,
		|	ПосещенияКонтрагентов.Подразделение.Представление,
		|	ПосещенияКонтрагентов.Контрагент.Представление,
		|	ПосещенияКонтрагентов.Контрагент.Мнемокод,
		|	ПРЕДСТАВЛЕНИЕ(ПосещенияКонтрагентов.ПредметПосещения),
		|	ТИПЗНАЧЕНИЯ(ПосещенияКонтрагентов.ПредметПосещения) КАК ТипПредмета,
		|	ПосещенияКонтрагентов.ПредметПосещения КАК МнемокодПредмета,
		|	ПосещенияКонтрагентов.Расходы,
		|	ПосещенияКонтрагентов.ФайлКартинки
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	ПосещенияКонтрагентов.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И НЕ ПосещенияКонтрагентов.ПометкаУдаления
		|	И ПосещенияКонтрагентов.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("НачалоМесяца", 	НачалоМесяца( МесяцПосещений));
	Запрос.УстановитьПараметр("КонецМесяца", 	КонецМесяца(  МесяцПосещений));
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса;

КонецФункции

Функция ПолучитьМассивПосещенийСотрудника( ФизическоеЛицо, МесяцПосещений = Неопределено )  Экспорт
	
	ЖурналПосещений = Новый Массив;
	
	тзПосещений = ПолучитьЖурналПосещенийФизическогоЛица( ФизическоеЛицо, МесяцПосещений);
	Для Каждого Посещение ИЗ тзПосещений Цикл
	// 
		сПосещение = Новый Структура("Посещение,Подразделение,Контрагент,ПредметПосещения,Дата,Отработано,Количество,Часов,Задание,Результат,Цвет,Расходы," +
									 "ПодразделениеПредставление,КонтрагентПредставление,КонтрагентМнемокод,ПредметПосещенияПредставление,ТипПредмета,МнемокодПредмета");
		ЗаполнитьЗначенияСвойств( сПосещение, Посещение );
		ЖурналПосещений.Добавить( сПосещение );
	КонецЦикла;
	
	Возврат ЖурналПосещений;
КонецФункции

Функция JSON_ПолучитьЖурналПосещений( GUID_ФизическоеЛицо, МесяцПосещений = Неопределено ) Экспорт
	МесяцПосещений	= НачалоМесяцаПосещений();
	ФизическоеЛицо  = Справочники.ФизическиеЛица.ПолучитьСсылку( GUID_ФизическоеЛицо );

	// не в файл, а в строку
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку(ПараметрыJSON);
	
	Данные = Новый Структура;
	// искать будем по наименованию
	//Данные.Вставить("ФизическоеЛицо", 	СокрЛП(ФизическоеЛицо.Код));
    Данные.Вставить("ФизическоеЛицо", 	ФизическоеЛицо.УникальныйИдентификатор());
    Данные.Вставить("МесяцПосещений", 	МесяцПосещений );
	
	ЖурналПосещений = УП_ПосещенияКонтрагентов.ПолучитьМассивПосещенийСотрудника( ФизическоеЛицо );
    Данные.Вставить("ЖурналПосещений", 	ЖурналПосещений);
	
	// пишем
    ЗаписатьJSON(Запись, Данные, Новый НастройкиСериализацииJSON, "ФункцияПреобразованияЗаписиПосещения", УП_ПосещенияКонтрагентов );
	ЖурналПосещенийJSON = Запись.Закрыть();
	Возврат ЖурналПосещенийJSON;
	
КонецФункции

Функция JSON_ПрочитатьЖурналПосещений( ЖурналПосещенийJSON ) Экспорт
	
    Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку( ЖурналПосещенийJSON );
    ЖурналПосещений = ПрочитатьJSON(Чтение, Ложь, , , "ФункцияВосстановленияЧтенияПосещений", УП_ПосещенияКонтрагентов );
    Чтение.Закрыть();
	Возврат  ЖурналПосещений;
	
КонецФункции

#КонецОбласти


// для второй версии мобильного приложения
#Область ЖурналПосещений2

Функция ПолучитьМассивФизическогоЛица( ФизическоеЛицо, МесяцПосещений = Неопределено )  Экспорт
	
	ЖурналПосещений = Новый Массив;
	
	тзПосещений = ПолучитьЖурналПосещенийФизическогоЛица( ФизическоеЛицо, МесяцПосещений);
	Для Каждого СтрПосещение ИЗ тзПосещений Цикл
	//  основные реквизиты
		сПосещение = Новый Структура("Наименование,Дата,Отработано,Количество,Часов,Задание,Результат,Цвет,Расходы");
		ЗаполнитьЗначенияСвойств( сПосещение, СтрПосещение );
		// поменяем по ходу
		сПосещение.Наименование = 	СтрПосещение.ПредметПосещенияПредставление + ", " + 
									СтрПосещение.КонтрагентПредставление;
		
		сПосещение.Вставить("GUID", СтрПосещение.Посещение.УникальныйИдентификатор());
		Если ЗначениеЗаполнено( СтрПосещение.ФайлКартинки ) Тогда
			// 
			АдресКартинки 	= ПрисоединенныеФайлы.ПолучитьДанныеФайла( СтрПосещение.ФайлКартинки ).СсылкаНаДвоичныеДанныеФайла;
			ДвоичныеДанные 	= ПолучитьИзВременногоХранилища( АдресКартинки );
			// 
			СтрокаКартинки 	= Base64Строка( ДвоичныеДанные );
			
			сПосещение.Вставить("ФайлКартинки", СтрокаКартинки );
		КонецЕсли;
		
		//"Посещение,Подразделение,Контрагент,ПредметПосещения,Дата,Отработано,Количество,Часов,Задание,Результат,Цвет,Расходы," +
		//							 "ПодразделениеПредставление,КонтрагентПредставление,КонтрагентМнемокод,ПредметПосещенияПредставление,ТипПредмета,МнемокодПредмета");
		//ЗаполнитьЗначенияСвойств( сПосещение, Посещение );
		
		
		
		ЖурналПосещений.Добавить( сПосещение );
	КонецЦикла;
	
	Возврат ЖурналПосещений;
КонецФункции


Функция JSON_ПолучитьЖурналПосещений2( ФизическоеЛицо, МесяцПосещений = Неопределено ) Экспорт
	МесяцПосещений	= НачалоМесяцаПосещений();
	//ФизическоеЛицо  = Справочники.ФизическиеЛица.ПолучитьСсылку( GUID_ФизическоеЛицо );

	// не в файл, а в строку
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку(ПараметрыJSON);
	
	Данные = Новый Структура;
	// искать будем по наименованию
	//Данные.Вставить("ФизическоеЛицо", 	СокрЛП(ФизическоеЛицо.Код));
    Данные.Вставить("ФизическоеЛицо", 	ФизическоеЛицо.УникальныйИдентификатор());
    Данные.Вставить("МесяцПосещений", 	МесяцПосещений );
	
	ЖурналПосещений = УП_ПосещенияКонтрагентов.ПолучитьМассивФизическогоЛица( ФизическоеЛицо );
    Данные.Вставить("ЖурналПосещений", 	ЖурналПосещений);
	
	// пишем
    ЗаписатьJSON(Запись, Данные, Новый НастройкиСериализацииJSON, "ФункцияПреобразованияЗаписиПосещения", УП_ПосещенияКонтрагентов );
	ЖурналПосещенийJSON = Запись.Закрыть();
	Возврат ЖурналПосещенийJSON;
	
КонецФункции

#КонецОбласти



#Область КонтрагентыПосещений

Функция ПолучитьМассивКонтрагентовПосещенийСотрудника( ФизическоеЛицо )  Экспорт
	
	КонтрагентыПосещений = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыПосещений.Контрагент,
		|	КонтрагентыПосещений.ПредметПосещения,
		|	КонтрагентыПосещений.Часов,
		|	КонтрагентыПосещений.Количество,
		|	КонтрагентыПосещений.Цвет,
		|	КонтрагентыПосещений.Контрагент.Представление,
		|	КонтрагентыПосещений.Контрагент.Мнемокод,
		|	ПРЕДСТАВЛЕНИЕ(КонтрагентыПосещений.ПредметПосещения),
		|	ТИПЗНАЧЕНИЯ(КонтрагентыПосещений.ПредметПосещения) КАК ТипПредмета,
		|	КонтрагентыПосещений.ПредметПосещения КАК МнемокодПредмета,
		|	КонтрагентыПосещений.Расходы
		|ИЗ
		|	РегистрСведений.КонтрагентыПосещений КАК КонтрагентыПосещений
		|ГДЕ
		|	КонтрагентыПосещений.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	// посещение, подразделение, контрагент, предмет - как идентификаторы
	// 
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// 
		сКонтрагентПосещения = Новый Структура("Контрагент,ПредметПосещения,Количество,Часов,Цвет,Расходы," +
									 "КонтрагентПредставление,КонтрагентМнемокод,ПредметПосещенияПредставление,ТипПредмета,МнемокодПредмета");
		ЗаполнитьЗначенияСвойств( сКонтрагентПосещения, ВыборкаДетальныеЗаписи );
		КонтрагентыПосещений.Добавить( сКонтрагентПосещения );
	КонецЦикла;
	
	Возврат КонтрагентыПосещений;
КонецФункции

Функция JSON_ПолучитьКонтрагентовПосещений( GUID_ФизическоеЛицо ) Экспорт
	ФизическоеЛицо  = Справочники.ФизическиеЛица.ПолучитьСсылку( GUID_ФизическоеЛицо );

	// не в файл, а в строку
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, " ", Истина);
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку(ПараметрыJSON);
	
	Данные = Новый Структура;
	// искать будем по наименованию
    Данные.Вставить("ФизическоеЛицо", 	СокрЛП(ФизическоеЛицо.Наименование));
	
	КонтрагентыПосещений = УП_ПосещенияКонтрагентов.ПолучитьМассивКонтрагентовПосещенийСотрудника( ФизическоеЛицо );
    Данные.Вставить("КонтрагентыПосещений", 	КонтрагентыПосещений);
	
	// пишем
	//МодульФП = Метаданные.ОбщиеМодули.УП_ПосещенияКонтрагентов;
    ЗаписатьJSON(Запись, Данные, Новый НастройкиСериализацииJSON, "ФункцияПреобразованияЗаписиПосещения", УП_ПосещенияКонтрагентов );
	КонтрагентыПосещенийJSON = Запись.Закрыть();
	Возврат КонтрагентыПосещенийJSON;
	
	
КонецФункции

Функция JSON_ПрочитатьКонтрагентовПосещения( КонтрагентыПосещенийJSON ) Экспорт
	
    Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку( КонтрагентыПосещенийJSON );
    КонтрагентыПосещений = ПрочитатьJSON(Чтение, Ложь, , , "ФункцияВосстановленияЧтенияПосещений", УП_ПосещенияКонтрагентов );
    Чтение.Закрыть();
	Возврат  КонтрагентыПосещений;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеПосещенийОтКлиента

Функция JSON_ПрочитатьЖурналОтКлиента( ЖурналJSON ) Экспорт
	
    Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку( ЖурналJSON );
    ЖурналОтКлиента = ПрочитатьJSON( Чтение, Ложь, , , "ФункцияВосстановленияЧтенияПосещений", УП_ПосещенияКонтрагентов );
    Чтение.Закрыть();
	
	Возврат ЖурналОтКлиента;
	
КонецФункции

// записывем журнал посещений, полученный от клиента 
// в ЦБ
// предмет посещения либо уникальный ид, тогда по типу определяем сслыку
// либо строка, тогда оставляем
Процедура ОбновитьЖурналПосещений( ЖурналОтКлиента )  Экспорт
	МесяцПосещений = НачалоМесяцаПосещений();
	// записываем только за текущий месяц посещений
	Если ЖурналОтКлиента.МесяцПосещений <> МесяцПосещений  Тогда 
		Возврат;
	КонецЕсли;
	ФизическоеЛицо = ЖурналОтКлиента.ФизическоеЛицо;
	Если НЕ ЗначениеЗаполнено( ФизическоеЛицо ) 
	// чтобы не писали все подряд, в т.ч. после увольнения
	ИЛИ ФизическоеЛицо.НеДоступен ИЛИ ФизическоеЛицо.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// обходим все посещения, полученные от клиента
	// в журнале посещения - не ПнУ (не помеченные на удаление) без UID - созданные на клиенте 
	// 						 и все посещения с UID, включая ПнУ (на клиенте посещения не удаляются)
	Для Каждого ПосещениеОтКлиента ИЗ ЖурналОтКлиента.ЖурналПосещений Цикл

		Если ПосещениеОтКлиента.Посещение = Неопределено Тогда
		// 1. новое посещение, созданное на клиенте
			ПосещениеЦБ = Справочники.ПосещенияКонтрагентов.ПустаяСсылка();
			
		Иначе
		// 2. Посещение было создано в ЦБ, значение является UID
			ПосещениеЦБ = Справочники.ПосещенияКонтрагентов.ПолучитьСсылку( ПосещениеОтКлиента.Посещение );
			Если ПосещениеЦБ.Пустая() Тогда 
			// за время между сеансами посещение удалили на ЦБ
				Если ПосещениеОтКлиента.ПометкаУдаления Тогда
				// если удалили и на клиенте, ничего не делаем
					Продолжить;
				Иначе
				// если на клиенте не удаляли, то создаем новый элемент
					ПосещениеЦБ = Справочники.ПосещенияКонтрагентов.ПустаяСсылка();
				КонецЕсли;
			Иначе
			// нашли посещение по UID в ЦБ
				Если ПосещениеЦБ.Отработано Тогда
				// отработанные посещения в ЦБ не меняем по журналу клиента, если они вдруг изменены
				// на клиенте запрет изменения отработанных посещений с IUD
					Продолжить;
					
				КонецЕсли;
				// посещение не отработано
				// Если на сервере пометили на удаление, а на клиенте нет
				// ничего не делаем, т.к.
				// снимаем пометку удаления в момент обновления посещения
			КонецЕсли;
			
		КонецЕсли;
		// отрабатываем посещение в центральной базе по строке посещения клиента
		ОбновитьПосещениеВЦБпоПосещениюКлиента(ФизическоеЛицо, ПосещениеОтКлиента, ПосещениеЦБ);
	КонецЦикла;
КонецПроцедуры


// для 2-ой версии мобильного прилоения
// в журнале посещений доолжный быть только измененные на мобильном клиенте 
// посещения
Функция ОбновитьЖурналПосещений2( ЖурналОтКлиента )  Экспорт
	МесяцПосещений = НачалоМесяцаПосещений();
	
	// записываем только за текущий месяц посещений
	Если ЖурналОтКлиента.МесяцПосещений <> МесяцПосещений  Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ФизическоеЛицо = ЖурналОтКлиента.ФизическоеЛицо;
	Если НЕ ЗначениеЗаполнено( ФизическоеЛицо ) // чтобы не писали все подряд, в т.ч. после увольнения
	ИЛИ ФизическоеЛицо.НеДоступен 
	ИЛИ ФизическоеЛицо.ПометкаУдаления Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// обходим все посещения, полученные от клиента
	// в журнале посещения - не ПнУ (не помеченные на удаление) без UID - созданные на клиенте 
	// 						 и все посещения с UID, включая ПнУ (на клиенте посещения не удаляются)
	Для Каждого ПосещениеОтКлиента ИЗ ЖурналОтКлиента.ЖурналПосещений Цикл

		ГУИД_Посещения 	= Новый УникальныйИдентификатор( ПосещениеОтКлиента.GUID );
		Посещение 		= Справочники.ПосещенияКонтрагентов.ПолучитьСсылку( ГУИД_Посещения );
		Если Посещение.Пустая() Тогда
			// не должно быть
			Продолжить;
		КонецЕсли;
		// заполняем переданные реквизиты
		ПосещениеОб = Посещение.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств( ПосещениеОб, ПосещениеОтКлиента );
		Если ЗначениеЗаполнено( ПосещениеОтКлиента.ФайлКартинки ) Тогда
			// записываем картинку в файл 
			
		КонецЕсли;
		//
		Попытка
			// записали
			ПосещениеОб.Записать();
		Исключение
			ОО = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции


Процедура ОбновитьПосещениеВЦБпоПосещениюКлиента(ФизическоеЛицо, ПосещениеОтКлиента, ПосещениеЦБ)
	ПосещениеОб = ПосещениеЦБ.ПолучитьОбъект();
	// снимаем отметку удаления в любом случае
	ПосещениеОб.УстановитьПометкуУдаления( Ложь );
	// простые реквизиты
	ЗаполнитьЗначенияСвойств( ПосещениеОб, ПосещениеОтКлиента );
	
	// предмет посещения зависти от типа								
	Если 		ПосещениеОтКлиента.ТипПредмета = "Строка" Тогда
		ПосещениеОб.ПредметПосещения 	= ПосещениеОтКлиента.ПредметПосещения;
		
	Иначе
		UID_ПредметаПосещения = Новый УникальныйИдентификатор( ПосещениеОтКлиента.ПредметПосещения );
		Если 		ПосещениеОтКлиента.ТипПредмета = "План работ" Тогда
			ПосещениеОб.ПредметПосещения 	= Документы.ПланРабот.ПолучитьСсылку(UID_ПредметаПосещения);
			
		ИначеЕсли	ПосещениеОтКлиента.ТипПредмета = "План работ (тиражный)" Тогда
			ПосещениеОб.ПредметПосещения 	= Документы.ПланРаботТиражный.ПолучитьСсылку(UID_ПредметаПосещения);
			
		ИначеЕсли	ПосещениеОтКлиента.ТипПредмета = "Позиция номенклатуры" Тогда
			ПосещениеОб.ПредметПосещения 	= Справочники.Номенклатура.ПолучитьСсылку(UID_ПредметаПосещения);
									
		ИначеЕсли	ПосещениеОтКлиента.ТипПредмета = "Типы рабочего времени" Тогда
			ПосещениеОб.ПредметПосещения 	= Справочники.ОтметкиТабеля.ПолучитьСсылку(UID_ПредметаПосещения);
			
		ИначеЕсли	ПосещениеОтКлиента.ТипПредмета = "Задачи проектов" Тогда
			ПосещениеОб.ПредметПосещения 	= Справочники.ЗадачиПроектов.ПолучитьСсылку(UID_ПредметаПосещения);
			
		ИначеЕсли	ПосещениеОтКлиента.ТипПредмета = "Тиражные проекты" Тогда
			ПосещениеОб.ПредметПосещения 	= Справочники.ЗадачиПроектов.ПолучитьСсылку(UID_ПредметаПосещения);
			
		Иначе
		// остальные объектные типы предметов надо дописать
		КонецЕсли;		
		
	КонецЕсли;
	ПосещениеОб.ФизическоеЛицо	= ФизическоеЛицо;
	
	Попытка
		// записали
		ПосещениеОб.Записать();
	Исключение
		ОО = ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ИдентификацияМобильногоКлиента

// с мобильного клиента передается имя пользователя
// возвращается физическое лицо
Функция ИдентификацияМобильногоКлиента( ИмяДляВхода ) Экспорт
	// пользователь информационной базы	
	Попытка
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяДляВхода);
	Исключение
		Возврат "";
	КонецПопытки;
	// для админа
	Если ПользовательИБ = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	// справочника
	Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор );
	Если Пользователь.Недействителен
	ИЛИ  Пользователь.ПометкаУдаления
	ИЛИ  НЕ ЗначениеЗаполнено( Пользователь.ФизическоеЛицо ) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Строка(Пользователь.ФизическоеЛицо.УникальныйИдентификатор());

КонецФункции

// если физ.лицо найдено и пароль совпадает, то ИД, иначе Неопределено
Функция ИдентификацияФизическогоЛица( КодФизЛица, ПарольФизЛица ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Код = &Код
		|	И ФизическиеЛица.Пароль = &Пароль
		|	И НЕ ФизическиеЛица.ПометкаУдаления
		|	И НЕ ФизическиеЛица.НеДоступен";
	
	Запрос.УстановитьПараметр("Код", 	КодФизЛица);
	Запрос.УстановитьПараметр("Пароль", ПарольФизЛица);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка.УникальныйИдентификатор();
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция ФизическоеЛицоПоИД( ИД_ФизическогоЛица ) Экспорт
	ГУИД 			= Новый УникальныйИдентификатор( ИД_ФизическогоЛица );
	ФизическоеЛицо 	= Справочники.ФизическиеЛица.ПолучитьСсылку( ГУИД );
	Если ФизическоеЛицо.Пустая()
	ИЛИ	 ФизическоеЛицо.НеДоступен 
	ИЛИ  ФизическоеЛицо.ПометкаУдаления Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ФизическоеЛицо;
	
КонецФункции

#КонецОбласти
