&НаСервере
Функция ПолучитьМесяцыРегистрацииПоПериоду( Период ) Экспорт
	Месяцы 		= Новый Массив;
	ТекМесяц 	= НачалоМесяца( Период.ДатаНачала);
	Пока ТекМесяц <= Период.ДатаОкончания Цикл
		Месяцы.Добавить( ТекМесяц );
		ТекМесяц = ДобавитьМесяц( ТекМесяц, 1 );
	КонецЦикла;
	Возврат Месяцы;
КонецФункции


//
&НаСервере
Функция ДатаМежду( ВыбДата, Д1, Д2) Экспорт
	ПустаяДата = '00010101';
	Если ВыбДата = ПустаяДата Тогда 
		// если интервал открыт слева, то попадает
		Возврат (Д1=ПустаяДата);
	КонецЕсли;
	
	// !!! теперь ВыбДата - не пустая
	// интервал открыт с обоих концов !!!
	Если (Д1=ПустаяДата) 
	и 	 (Д2=ПустаяДата) Тогда  
		Возврат Истина;
	КонецЕсли;
	// открыт слева, закрыт справа 
	Если (Д1=ПустаяДата) Тогда
		Возврат (ВыбДата<=Д2);
	КонецЕсли;
	// открыт справа, закрыт слева
	Если (Д2=ПустаяДата) Тогда
		Возврат (ВыбДата>=Д1);
	КонецЕсли;
	// все даты определены 
	// все даты определены 
	Если 	(ВыбДата <Д1) или (ВыбДата >Д2) Тогда 
		Возврат Ложь; 
	КонецЕсли;
	Возврат Истина;
КонецФункции


&НаСервере
Функция СоздатьИерархию( НазвСправ, ПолноеНаименование ) Экспорт
	// 
	
	Родитель = Справочники[НазвСправ].ПустаяСсылка();
	Масс	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеНаименование,"/");
	Для Н = 1 ПО Масс.Количество() Цикл
		Наименование 	= Масс[Н-1];
		Отбор 			= Новый Структура;
		Отбор.Вставить( "Наименование", Наименование);
		
		Спр = Справочники[НазвСправ].ВыбратьИерархически( Родитель,, Отбор );
		Нашли = Ложь;
		Пока Спр.Следующий() Цикл
			Если Спр.ЭтоГруппа Тогда
				Нашли 		= Истина;
				Родитель 	= Спр.Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не Нашли Тогда
			СпрГр 				= Справочники[НазвСправ].СоздатьГруппу();
			СпрГр.Родитель 		= Родитель;
			СпрГр.Наименование 	= Наименование;
			СпрГр.Записать();
			Родитель = СпрГр.Ссылка;
		КонеЦесли;
	КонецЦикла;
	
	Возврат Родитель;
	
	
КонецФункции

// создание и проведение документов в зависимости от статуса проекта
&НаСервере
Функция РазрешеноСоздаватьДокумент( ДокСсылка, Проект ) Экспорт
	// уже создали
	Если ЗначениеЗаполнено( ДокСсылка ) Тогда Возврат Истина; КонецЕсли;
	// не определен проект
	Если НЕ ЗначениеЗаполнено( Проект ) Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не указан проект документа";
		Сообщение.Сообщить();							
		Возврат Ложь; 
	КонецЕсли;
	
	
	// плановые документы
	Если ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.Смета" ) 
	или  ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.СметаЗадачиПроекта" ) 
	или  ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ЗакупкаППЛО" ) 
	или  ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.РасходПоЗадачеПроекта" ) 
	или  ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.РасходПоЗадачеПроизводство" ) 
	или  ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ПланРабот" ) 
	или  ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ПланРаботТиражный" ) Тогда
	Если Проект.Статус = Перечисления.СтатусыПроектов.Черновик
		//Закомментировано 24.05.2018 по задаче #129652 Гумедин А.Г.
		//или  Проект.Статус = Перечисления.СтатусыПроектов.Обсуждение
		//Добавлено 25.05.2018 по задаче #129652 Гумедин А.Г. 
		или  Проект.Статус = Перечисления.СтатусыПроектов.Прогноз
		или  Проект.Статус = Перечисления.СтатусыПроектов.Согласование Тогда
			Возврат Истина;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Проект должен иметь статус " + Перечисления.СтатусыПроектов.Черновик + " или " +
					 			Перечисления.СтатусыПроектов.Согласование;
			Сообщение.Сообщить();							
					 
			Возврат Ложь;
		КонецЕсли;
		
		Возврат (Проект.Статус = Перечисления.СтатусыПроектов.Черновик );
		
	ИначеЕсли	ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ЗаявкаНаОплатуПоставщику" ) 
	или			ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ЗаявкаНаВыплатуРасхода" ) 		
	или			ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ЗаявкаНаВыплату" ) Тогда		
		
		Возврат (Проект.Статус = Перечисления.СтатусыПроектов.ВРаботе );
		
	КонецЕсли;
	
	Возврат Ложь;
	
	
КонецФункции

// цена указанного ресурса для нормы стоимости
&НаСервере
Функция ПоказательТарифнойСтавки( ТарифнаяСтавка, ДатаПоказателя = Неопределено, Показатель = "Цена") Экспорт
	Цена = 0;
	Если ТарифнаяСтавка.Пустая() Тогда Возврат Цена; КонецЕслИ;
	Если ДатаПоказателя  = Неопределено Тогда
		ДатаПоказателя  = ТекущаяДата();
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТарифнаяСтавка", ТарифнаяСтавка );
	Цена  = РегистрыСведений.ПоказателиТарифныхСтавок.ПолучитьПоследнее( ДатаПоказателя, Отбор )[Показатель];
	
	Возврат Цена;
КонецФункции

&НаСервере
Функция КоэффициентФОТПодразделения( Подразделение, Планирование = Истина, Дата = Неопределено ) Экспорт
	ДатаПоказателя 	= ?(Дата = Неопределено, ТекущаяДата(), Дата );
	Если ДатаПоказателя < Дата(2015,1,1) Тогда
		Возврат 1;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Подразделение", Подразделение );
	сЗаписи = РегистрыСведений.КоэффициентФОТПодразделений.ПолучитьПоследнее( ДатаПоказателя, Отбор );
	Если Планирование Тогда
		Возврат сЗаписи.КоэффициентПланирования;
	Иначе
		Возврат сЗаписи.КоэффициентЗакрытия;
	КонецЕсли;
	
	
КонецФункции


// тарифная ставка подразделения за час
&НаСервере
Функция СтавкаФОТПодразделения( Подразделение, ТарифнаяСтавка, Дата = Неопределено ) Экспорт
	ДатаПоказателя = ?(Дата = Неопределено, 	ТекущаяДата(), Дата );
	//
	КоэффПодр 	= КоэффициентФОТПодразделения( 	Подразделение, 	Истина, ДатаПоказателя );
	Ставка 		= ПоказательТарифнойСтавки( 	ТарифнаяСтавка, ДатаПоказателя, "СтавкаФОТ");
	// округляем до копеек
	Возврат ОКР( Ставка * КоэффПодр, 2 );
	
КонецФункции

&НаСервере
Функция СтавкаФОТПодразделенияЗакрытия( Подразделение, ТарифнаяСтавка, Дата = Неопределено ) Экспорт
	ДатаПоказателя = ?(Дата = Неопределено, 	ТекущаяДата(), Дата );
	//
	КоэффПодр 	= КоэффициентФОТПодразделения( 	Подразделение, 	Ложь, 	ДатаПоказателя );
	Ставка 		= ПоказательТарифнойСтавки( 	ТарифнаяСтавка, ДатаПоказателя, "СтавкаФОТ");
	// округляем до копеек
	Возврат ОКР( Ставка * КоэффПодр, 2 );
	
КонецФункции


// создание и проведение документов в зависимости от статуса проекта
&НаСервере
Функция РазрешеноПроводитьДокумент( ДокСсылка, Проект ) Экспорт
	// для отладки
	Если УП_ПереносДанных.ПроведениеПриПереносе() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// не определен проект
	Если НЕ ЗначениеЗаполнено( Проект ) Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для документа "  + ДокСсылка + Символы.ПС +
						 "не указан проект";
		Сообщение.Сообщить();
		Возврат Ложь; 
	КонецЕсли;
	
	
	// 2014 11 19
	// дополнительно для плана работ, т.к. его можно перепроводить с условием сохранения
	// равенства суммы документа и суммы в смете
	Если ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ПланРабот" ) и Проект.Статус = Перечисления.СтатусыПроектов.ВРаботе Тогда
		Возврат Истина;
	КонецЕсли;
	// 2016 09 19
	// + план работ тиражный
	Если ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ПланРаботТиражный" ) и Проект.Статус = Перечисления.СтатусыПроектов.ВРаботе Тогда
		Возврат Истина;
	КонецЕсли;
		
	
	// плановые документы
	Если Ложь
	или	 ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.Смета" ) 
	или  ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.СметаЗадачиПроекта" ) 
	или  ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ЗакупкаППЛО" ) 
	или  ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.РасходПоЗадачеПроекта" ) 
	или  ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.РасходПоЗадачеПроизводство" ) 
	или  ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ПланРабот" ) 
	или  ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ПланРаботТиражный" ) 
	или  ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ПланВознагражденияПосредника" ) 
	Тогда
	
		Если Проект.Статус = Перечисления.СтатусыПроектов.Черновик 
			или  Проект.Статус = Перечисления.СтатусыПроектов.Прогноз 
		или  Проект.Статус = Перечисления.СтатусыПроектов.Согласование Тогда
			Возврат Истина;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст ="Проект " + Проект  +  Символы.ПС + 
							 "должен иметь статус " + Перечисления.СтатусыПроектов.Черновик + " или " +
					 		  Перечисления.СтатусыПроектов.Согласование;
			Сообщение.Сообщить();
					 
			Возврат Ложь;
		КонецЕсли;
	
		
	ИначеЕсли	ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ЗакрытиеТП" ) 		
	или			ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ЗакрытиеАктаТП" ) 		
	или			ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ЗаявкаНаВыплатуРасхода" ) 		
	или			ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ЗаявкаНаОплатуПоставщику" ) 
	или  		ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ЗаявкаНаРасходПоСотруднику" ) 
	или			ТипЗнч( ДокСсылка ) = Тип("ДокументСсылка.ЗаявкаНаВыплату" ) 
																				Тогда		
		Если Проект.Статус <> Перечисления.СтатусыПроектов.ВРаботе Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст ="Проект " + Проект  +  Символы.ПС + 
							 "должен иметь статус " + Перечисления.СтатусыПроектов.ВРаботе;
			Сообщение.Сообщить();
	
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат Ложь;
	
	
КонецФункции


// перенесено из модуля ОбщегоНазначенияУТ.
// Функция выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения.
//
// Параметры:
//  ИсхСумма   - распределяемая сумма
//  МассивКоэф - массив коэффициентов распределения
//  Точность   - точность округления при распределении.
//
//Возвращает:
//  МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//               суммы в соответствии с весом коэффициента (из массива коэффициентов)
//               В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
//               или суммарный вес коэф. = 0), тогда возвращается значение Неопределено.
//
//&НаСервере
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2) Экспорт

	Если МассивКоэф.Количество() = 0 Или ИсхСумма = 0 Или ИсхСумма = Null Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИндексМакс = 0;
	МаксЗнач   = 0;
	РаспрСумма = 0;
	СуммаКоэф  = 0;
	
	Для К = 0 По МассивКоэф.Количество() - 1 Цикл

		МодульЧисла = ?(МассивКоэф[К] > 0, МассивКоэф[К], - МассивКоэф[К]);

		Если МаксЗнач < МодульЧисла Тогда
			МаксЗнач = МодульЧисла;
			ИндексМакс = К;
		КонецЕсли;

		СуммаКоэф = СуммаКоэф + МассивКоэф[К];

	КонецЦикла;

	МассивСумм = Новый Массив(МассивКоэф.Количество());

	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		
		//Условие изменено 27.06.2018 по задаче #131382 Катаев В.В. Гумедин А.Г.
		Если СуммаКоэф = 0 Тогда
			МассивСумм[К] = ИсхСумма;
		Иначе
			МассивСумм[К] = Окр(ИсхСумма * МассивКоэф[К] / СуммаКоэф, Точность, 1);
		КонецЕсли; 
		////////////////////////////////////////////////////////////////////////
		
		РаспрСумма = РаспрСумма + МассивСумм[К];
	КонецЦикла;

	// Погрешности округления отнесем на коэффицент с максимальным весом
	Если Не РаспрСумма = ИсхСумма Тогда
		МассивСумм[ИндексМакс] = МассивСумм[ИндексМакс] + ИсхСумма - РаспрСумма;
	КонецЕсли;

	Возврат МассивСумм;

КонецФункции

// если есть проект (для задачи проекта) в другом статусе, возврат Ложь
&НаСервере
Функция ВсеЗадачиВУказанномСтатусе( Статус, тзЗадач ) Экспорт
	Если Константы.ПереносДанных.Получить() Тогда
	// для массового перепроведения докуентов
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого Стр ИЗ тзЗадач Цикл
		Проект = Стр.ЗадачаПроекта.Владелец;
		Если Проект.Статус <> Статус Тогда
			Сообщить("Проект " + Проект + " имеет статус " + Проект.Статус);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции


//  ИНЦИДЕНТЫ

// Состояние инцидента
// 
// http://habrahabr.ru/post/218885/
// для отображения  коллекции картинок СостояниеИнцидентов	
//
// Состояния:
// 0 - Не определено 		- недостаточно данных
// 1 - По плану        		-зеленый шар
// 2 - Задержка             -желтый шар
// 3 - Просрочен    		-красный шар
// 4 - Завершен	            -флажок
// 5 - Будущая задача       -часы (регл.задача)
// 6 - Инцидент не начат    -открытый замок
// 7 - Не активный			*закрытый замок	
//
&НаСервере
Функция ОпределитьСостояниеИнцидента( Инцидент, НаДату = Неопределено ) Экспорт
	//Инцидент = Справочники.Инциденты.СоздатьЭлемент();
	ДатаСостояния = ?(ЗначениеЗаполнено(НаДату), НаДату, ТекущаяДата());
	
	// 1.
	Если Инцидент.Закрыт Тогда 							
		Возврат Перечисления.СостоянияИнцидентов.Завершен; 	КонецЕсли;
	
	// 2.
	Если Инцидент.ДатаНачала > ДатаСостояния 	Тогда	
		Возврат Перечисления.СостоянияИнцидентов.Будущий;	КонецЕсли;
	
	// 3. не закрыт на указанную дату окончания
	Если ЗначениеЗаполнено(Инцидент.ДатаОкончания) И 
		(ДатаСостояния > Инцидент.ДатаОкончания) Тогда	
		Возврат Перечисления.СостоянияИнцидентов.Просрочен; КонецЕсли;
		
	// 
	// инцидент НЕ ЗАКРЫТ
	
	// количество обработок и сумма отработанныйх часов
	тзОИ = УП_Инциденты.ОтработкаИнцидента( Инцидент, ДатаСостояния );
	
	// 3 нет указаний
	Если тзОИ.Количество() = 0 Тогда
		Возврат Перечисления.СостоянияИнцидентов.НеАктивный;
	КонецЕсли;
	// исполнено часов
	Факт = тзОИ.Итог("Количество");
	
	//	бюджет инцидента
	План = ?(Инцидент.КоличествоПланТекущий=0, Инцидент.КоличествоПлан, Инцидент.КоличествоПланТекущий);
	Если План = 0 Тогда
		Если Факт = 0 Тогда
			Возврат Перечисления.СостоянияИнцидентов.НеАктивный;
		Иначе
		// самотек
			Возврат Перечисления.СостоянияИнцидентов.ПоПлану;
		КонецЕсли;
	КонецЕсли;
	// доля Факт
	ДоляФакт = Факт/План;
	Если ДоляФакт > 1 Тогда
		Возврат Перечисления.СостоянияИнцидентов.Перерасход;
	КонецЕсли;
	
	// доля плана
	ДоляПлан = УП_Инциденты.ПрошедшаяДоляИнцидента( Инцидент, ДатаСостояния );
	
	КоэффициентВыполнения = ДоляФакт/ ДоляПлан;
	Если КоэффициентВыполнения >= 1 Тогда
		Возврат Перечисления.СостоянияИнцидентов.ПоПлану;
	Иначе
		Возврат Перечисления.СостоянияИнцидентов.Задержка;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ОбновитьСостояниеИнцидента( Инцидент, Состояние = Неопределено, НаДату = Неопределено) Экспорт
	Если Состояние = Неопределено Тогда
		Состояние = ОпределитьСостояниеИнцидента( Инцидент, НаДату  );
	КонецЕсли;
	
	МенЗаписи = РегистрыСведений.ИнцидентыСостояние.СоздатьМенеджерЗаписи();
	МенЗаписи.Инцидент 		= Инцидент;
	МенЗаписи.Состояние 	= Состояние;
	МенЗаписи.Количество 	= УП_Инциденты.ЗакрытыеЧасыПоИнциденту( Инцидент );
	
	МенЗаписи.Записать(Истина);
КонецПроцедуры

&НаСервере
Функция ПрочитатьСостояниеИнцидента( Инцидент ) Экспорт
	Стр = РегистрыСведений.ИнцидентыСостояние.Получить(Новый Структура("Инцидент", Инцидент ));
	Возврат Стр;
КонецФункции


// ИНЦИДЕНТЫ конец

// 
&НаСервере
Функция ЦенаНоменклатуры( Номенклатура,  ВидЦены = Неопределено, ДатаЦены = Неопределено) Экспорт
	Если ВидЦены = Неопределено Тогда
		ВидЦены = Справочники.ВидыЦен.ЦенаОтпускная;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено( ДатаЦены ) Тогда
		ДатаЦены = ТекущаяДата();
	КонецЕсли;
	Отбор = новый Структура;
	Отбор.Вставить("ВидЦены", 		ВидЦены);
	Отбор.Вставить("Номенклатура", 	Номенклатура);
	СтрРег = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее( ДатаЦены, Отбор );
	Возврат СтрРег.Цена;
	
	
	
КонецФункции


//***************************************************
&НаСервере
Функция СписокФизЛицТекущегоПользователя( Пользователь = Неопределено ) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоступныеФизЛица.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ДоступныеФизЛица КАК ДоступныеФизЛица
		|ГДЕ
		|	ДоступныеФизЛица.Диспетчер = &Диспетчер";

	Запрос.УстановитьПараметр("Диспетчер", Пользователь.ФизическоеЛицо);

	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	// добавляем физ лицо самого пользователя
	ПользовательФизЛица = Пользователь.ФизическоеЛицо;
	Если ЗначениеЗаполнено( ПользовательФизЛица ) Тогда
		Если РезультатЗапроса.Найти( ПользовательФизЛица ) = Неопределено Тогда 
			РезультатЗапроса.Добавить( ПользовательФизЛица );
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатЗапроса;
	
КонецФункции


// для формирования списка выбора Клиент-менеджеров
&НаСервере
Функция МассивКлиентМенджеров( Подразделение = Неопределено ) Экспорт 
	//	
	Если РольДоступна( Метаданные.Роли.ПолныеПрава) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если РольДоступна( Метаданные.Роли.КлиентМенеджер ) Тогда
		мФизЛиц 	= СписокФизЛицТекущегоПользователя();
		ТекФизЛицо 	= ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо;
		Если ЗначениеЗаполнено( ТекФизЛицо ) Тогда
			Если мФизЛиц.Найти( ТекФизЛицо ) = Неопределено Тогда
				мФизЛиц.Добавить( ТекФизЛицо );
			КонецЕсли;
		КонецЕсли;
		Возврат мФизЛиц;
	Иначе

		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПланРаботТиражный.ЗадачаПроекта.Владелец.МенеджерПроекта
			|ПОМЕСТИТЬ Менеджеры
			|ИЗ
			|	Документ.ПланРаботТиражный КАК ПланРаботТиражный
			|ГДЕ
			|	ПланРаботТиражный.Подразделение = &Подразделение
			|	И ПланРаботТиражный.Проведен
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПланРабот.ЗадачаПроекта.Владелец.МенеджерПроекта
			|ИЗ
			|	Документ.ПланРабот КАК ПланРабот
			|ГДЕ
			|	ПланРабот.Проведен
			|	И ПланРабот.Подразделение = &Подразделение
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Менеджеры.ЗадачаПроектаВладелецМенеджерПроекта КАК КлиентМенеджер
			|ИЗ
			|	Менеджеры КАК Менеджеры";

		Запрос.УстановитьПараметр("Подразделение", Подразделение);

		мФизЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КлиентМенеджер");
		Возврат мФизЛиц

	КонецЕсли;
КонецФункции


// остаток наколпений по менеджеру коммерческих расходоыв
&НаСервере
Функция ПолучитьОстатокКоммерческихРасходовПоМенеджеру( КлиентМенеджер ) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ОбеспеченоПоСтатьеОстатки.СуммаОстаток) КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.ОбеспеченоПоСтатье.Остатки(
		|			,
		|			ЗадачаПроекта.Владелец.МенеджерПроекта = &КлиентМенеджер
		|				И СтатьяСметы = &стСтатьяСметы) КАК ОбеспеченоПоСтатьеОстатки";

	Запрос.УстановитьПараметр("КлиентМенеджер", 	КлиентМенеджер);
	Запрос.УстановитьПараметр("стСтатьяСметы", 		Справочники.СтатьиСметы.РасходыКоммерческие);

	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат.Итог("СуммаОстаток");
	
КонецФункции


//***************************************************
&НаСервере
Функция ПользовательПоФизЛицу( ФизическоеЛицо ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.ПометкаУдаления
		|	И Пользователи.ФизическоеЛицо = &ФизическоеЛицо";

	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Пользователь;
	КонецЦикла;
	
	Возврат Неопределено;
	
	
КонецФункции


&НаСервере
Функция ПлановыйПоказательСметы( Год = 0, НазваниеПоказателя ) Экспорт
	ДатаПроцента = ?(ЗначениеЗаполнено(Год), Дата(Год,1,1), ТекущаяДата());
	
	Стр = РегистрыСведений.ПлановыеПоказателиСметы.ПолучитьПоследнее( ДатаПроцента );
	Возврат Стр[НазваниеПоказателя];
КонецФункции

&НаСервере
Функция ГодЗадачиПроекта( ЗадачаПроекта )  Экспорт 
	Если ЗначениеЗаполнено( ЗадачаПроекта.НачалоРабот ) Тогда
		Возврат Год( ЗадачаПроекта.НачалоРабот );
	КонецЕсли;
	Возврат ЗадачаПроекта.Владелец.ГодПроекта;
КонецФункции


&НаСервере
Функция ГодФондаПодразделения( Дата )  Экспорт 
	Если НЕ ЗначениеЗаполнено( Дата ) Тогда Возврат 0; КонецЕсли;
	
	Год = Год( Дата );
	Возврат ?(Год >= 2017, Год( Дата), 0 );
КонецФункции

#Область ФункцииДляРасчетаСметыЗадачи

&НаСервере
Функция ФондДП(ЗадачаПроекта) Экспорт
	Если НЕ ЗначениеЗаполнено( ЗадачаПроекта.Ссылка ) Тогда
		Возврат 0;
	КонецЕсли;
	Год = ЗадачаПроекта.Владелец.ГодПроекта;
	Отбор = Новый Структура;
	Отбор.Вставить("Подразделение", ЗадачаПроекта.Подразделение );
	сЗаписи = РегистрыСведений.КоэффициентФОТПодразделений.ПолучитьПоследнее( Дата(Год, 1, 1),Отбор );
	Возврат сЗаписи.ПараметрДиректораПроекта;
КонецФункции

&НаСервере
Функция КоэффПодразделения(ЗадачаПроекта, Вариант = 1 ) Экспорт
	Планирование 	= (Вариант=1);
	Если ЗначениеЗаполнено( ЗадачаПроекта.Владелец.ГодПроекта ) Тогда
		Дата	= НачалоГода( Дата( ЗадачаПроекта.Владелец.ГодПроекта, 1, 1 ));
	Иначе
		// на всякий случай
		Дата	= ТекущаяДата();
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗадачаПроекта.Подразделение) Тогда
		Коэфф 	= КоэффициентФОТПодразделения( ЗадачаПроекта.Подразделение, Планирование, Дата);
	Иначе
		Коэфф	= 0;
	КонецЕсли;
	
	Если Коэфф <> 0 Тогда
		// в процентах
		Процент			= (Коэфф-1)*100;
	Иначе
		Процент			= 0;
	КонецЕсли;
	
	Возврат Процент;
КонецФункции

&НаСервере
Функция РКО(ЗадачаПроекта) Экспорт
	Если ЗначениеЗаполнено( ЗадачаПроекта.НачалоРабот ) Тогда
		Дата	= НачалоГода( ЗадачаПроекта.НачалоРабот );
		
	ИначеЕсли ЗначениеЗаполнено( ЗадачаПроекта.Владелец.ГодПроекта ) Тогда
		Дата	= НачалоГода( Дата( ЗадачаПроекта.Владелец.ГодПроекта, 1, 1 ));
	Иначе
		// на всякий случай
		Дата	= ТекущаяДата();
	КонецЕсли;
	
	КоэффРКО = РегистрыСведений.ПлановыеПоказателиСметы.ПолучитьПоследнее( Дата ).СтавкаРКО;
	
	Возврат КоэффРКО;
КонецФункции


#КонецОбласти

#Область ПланДоходов

&НаСервере
Функция СуммаПоСметеЗадачиПроекта( ЗадачаПроекта, СтатьяСметы) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(СметаЗадачиПроектаРасчет.Сумма) КАК СуммаПоСмете,
		|	СметаЗадачиПроектаРасчет.Ссылка.ЗадачаПроекта
		|ИЗ
		|	Документ.СметаЗадачиПроекта.Расчет КАК СметаЗадачиПроектаРасчет
		|ГДЕ
		|	СметаЗадачиПроектаРасчет.Ссылка.ЗадачаПроекта = &ЗадачаПроекта
		|	И СметаЗадачиПроектаРасчет.Статья = &СтатьяСметы
		|	И СметаЗадачиПроектаРасчет.Ссылка.ПометкаУдаления = &ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	СметаЗадачиПроектаРасчет.Ссылка.ЗадачаПроекта
		|";
	
		
	Запрос.УстановитьПараметр("ЗадачаПроекта", ЗадачаПроекта);
	Запрос.УстановитьПараметр("СтатьяСметы", СтатьяСметы );
	//Добавлено по задаче #131515 Гумедин А.Г. 03.07.2018
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь );
	
	тз = Запрос.Выполнить().Выгрузить();
	Если тз.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	
	Возврат тз[0].СуммаПоСмете;
	
КонецФункции

// для проведения сметы задачи проекта сумма по смете передается из обработки проведения
&НаСервере
Функция РаспределениеДоходовПоЗадачеПроекта_Уст( ЗадачаПроекта, СуммаПоСмете = Неопределено )   Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПроектовЭтапыГрафикаОплаты.Ссылка КАК ЗадачаПроекта,
		|	НАЧАЛОПЕРИОДА(ЗадачиПроектовЭтапыГрафикаОплаты.ДатаПлатежа, МЕСЯЦ) КАК Месяц,
		|	СУММА(ЗадачиПроектовЭтапыГрафикаОплаты.СуммаПлатежа) КАК СуммаПоЗадаче,
		|	СУММА(0) КАК СуммаПоДоговору,
		|	ВЫБОР
		|		КОГДА ЗадачиПроектовЭтапыГрафикаОплаты.Гарантировано
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Гарантировано
		|ИЗ
		|	Справочник.ЗадачиПроектов.ЭтапыГрафикаОплаты КАК ЗадачиПроектовЭтапыГрафикаОплаты
		|ГДЕ
		|	ЗадачиПроектовЭтапыГрафикаОплаты.Ссылка = &ЗадачаПроекта
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ЗадачиПроектовЭтапыГрафикаОплаты.ДатаПлатежа, МЕСЯЦ),
		|	ЗадачиПроектовЭтапыГрафикаОплаты.Ссылка,
		|	ВЫБОР
		|		КОГДА ЗадачиПроектовЭтапыГрафикаОплаты.Гарантировано
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбеспечениеОплатаОбороты.ЗадачаПроекта,
		|	ОбеспечениеОплатаОбороты.Месяц,
		|	СУММА(0),
		|	СУММА(ОбеспечениеОплатаОбороты.СуммаОбеспеченоОборот),
		|	1
		|ИЗ
		|	РегистрНакопления.ОбеспечениеОплата.Обороты КАК ОбеспечениеОплатаОбороты
		|ГДЕ
		|	ОбеспечениеОплатаОбороты.ЗадачаПроекта = &ЗадачаПроекта
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбеспечениеОплатаОбороты.Месяц,
		|	ОбеспечениеОплатаОбороты.ЗадачаПроекта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Месяц";
	
	Запрос.УстановитьПараметр("ЗадачаПроекта", ЗадачаПроекта);
	
	Если СуммаПоСмете = Неопределено Тогда
		СуммаПоСмете 	= СуммаПоСметеЗадачиПроекта( ЗадачаПроекта, Справочники.СтатьиСметы.ДохФинансовые );
	КонецЕсли;
	
	Если СуммаПоСмете = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	тзОбеспечено   	= Запрос.Выполнить().Выгрузить();
	Недопланировано = СуммаПоСмете - тзОбеспечено.Итог("СуммаПоЗадаче");
	
	Если 		Недопланировано > 0 Тогда
	// если в задаче сумма расписана не полностью, то добавляем в последний месяц работ по задаче
		ПоследнийМесяц = ПоследнийМесяцРаботПоЗадаче( ЗадачаПроекта );
		Стр = тзОбеспечено.Найти( ПоследнийМесяц, "Месяц");
		Если Стр = Неопределено Тогда
			Стр 				= тзОбеспечено.Добавить();
			Стр.ЗадачаПроекта 	= ЗадачаПроекта;
			Стр.Месяц 			= ПоследнийМесяц;
			Стр.СуммаПоЗадаче	= 0;
			Стр.СуммаПоДоговору	= 0;
		КонецЕсли;
		Стр.СуммаПоЗадаче = Стр.СуммаПоЗадаче + Недопланировано;
		
	ИначеЕсли Недопланировано < 0 Тогда
	// по задаче проекта посчитано больше чем в смете задачи
	// уменьшаем план пропорционально
		мК 		= тзОбеспечено.ВыгрузитьКолонку( "СуммаПоЗадаче");
		мСумм 	= РаспределитьПропорционально( Недопланировано, мК, 2 );
		Индекс 	= 0;

		Для Каждого Сумма ИЗ мСумм Цикл
			СтрОбеспечено				= тзОбеспечено[Индекс];
			Индекс	= Индекс + 1;
			
			// 
			СтрОбеспечено.СуммаПоЗадаче	= СтрОбеспечено.СуммаПоЗадаче + Сумма;
		КонецЦикла;
	
	КонецЕсли;	
	
	тзОбеспечено.Свернуть( "ЗадачаПроекта,Месяц", "СуммаПоЗадаче,СуммаПоДоговору,Гарантировано");
	//тзОбеспечено.Свернуть( "ЗадачаПроекта,Месяц,Гарантировано", "СуммаПоЗадаче,СуммаПоДоговору");
	тзОбеспечено.Сортировать( "ЗадачаПроекта,Месяц");
	
	тзОбеспечено.Колонки.Добавить("СуммаПоСмете", 			Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	тзОбеспечено.ЗаполнитьЗначения(СуммаПоСмете, "СуммаПоСмете");
	
	
	тзОбеспечено.Колонки.Добавить("ОбеспеченоДоговорами", 	Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	тзОбеспечено.Колонки.Добавить("ОбеспеченоГарантия", 	Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	тзОбеспечено.Колонки.Добавить("ОбеспеченоПоЗадаче", 	Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	тзОбеспечено.Колонки.Добавить("Обеспечено", 			Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	тзОбеспечено.Колонки.Добавить("ОбеспеченоПроц", 		Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	тзОбеспечено.Колонки.Добавить("КСметеПроц", 			Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	
	// сначала проставляем даты по договорам
	Для Каждого СтрМ ИЗ тзОбеспечено Цикл
		Если СтрМ.СуммаПоДоговору <> 0 Тогда
			СтрМ.ОбеспеченоДоговорами	= СтрМ.СуммаПоДоговору;
		КонецЕсли;
	КонецЦикла;
	
	
	ИтогоОбеспеченоДоговорами	= тзОбеспечено.Итог("СуммаПоДоговору");
	//ИмяКолонки					= ?(ЗадачаПроекта.ГарантированаОплата, "ОбеспеченоГарантия", "ОбеспеченоПоЗадаче" );
	НакопленоПоЗадачам			= 0;
	// теперь пока сумма по задаче не накопиться
	Для Каждого СтрМ ИЗ тзОбеспечено Цикл
		ИмяКолонки	= ?(СтрМ.Гарантировано>0, "ОбеспеченоГарантия", "ОбеспеченоПоЗадаче" );
		
		Если СтрМ.СуммаПоЗадаче > 0 Тогда
			
			Если НакопленоПоЗадачам > ИтогоОбеспеченоДоговорами Тогда
			// вся сумма остается на задаче
				СтрМ[ИмяКолонки]	= СтрМ.СуммаПоЗадаче;
				
				
			ИначеЕсли (НакопленоПоЗадачам + СтрМ.СуммаПоЗадаче )> ИтогоОбеспеченоДоговорами Тогда
			// сейчас перейдем
				СтрМ[ИмяКолонки] = (НакопленоПоЗадачам + СтрМ.СуммаПоЗадаче ) - ИтогоОбеспеченоДоговорами;
				
				
			КонецЕсли;
			
			
			НакопленоПоЗадачам = НакопленоПоЗадачам + СтрМ.СуммаПоЗадаче;
		КонецЕсли;
		// всего
		СтрМ.Обеспечено = СтрМ.ОбеспеченоДоговорами + СтрМ[ИмяКолонки];
		СтрМ.КСметеПроц	= (СтрМ.Обеспечено / СуммаПоСмете)*100;
		
	КонецЦикла;
	
	// теперь распределяем проценты
	мК 		= тзОбеспечено.ВыгрузитьКолонку("Обеспечено");
	//100 процентов
	мПроц 	= РаспределитьПропорционально( 100, мК, 2 );
	Индекс 	= 0;
	Для Каждого ОбеспПроцент ИЗ мПроц Цикл
		СтрОбеспеч	= тзОбеспечено[Индекс];
		Индекс	= Индекс + 1;
		СтрОбеспеч.ОбеспеченоПроц = ОбеспПроцент;
	КонецЦикла;
	
	Возврат тзОбеспечено;
	
КонецФункции

&НаСервере
Функция ПоследнийМесяцРаботПоЗадаче( ЗадачаПроекта ) Экспорт
	// начало расчета
	//Попытка
	//	ПоследнийМесяц = Дата( ЗадачаПроекта.Владелец.ГодПроекта, 12, 1);
	//Исключение
	//	с=  4;
	//КонецПопытки;
	//
	//// последний запланированный месяц графика оплаты
	//Если ЗадачаПроекта.ЭтапыГрафикаОплаты.Количество() <> 0 Тогда
	//	тз = ЗадачаПроекта.ЭтапыГрафикаОплаты.Выгрузить();
	//	тз.Сортировать("ДатаПлатежа");
	//	Дата = тз[тз.Количество()-1].ДатаПлатежа;
	//	
	//	ПоследнийМесяц = МАКС( ПоследнийМесяц, НачалоМесяца( ДобавитьМесяц( Дата, 1)));
	//КонецЕсли;
	//
	//
	//Если ЗначениеЗаполнено( ЗадачаПроекта.ОкончаниеРабот ) Тогда
	//// явно указан
	//	ПоследнийМесяц = МАКС( ПоследнийМесяц, НачалоМесяца( ЗадачаПроекта.ОкончаниеРабот ));
	//	
	//ИначеЕсли ЗначениеЗаполнено( ЗадачаПроекта.НачалоРабот ) Тогда
	//// год начала работ	
	//	ПоследнийМесяц = МАКС( ПоследнийМесяц, НачалоМесяца( КонецГода( ЗадачаПроекта.ОкончаниеРабот )));
	//	
	//КонецЕсли;
	
	//ЗадачаПроекта.ОкончаниеРабот заполнено всегда
	Возврат НачалоМесяца(ЗадачаПроекта.ОкончаниеРабот);
КонецФункции

&НаСервере
Функция РаспределениеДоходовПоПроектам( ГодПроекта, ГодЗадач, СтатусыПроектов = Неопределено, ВключатьОбПП = Ложь, ВРежимеВебСервиса = Ложь, ЗадачаПроекта = Неопределено ) Экспорт
	тзРез = Неопределено;
	
	Если ЗначениеЗаполнено( ГодПроекта ) ИЛИ ЗначениеЗаполнено( ГодЗадач ) 
	или ЗначениеЗаполнено( ЗадачаПроекта) Тогда
	Иначе
		Возврат тзРез;
	КонецЕсли;
	Если СтатусыПроектов = Неопределено Тогда
		СтатусыПроектов = УП_ДанныеДляБюджета.СтатусыПроектовДляБюджета();
	КонецЕсли;
		

	
		
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПроектов.Ссылка
		|ИЗ
		|	Документ.СметаЗадачиПроекта КАК СметаЗадачиПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроектов КАК ЗадачиПроектов
		|		ПО СметаЗадачиПроекта.ЗадачаПроекта = ЗадачиПроектов.Ссылка
		|ГДЕ
		|	(&ГодПроекта = 0
		|			ИЛИ ЗадачиПроектов.Владелец.ГодПроекта = &ГодПроекта)
		|	И (&ВсеМенеджеры
		|			ИЛИ ЗадачиПроектов.Владелец.МенеджерПроекта В (&КлиентМенеджеры))
		|	И ЗадачиПроектов.Владелец.Статус В(&СтатусыПроектов)
		|	И СметаЗадачиПроекта.Проведен
		|	И (&ГодЗадач = 0
		|			ИЛИ ВЫБОР
		|				КОГДА ЗадачиПроектов.НачалоРабот = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА ЗадачиПроектов.Владелец.ГодПроекта
		|				ИНАЧЕ ГОД(ЗадачиПроектов.НачалоРабот)
		|			КОНЕЦ = &ГодЗадач)
		|	И ВЫБОР
		|			КОГДА &ВключатьОбПП
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НЕ ЗадачиПроектов.ОбеспеченоПрошлымиПериодами
		|		КОНЕЦ
		|	И (&ВсеЗадачи
		|			ИЛИ ЗадачиПроектов.Ссылка = &ЗадачаПроекта)";
	
	
	Если ЗадачаПроекта = Неопределено Тогда
		Запрос.УстановитьПараметр("ВсеМенеджеры", 		?(ВРежимеВебСервиса, Истина, СКД_ВсеМенеджеры()));
		Запрос.УстановитьПараметр("КлиентМенеджеры", 	СКД_ДоступныеФЛ());
		Запрос.УстановитьПараметр("ВключатьОбПП",		ВключатьОбПП );
		Запрос.УстановитьПараметр("ГодПроекта", 		ГодПроекта);
		Запрос.УстановитьПараметр("ГодЗадач", 			ГодЗадач);
		Запрос.УстановитьПараметр("СтатусыПроектов", 	СтатусыПроектов.ВыгрузитьЗначения());
		Запрос.УстановитьПараметр("ВсеЗадачи", 			Истина);
		Запрос.УстановитьПараметр("ЗадачаПроекта", 		Неопределено);
	Иначе
		мСтатусыПроектов 	= Новый Массив;
		мСтатусыПроектов.Добавить(ЗадачаПроекта.Владелец.Статус);
		
		Запрос.УстановитьПараметр("ВсеМенеджеры", 		Истина);
		Запрос.УстановитьПараметр("КлиентМенеджеры", 	Новый Массив);
		Запрос.УстановитьПараметр("ВключатьОбПП",		Истина);
		Запрос.УстановитьПараметр("ГодПроекта", 		0);
		Запрос.УстановитьПараметр("ГодЗадач", 			0);
		Запрос.УстановитьПараметр("СтатусыПроектов", 	мСтатусыПроектов);
		Запрос.УстановитьПараметр("ВсеЗадачи", 			Ложь);
		Запрос.УстановитьПараметр("ЗадачаПроекта", 		ЗадачаПроекта);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		тзЗП =  РаспределениеДоходовПоЗадачеПроекта( ВыборкаДетальныеЗаписи.Ссылка );
		Если тзЗП = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		
		Если тзРез = Неопределено Тогда
			тзРез = тзЗП.СкопироватьКолонки();
		КонецЕсли;
		
		Для Каждого СтрЗП ИЗ тзЗП Цикл
			СтрРез = тзРез.Добавить();
			ЗаполнитьЗначенияСвойств( СтрРез, СтрЗП );
		КонецЦикла;
			
	КонецЦикла;
	// удаляем с нулевой обеспеченностью
	Если тзРез <> Неопределено Тогда
		Отбор = Новый Структура("Обеспечено", 0);
		Строки_0_Обесп = тзРез.НайтиСтроки( Отбор );
		Для Каждого Стр0 ИЗ Строки_0_Обесп Цикл
			тзРез.Удалить( Стр0 );
		КонецЦикла;
	
		тзРез.Сортировать("Месяц,ЗадачаПроекта");
	КонецЕсли;
	Возврат тзРез;	
КонецФункции

// возвращает тип задачи
// 1 - прогноз
// 2 - гарантия
// 3 - договор
&НаСервере
Функция ОпределитьТипДоходовПоЗадаче( ЗадачаПроекта )  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СметаЗадачиПроектаДокументы.Ссылка.ЗадачаПроекта,
		|	ИСТИНА КАК Гарантия
		|ПОМЕСТИТЬ ВТ_ЗадачиГарантия
		|ИЗ
		|	Документ.СметаЗадачиПроекта.Документы КАК СметаЗадачиПроектаДокументы
		|ГДЕ
		|	СметаЗадачиПроектаДокументы.Ссылка.Проведен
		|	И СметаЗадачиПроектаДокументы.Ссылка.ЗадачаПроекта = &ЗадачаПроекта
		|	И ТИПЗНАЧЕНИЯ(СметаЗадачиПроектаДокументы.Документ) = ТИП(Документ.ПланРабот)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ДоговорЗадачиПроекта.Сумма) КАК СуммаПоДоговору,
		|	ДоговорЗадачиПроекта.ЗадачаПроекта,
		|	ИСТИНА КАК Договорная
		|ПОМЕСТИТЬ ВТ_Договоры
		|ИЗ
		|	Документ.Договор.ЗадачиПроекта КАК ДоговорЗадачиПроекта
		|ГДЕ
		|	ДоговорЗадачиПроекта.Ссылка.Проведен
		|	И ДоговорЗадачиПроекта.ЗадачаПроекта = &ЗадачаПроекта
		|	И ДоговорЗадачиПроекта.Сумма > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоговорЗадачиПроекта.ЗадачаПроекта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ЗадачиГарантия.Гарантия, ЛОЖЬ) КАК Гарантия,
		|	ЕСТЬNULL(ВТ_Договоры.Договорная, ЛОЖЬ) КАК Прогноз,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТ_ЗадачиГарантия.Гарантия, ЛОЖЬ)
		|				И ЕСТЬNULL(ВТ_Договоры.Договорная, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Договорная
		|ИЗ
		|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗадачиГарантия КАК ВТ_ЗадачиГарантия
		|		ПО ЗадачиПроектов.Ссылка = ВТ_ЗадачиГарантия.ЗадачаПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Договоры КАК ВТ_Договоры
		|		ПО ЗадачиПроектов.Ссылка = ВТ_Договоры.ЗадачаПроекта
		|ГДЕ
		|	ЗадачиПроектов.Ссылка = &ЗадачаПроекта";
	
	Запрос.УстановитьПараметр("ЗадачаПроекта", ЗадачаПроекта);
	
	// результат есть всегда
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса[0];
	
КонецФункции


&НаСервере
Функция ГрафикОплатыЗадачиДоговорам( ЗадачаПроекта ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбеспечениеОплатаОбороты.ЗадачаПроекта КАК ЗадачаПроекта,
		|	ОбеспечениеОплатаОбороты.Месяц КАК ДатаПлатежа,
		|	СУММА(ОбеспечениеОплатаОбороты.СуммаОбеспеченоОборот) КАК СуммаПлатежа
		|ИЗ
		|	РегистрНакопления.ОбеспечениеОплата.Обороты КАК ОбеспечениеОплатаОбороты
		|ГДЕ
		|	ОбеспечениеОплатаОбороты.ЗадачаПроекта = &ЗадачаПроекта
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбеспечениеОплатаОбороты.Месяц,
		|	ОбеспечениеОплатаОбороты.ЗадачаПроекта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Месяц";
	
	Запрос.УстановитьПараметр("ЗадачаПроекта", ЗадачаПроекта);
	тзОбеспечено   	= Запрос.Выполнить().Выгрузить();
	Возврат 	тзОбеспечено;
	
КонецФункции

//Добавлено 18.05.2018 Гумединым А.Г. по задаче #129069
&НаСервере
Функция ГрафикРеализацииЗадачиДоговорам( ЗадачаПроекта ) Экспорт
	Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ОбеспечениеОплатаОбороты.ЗадачаПроекта КАК ЗадачаПроекта,
	//	|	ОбеспечениеОплатаОбороты.Месяц КАК ДатаРеализации,
	//	|	СУММА(ОбеспечениеОплатаОбороты.СуммаОбеспеченоОборот) КАК СуммаРеализации
	//	|ИЗ
	//	|	РегистрНакопления.ОбеспечениеОплата.Обороты КАК ОбеспечениеОплатаОбороты
	//	|ГДЕ
	//	|	ОбеспечениеОплатаОбороты.ЗадачаПроекта = &ЗадачаПроекта
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ОбеспечениеОплатаОбороты.Месяц,
	//	|	ОбеспечениеОплатаОбороты.ЗадачаПроекта
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	Месяц";
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Реализация.Месяц КАК ДатаРеализации,
		|	Реализация.План КАК СуммаПлан,
		|	0 КАК СуммаФакт,
		|	Реализация.ВидПлана КАК ВидПлана
		|ИЗ
		|	РегистрНакопления.Реализация КАК Реализация
		|ГДЕ
		|	Реализация.ЗадачаПроекта = &ЗадачаПроекта И План <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Реализация.Месяц КАК ДатаРеализации,
		|	0 КАК СуммаПлан,
		|	Реализация.Факт КАК СуммаФакт,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПланаБюджета.Обеспечено) КАК ВидПлана
		|ИЗ
		|	РегистрНакопления.Реализация КАК Реализация
		|ГДЕ
		|	Реализация.ЗадачаПроекта = &ЗадачаПроекта И Факт <> 0";
	
	Запрос.УстановитьПараметр("ЗадачаПроекта", ЗадачаПроекта);
	тзРеализация = Запрос.Выполнить().Выгрузить();
	тзРеализация.Свернуть("ДатаРеализации, ВидПлана", "СуммаПлан, СуммаФакт");
	Возврат	тзРеализация;
	
КонецФункции

&НаСервере
Функция РаспределениеДоходовПоЗадачеПроекта( ЗадачаПроекта, СуммаПоСмете = Неопределено )   Экспорт
	
	// определяем тип задачи
	// задача может быть и договорной и гарантией
	// строка ТЗ 
	ТипДоходаПоЗадаче = ОпределитьТипДоходовПоЗадаче( ЗадачаПроекта );
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПроектовЭтапыГрафикаОплаты.Ссылка КАК ЗадачаПроекта,
		|	НАЧАЛОПЕРИОДА(ЗадачиПроектовЭтапыГрафикаОплаты.ДатаПлатежа, МЕСЯЦ) КАК Месяц,
		|	СУММА(ЗадачиПроектовЭтапыГрафикаОплаты.СуммаПлатежа) КАК СуммаПоЗадаче,
		|	СУММА(0) КАК СуммаПоДоговору,
		|	ЗадачиПроектовЭтапыГрафикаОплаты.Ссылка.Владелец КАК Проект
		|ИЗ
		|	Справочник.ЗадачиПроектов.ЭтапыГрафикаОплаты КАК ЗадачиПроектовЭтапыГрафикаОплаты
		|ГДЕ
		|	ЗадачиПроектовЭтапыГрафикаОплаты.Ссылка = &ЗадачаПроекта
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ЗадачиПроектовЭтапыГрафикаОплаты.ДатаПлатежа, МЕСЯЦ),
		|	ЗадачиПроектовЭтапыГрафикаОплаты.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбеспечениеОплатаОбороты.ЗадачаПроекта,
		|	ОбеспечениеОплатаОбороты.Месяц,
		|	СУММА(0),
		|	СУММА(ОбеспечениеОплатаОбороты.СуммаОбеспеченоОборот),
		|	ОбеспечениеОплатаОбороты.ЗадачаПроекта.Владелец
		|ИЗ
		|	РегистрНакопления.ОбеспечениеОплата.Обороты КАК ОбеспечениеОплатаОбороты
		|ГДЕ
		|	ОбеспечениеОплатаОбороты.ЗадачаПроекта = &ЗадачаПроекта
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбеспечениеОплатаОбороты.Месяц,
		|	ОбеспечениеОплатаОбороты.ЗадачаПроекта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Месяц";
	
	Запрос.УстановитьПараметр("ЗадачаПроекта", ЗадачаПроекта);
	
	Если СуммаПоСмете = Неопределено Тогда
		СуммаПоСмете 	= СуммаПоСметеЗадачиПроекта( ЗадачаПроекта, Справочники.СтатьиСметы.ДохФинансовые );
	КонецЕсли;
	
	// вернул 2017 07 03
	Если СуммаПоСмете = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	тзОбеспечено   	= Запрос.Выполнить().Выгрузить();
	// 2017 06 30
	ПоследнийМесяц = ПоследнийМесяцРаботПоЗадаче( ЗадачаПроекта );
	Если тзОбеспечено.Количество() = 0 Тогда
		Стр 				= тзОбеспечено.Добавить();
		Стр.Проект 			= ЗадачаПроекта.Владелец;
		Стр.ЗадачаПроекта 	= ЗадачаПроекта;
		Стр.Месяц 			= ПоследнийМесяц;
		Стр.СуммаПоЗадаче	= СуммаПоСмете; // тогда всегда Недопланировано = 0
		Стр.СуммаПоДоговору	= 0;
	КонецЕсли;
	
	Недопланировано = СуммаПоСмете - тзОбеспечено.Итог("СуммаПоЗадаче");
	
	Если 		Недопланировано > 0 Тогда
	// если в задаче сумма расписана не полностью, то добавляем в последний месяц работ по задаче
		Стр = тзОбеспечено.Найти( ПоследнийМесяц, "Месяц");
		Если Стр = Неопределено Тогда
			Стр 				= тзОбеспечено.Добавить();
			Стр.Проект 			= ЗадачаПроекта.Владелец;
			Стр.ЗадачаПроекта 	= ЗадачаПроекта;
			Стр.Месяц 			= ПоследнийМесяц;
			Стр.СуммаПоЗадаче	= 0;
			Стр.СуммаПоДоговору	= 0;
		КонецЕсли;
		Стр.СуммаПоЗадаче = Стр.СуммаПоЗадаче + Недопланировано;
		
	ИначеЕсли Недопланировано < 0 Тогда
	// по задаче проекта посчитано больше чем в смете задачи
	// уменьшаем план пропорционально
		мК 		= тзОбеспечено.ВыгрузитьКолонку( "СуммаПоЗадаче");
		мСумм 	= РаспределитьПропорционально( Недопланировано, мК, 2 );
		Индекс 	= 0;

		Для Каждого Сумма ИЗ мСумм Цикл
			СтрОбеспечено				= тзОбеспечено[Индекс];
			Индекс	= Индекс + 1;
			
			// 
			СтрОбеспечено.СуммаПоЗадаче	= СтрОбеспечено.СуммаПоЗадаче + Сумма;
		КонецЦикла;
	
	КонецЕсли;	
	
	тзОбеспечено.Свернуть( 		"Проект,ЗадачаПроекта,Месяц", "СуммаПоЗадаче,СуммаПоДоговору");
	тзОбеспечено.Сортировать( 	"Проект,ЗадачаПроекта,Месяц");
	
	//тзОбеспечено.Колонки.Добавить("ТипДохода", 				Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	// типы дохода
	тзОбеспечено.Колонки.Добавить("Договорная", 		Новый ОписаниеТипов("Булево"));
	тзОбеспечено.Колонки.Добавить("Гарантия", 			Новый ОписаниеТипов("Булево"));
	тзОбеспечено.Колонки.Добавить("Прогноз", 			Новый ОписаниеТипов("Булево"));
	
	тзОбеспечено.Колонки.Добавить("СуммаПоСмете", 			Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	тзОбеспечено.ЗаполнитьЗначения(СуммаПоСмете, "СуммаПоСмете");
	
	
	тзОбеспечено.Колонки.Добавить("ОбеспеченоДоговорами", 	Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	тзОбеспечено.Колонки.Добавить("ОбеспеченоГарантия", 	Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	тзОбеспечено.Колонки.Добавить("ОбеспеченоПоЗадаче", 	Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	тзОбеспечено.Колонки.Добавить("Обеспечено", 			Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	тзОбеспечено.Колонки.Добавить("ОбеспеченоПроц", 		Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	тзОбеспечено.Колонки.Добавить("КСметеПроц", 			Новый ОписаниеТипов("Число"));//, Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный))); );
	
	// сначала проставляем даты по договорам
	Для Каждого СтрМ ИЗ тзОбеспечено Цикл
		// на каждый месяц
		ЗаполнитьЗначенияСвойств( СтрМ, ТипДоходаПоЗадаче );
		
		Если СтрМ.СуммаПоДоговору <> 0 Тогда
			СтрМ.ОбеспеченоДоговорами	= СтрМ.СуммаПоДоговору;
		КонецЕсли;
	КонецЦикла;
	
	
	ИтогоОбеспеченоДоговорами	= тзОбеспечено.Итог("СуммаПоДоговору");
	НакопленоПоЗадачам			= 0;
	
	// теперь пока сумма по задаче не накопится
	Для Каждого СтрМ ИЗ тзОбеспечено Цикл
		//СтрМ.ТипДохода 	= ТипДоходаПоЗадаче;
		//ИмяКолонки		= ?(СтрМ.ТипДохода = 2, "ОбеспеченоГарантия", "ОбеспеченоПоЗадаче" );
		ИмяКолонки		= ?(СтрМ.Прогноз, "ОбеспеченоПоЗадаче", "ОбеспеченоГарантия" );
		
		Если СтрМ.СуммаПоЗадаче > 0 Тогда
			
			Если НакопленоПоЗадачам > ИтогоОбеспеченоДоговорами Тогда
			// вся сумма остается на задаче
				СтрМ[ИмяКолонки]	= СтрМ.СуммаПоЗадаче;
				
				
			ИначеЕсли (НакопленоПоЗадачам + СтрМ.СуммаПоЗадаче )> ИтогоОбеспеченоДоговорами Тогда
			// сейчас перейдем через границу
			// на задаче оставляем остаток
				СтрМ[ИмяКолонки]	= (НакопленоПоЗадачам + СтрМ.СуммаПоЗадаче ) - ИтогоОбеспеченоДоговорами;
				
				
			КонецЕсли;
			
			
			НакопленоПоЗадачам = НакопленоПоЗадачам + СтрМ.СуммаПоЗадаче;
		КонецЕсли;
		// всего
		СтрМ.Обеспечено = СтрМ.ОбеспеченоДоговорами + СтрМ[ИмяКолонки];
		СтрМ.КСметеПроц	= (СтрМ.Обеспечено / СуммаПоСмете)*100;
		
	КонецЦикла;
	
	// теперь распределяем проценты
	мК 		= тзОбеспечено.ВыгрузитьКолонку("Обеспечено");
	//100 процентов
	мПроц 	= РаспределитьПропорционально( 100, мК, 2 );
	Индекс 	= 0;
	Для Каждого ОбеспПроцент ИЗ мПроц Цикл
		СтрОбеспеч	= тзОбеспечено[Индекс];
		Индекс	= Индекс + 1;
		СтрОбеспеч.ОбеспеченоПроц = ОбеспПроцент;
	КонецЦикла;
	
	Возврат тзОбеспечено;
	
КонецФункции


#КонецОбласти