// Процедура печати документа.
//
Функция ПечатьСхемыЗадачиПроекта(МассивОбъектов, ОбъектыПечати, ИмяМакета = "СхемаРабот") Экспорт
	Запрос = Новый Запрос;

	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ПланРабот.Ссылка
	//	|ИЗ
	//	|	Документ.ПланРабот КАК ПланРабот
	//	|ГДЕ
	//	|	ПланРабот.Ссылка В(&МассивОбъектов)
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	КалькуляторПланаРабот.Ссылка
	//	|ИЗ
	//	|	Справочник.КалькуляторПланаРабот КАК КалькуляторПланаРабот
	//	|ГДЕ
	//	|	КалькуляторПланаРабот.Ссылка В(&МассивОбъектов)";
	//
	//
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Шапка = Запрос.Выполнить().Выбрать();
	
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "СхемаРабот_СхемаРабот";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщиеМакеты.ПФ_MXL_СхемаРабот");
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// выводим документ
		СформироватьСхемуРаботПоИсточнику(ТабличныйДокумент, Шапка.Ссылка, Макет );
		
		// конец вывода документа

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура СформироватьСхемуРаботПоИсточнику(ТабДок, Ссылка, Макет )
	
	
	// начальный фронт работ
	//Если 		ТипЗнч( Ссылка )= Тип("ДокументСсылка.ПланРабот" ) Тогда
	//	Источник 		= "Документ.ПланРабот.ФронтРабот";
	//	Проект	 		= Ссылка.ЗадачаПроекта.Владелец;
	//	ЗадачаПроекта 	= Ссылка.ЗадачаПроекта;
	//	Заголовок		= "План работ № " + Ссылка.Номер + " от " + Формат(Ссылка.Дата,"ДЛФ=D"); 
	//	
	//ИначеЕсли 	ТипЗнч( Ссылка )= Тип("СправочникСсылка.КалькуляторПланаРабот" ) Тогда
	//	Источник 		= "Справочник.КалькуляторПланаРабот.ФронтРабот";
	//	Проект	 		= Ссылка.Родитель.Наименование; 
	//	ЗадачаПроекта 	= Ссылка.Наименование;
	//	Заголовок		= "Калькулятор плана работ";
	//	
	//КонецЕсли;
	//
	//тзФронтРабот = ПолучитьФронтРаботПоИсточнику( Источник, Ссылка );
	//
	//тзДолжности 	 = тзФронтРабот.Скопировать(,"Должность,ТарифнаяСтавка");
	//тзДолжности.Свернуть( "Должность,ТарифнаяСтавка", "");
	//тзДолжности.Сортировать("Должность,ТарифнаяСтавка");
	//
	//Шапка = Макет.ПолучитьОбласть("Шапка|Начало");
	//ЗаполнитьЗначенияСвойств( Шапка.Параметры, Ссылка );
	//Шапка.Параметры.Заголовок 		= Заголовок;
	//Шапка.Параметры.ЗадачаПроекта 	= ЗадачаПроекта;
	//Шапка.Параметры.Проект 			= Проект;
	//
	//ТабДок.Вывести(Шапка );
	//Для Каждого НС из тзДолжности Цикл
	//	ШапкаК = Макет.ПолучитьОбласть("Шапка|Должность");
	//	ЗаполнитьЗначенияСвойств( ШапкаК.Параметры, НС );
	//	ТабДок.Присоединить(ШапкаК);
	//КонецЦикла;
	//ШапкаИ = Макет.ПолучитьОбласть("Шапка|Итого");
	//ТабДок.Присоединить(ШапкаИ );
	//
	//тзМесяцы = тзФронтРабот.Скопировать(,"Месяц");
	//тзМесяцы.Свернуть( "Месяц", "");
	//тзМесяцы.Сортировать("Месяц");
	//Для Каждого Месяц ИЗ тзМесяцы Цикл
	//	ОблМесяц = Макет.ПолучитьОбласть("Месяц|Начало");
	//	ОблМесяц.Параметры.Номер = тзМесяцы.Индекс( Месяц)  + 1;
	//	ОблМесяц.Параметры.Месяц = ПредставлениеПериода( НачалоМесяца( Месяц.Месяц ), 
	//													 КонецМесяца( Месяц.Месяц), "ФП=Истина");
	//	ТабДок.Вывести(ОблМесяц);
	//	
	//	//
	//	Для Каждого НС из тзДолжности Цикл
	//		ОблМесяцК = Макет.ПолучитьОбласть("Месяц|Должность");
	//		Р = ДетальноеКоличество( тзФронтРабот, Месяц.Месяц, НС.Должность, НС.ТарифнаяСтавка );
	//		ОблМесяцК.Параметры.Количество 	= Р["Количество"];
	//		ОблМесяцК.Параметры.Сумма 		= Р["Сумма"];
	//		ТабДок.Присоединить(ОблМесяцК );
	//	КонецЦикла;
	//	ОблМесяцИ = Макет.ПолучитьОбласть("Месяц|Итого");
	//	// 
	//	Р = ДетальноеКоличество( тзФронтРабот, Месяц.Месяц );
	//	ОблМесяцИ.Параметры.Количество 	= Р["Количество"];
	//	ОблМесяцИ.Параметры.Сумма 		= Р["Сумма"];
	//	ТабДок.Присоединить( ОблМесяцИ );
	//	
	//КонецЦикла;
	//
	//Подвал = Макет.ПолучитьОбласть("Подвал|Начало");
	//ЗаполнитьЗначенияСвойств( Шапка.Параметры, Ссылка );
	//ТабДок.Вывести(Подвал);
	//Для Каждого НС из тзДолжности Цикл
	//	ПодвалК = Макет.ПолучитьОбласть("Подвал|Должность");
	//	//
	//	Р = ДетальноеКоличество( тзФронтРабот,, НС.Должность, НС.ТарифнаяСтавка );
	//	ПодвалК.Параметры.Количество 	= Р["Количество"];
	//	ПодвалК.Параметры.Сумма 		= Р["Сумма"];
	//	
	//	
	//	
	//	ТабДок.Присоединить(ПодвалК );
	//КонецЦикла;
	//ПодвалИ = Макет.ПолучитьОбласть("Подвал|Итого");
	//
	//Р = ДетальноеКоличество( тзФронтРабот );
	//ПодвалИ.Параметры.Количество 	= Р["Количество"];
	//ПодвалИ.Параметры.Сумма 		= Р["Сумма"];
	//
	//
	//ТабДок.Присоединить(ПодвалИ);
	
	
	//}}
КонецПроцедуры


// календари

Функция ВидыРабочихДней() Экспорт
	ВидыДней = Новый Массив;
	ВидыДней.Добавить( Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий );
	ВидыДней.Добавить( Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный );
	Возврат ВидыДней;
КонецФункции

Функция ПолучитьДатуВыполнения( НачалоРабот, ОкончаниеРабот, ПроцентВыполнения ) Экспорт
	Продолжительность 	= УП_ПланыРаботПоПроектам.КоличествоРабочихДнейМеждуДатами( НачалоРабот, ОкончаниеРабот);
	ВыполненоДней  		= Окр( ПроцентВыполнения / 100 * Продолжительность, 0); 
	ДатаВыполнения 		= НоваяРабочаяДата( НачалоРабот, ВыполненоДней-1);
	Возврат МИН( ДатаВыполнения, ОкончаниеРабот);
КонецФункции


Функция ПроизводственныйКалендарь() 
	Возврат СКД_ПроизводственныйКалендарь();
КонецФункции

// обе даты - рабочие дни.
// не включая последний день
Функция РазницаРабочихДней( ПервыйДень, ПоследнийДень) Экспорт
	Если  ПервыйДень = ПоследнийДень Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(1) КАК КоличествоДней
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ВидДня В(&ВидыДня)
		|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И ДанныеПроизводственногоКалендаря.Дата < &ПоследнийДень
		|	И ДанныеПроизводственногоКалендаря.Дата >= &ПервыйДень";
	
	Запрос.УстановитьПараметр("ВидыДня", 					ВидыРабочихДней());
	Запрос.УстановитьПараметр("ПервыйДень", 				ПервыйДень);
	Запрос.УстановитьПараметр("ПоследнийДень", 				ПоследнийДень);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", 	ПроизводственныйКалендарь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.КоличествоДней;
	КонецЦикла;
	Возврат 0;
	
КонецФункции

Функция ЭтоРабочийДень( ДатаНачала, ПроизводственныйКалендарь, ВидыДня )
	Отбор = Новый Структура;
	Отбор.Вставить("ПроизводственныйКалендарь", ПроизводственныйКалендарь );
	Отбор.Вставить("Дата", ДатаНачала );
	Отбор.Вставить("Год",  Год(ДатаНачала));
	
	МенЗаписи 	= РегистрыСведений.ДанныеПроизводственногоКалендаря.Получить( Отбор );
	Возврат (ВидыДня.Найти( МенЗаписи.ВидДня ) <> Неопределено);
КонецФункции
	
Функция МассивНеРабочихДней( ДатаНачала, ДатаКонца ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
		|	ДанныеПроизводственногоКалендаря.ВидДня
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И ДанныеПроизводственногоКалендаря.Дата >= &ДатаНачала
		|	И ДанныеПроизводственногоКалендаря.Дата <= &ДатаКонца
		|	И НЕ ДанныеПроизводственногоКалендаря.ВидДня В (&ВидДня)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКонца",  КонецДня(ДатаКонца));
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь());
	Запрос.УстановитьПараметр("ВидДня",     ВидыРабочихДней());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Дата");
	Возврат РезультатЗапроса;
КонецФункции

Функция БлижайшийРабочийДень( Знач ДатаНачала, ПроизводственныйКалендарь, ВидыДня, Коэфф = 1)
	Пока Истина Цикл
		Если ЭтоРабочийДень( ДатаНачала, ПроизводственныйКалендарь, ВидыДня ) Тогда
			Возврат ДатаНачала;
		КонецЕсли;
		ДатаНачала = ДатаНачала + Коэфф * 24 * 60 * 60;
	КонецЦикла;
КонецФункции
		
	
Функция НоваяРабочаяДата( Знач ДатаНачала, Знач КоличествоРабочихДней, Коэфф = 1 ) Экспорт
	ПроизводственныйКалендарь 	= ПроизводственныйКалендарь();
	ВидыДня						= ВидыРабочихДней();
	
	// если дата начала не рабочий день
	ДатаНачала = БлижайшийРабочийДень( ДатаНачала, ПроизводственныйКалендарь, ВидыДня, Коэфф);
	Если 		КоличествоРабочихДней = 0 Тогда
		Возврат ДатаНачала;
	ИначеЕсли   КоличествоРабочихДней < 0 Тогда
	// убавить
		КоличествоРабочихДней = -КоличествоРабочихДней;
		ЗнакСравнения		  	= "<";
		ПорядокДат				= "УБЫВ";
	Иначе
		
		ЗнакСравнения		  	= ">";
		ПорядокДат				= "";
		
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ " + КоличествоРабочихДней + "
		|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ВидДня В(&ВидыДня)
		|	И ДанныеПроизводственногоКалендаря.Дата " + ЗнакСравнения + " &Дата
		|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата " + ПорядокДат;
	
	Запрос.УстановитьПараметр("ВидыДня", 						ВидыДня);
	Запрос.УстановитьПараметр("Дата", 							НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", 		ПроизводственныйКалендарь);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	КоличествоДат 	= РезультатЗапроса.Количество();
	Если КоличествоДат > 0 Тогда 
		Возврат РезультатЗапроса[КоличествоДат-1].Дата;
	КонецЕсли;
	
	Возврат ДатаНачала;
КонецФункции

Функция ОтнятьРабочиеДни( ДатаНачала, КоличествоРабочихДней )   Экспорт
	Возврат НоваяРабочаяДата( ДатаНачала, -КоличествоРабочихДней, -1 );
КонецФункции

Функция ДобавитьРабочиеДни( ДатаНачала, КоличествоРабочихДней ) Экспорт
	Возврат НоваяРабочаяДата( ДатаНачала, КоличествоРабочихДней );
КонецФункции
// календари

// Диаграмма Ганта
Функция ПолучитьЦепочкуРабот( ЗадачаПроекта ) Экспорт
	НачалоРабот = ?(ЗначениеЗаполнено( ЗадачаПроекта.НачалоРабот), ЗадачаПроекта.НачалоРабот, ТекущаяДата());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПроектовСтруктура.Ссылка КАК Работа,
		|	ЗадачиПроектовСтруктура.Родитель КАК Родитель,
		|	ЗадачиПроектовСтруктура.Продолжительность КАК Продолжительность,
		|	ЗадачиПроектовСтруктура.Код КАК Код,
		|	ЗадачиПроектовСтруктура.РаннийСтарт,
		|	ЗадачиПроектовСтруктура.РаннийФиниш,
		|	ЗадачиПроектовСтруктура.ПозднийСтарт,
		|	ЗадачиПроектовСтруктура.ПозднийФиниш,
		|	ЗадачиПроектовСтруктура.Резерв,
		|	ЛОЖЬ КАК Суммарная,
		|	ЗадачиПроектовСтруктура.Ресурсы.(
		|		Ссылка,
		|		НомерСтроки,
		|		Должность,
		|		Количество,
		|		Мощность
		|	),
		|	ЗадачиПроектовСтруктура.ПроцентВыполнения
		|ИЗ
		|	Справочник.ЗадачиПроектовСтруктура КАК ЗадачиПроектовСтруктура
		|ГДЕ
		|	ЗадачиПроектовСтруктура.Владелец = &Владелец
		|	И НЕ ЗадачиПроектовСтруктура.ЭтоВеха
		|
		|УПОРЯДОЧИТЬ ПО
		|	Родитель,
		|	Код";
		
	Запрос.УстановитьПараметр("Владелец", ЗадачаПроекта);
	// 1 
	тзРаботы = Запрос.Выполнить().Выгрузить( ОбходРезультатаЗапроса.Прямой  );
	// 2
	
	// формируем цепочки работ
	Цепочка = Новый Массив;
	// начинаем с нуля
	СформироватьЦепочкуРаботы( Цепочка, тзРаботы, Справочники.ЗадачиПроектовСтруктура.ПустаяСсылка() );
	
	// 1 шаг прямой
	РаннийФиниш = РасчитатьСрокиРабот1шаг( НачалоРабот, Цепочка );
	// 2 шаг обратный
	ОкончаниеРабот = ?(ЗначениеЗаполнено( ЗадачаПроекта.ОкончаниеРабот), ЗадачаПроекта.ОкончаниеРабот, РаннийФиниш);
	РасчитатьСрокиРабот2шаг( ОкончаниеРабот, Цепочка );
	
	Возврат Цепочка;
КонецФункции

Функция ПолучитьВехи( ЗадачаПроекта ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПроектовСтруктура.Ссылка,
		|	ЗадачиПроектовСтруктура.РаннийСтарт КАК Дата,
		|	ЗадачиПроектовСтруктура.Наименование,
		|	ЗадачиПроектовСтруктура.Закрыта
		|ИЗ
		|	Справочник.ЗадачиПроектовСтруктура КАК ЗадачиПроектовСтруктура
		|ГДЕ
		|	ЗадачиПроектовСтруктура.РаннийСтарт <> &ПустаяДата
		|	И ЗадачиПроектовСтруктура.ЭтоВеха
		|	И ЗадачиПроектовСтруктура.Владелец = &Владелец";
	
	
	Запрос.УстановитьПараметр("Владелец", ЗадачаПроекта);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1,1,1));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	мВехи = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		сВеха = Новый Структура;
		сВеха.Вставить("Дата", 			ВыборкаДетальныеЗаписи.Дата);
		сВеха.Вставить("Наименование", 	ВыборкаДетальныеЗаписи.Наименование);
		сВеха.Вставить("Закрыта", 		ВыборкаДетальныеЗаписи.Закрыта);
		
		мВехи.Добавить( сВеха );
		
	КонецЦикла;
	Возврат мВехи;
КонецФункции

Процедура СформироватьЦепочкуРаботы( Цепочка, тзРаботы, Работа, Знач Суммарные = Неопределено  )
	// элемент цепочки - звено
	Если Суммарные = Неопределено Тогда
		Суммарные = Новый Массив;
	КонецЕсли;
	
	// подчиненные работы
	// будем считать, что строки остаются в порядке кода	
	мРаботы 		= тзРаботы.НайтиСтроки( Новый Структура("Родитель", Работа));
	Для Каждого ПодчРабота ИЗ мРаботы Цикл
				
		мР2 = тзРаботы.НайтиСтроки( Новый Структура("Родитель", ПодчРабота.Работа));
		Суммарная = (мР2.Количество() <> 0);
		
		Если  Суммарная Тогда 
		// есть подчиненные работы
			Суммарные.Добавить( ПодчРабота.Работа );
			// перебираем подчиненные работы 
			СформироватьЦепочкуРаботы( Цепочка, тзРаботы, ПодчРабота.Работа, Суммарные  );
			
			Суммарные.Удалить( Суммарные.Количество()-1);
			
		Иначе
			// работа
			Звено = Новый Структура;
			Звено.Вставить("Работа", 			ПодчРабота.Работа);
			Звено.Вставить("Продолжительность", ПодчРабота.Продолжительность );
			Звено.Вставить("Суммарные", 		Новый Массив);
			Звено.Вставить("ПроцентВыполнения", ПодчРабота.ПроцентВыполнения);
			Звено.Вставить("НазваниеИнтервала", НазваниеИнтервала( ПодчРабота.ПроцентВыполнения, ПодчРабота.Ресурсы ));
			Для Каждого ЭлС ИЗ Суммарные Цикл
				Звено.Суммарные.Добавить( ЭлС );
			КонецЦикла;
			Звено.Вставить("Связь",  	Перечисления.ТипыСвязиРабот.КонецНачало);
			
			Цепочка.Добавить( Звено );
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

// цепочка от старта до финиша без суммарных работ
Функция РасчитатьСрокиРабот1шаг( НачалоРабот, Цепочка )
	Перем РаннийФиниш;
	РаннийФиниш = Дата(1,1,1);
	
	// прямо проход по цепочке
	Для Н = 0 По Цепочка.Количество()-1 Цикл
		Звено = Цепочка[Н];
		Если Н = 0 Тогда // первое звено
			РаннийСтарт = НачалоРабот;
		Иначе
		// есть предыдущее звено
			ВедущееЗвено= Цепочка[Н-1];
			РаннийСтарт = НоваяРабочаяДата( ВедущееЗвено.РаннийФиниш, 1 );
		КонецЕсли;
		Звено.Вставить("РаннийСтарт", РаннийСтарт );
		
		Звено.Вставить("РаннийФиниш", НоваяРабочаяДата( Звено.РаннийСтарт, Звено.Продолжительность -1)); 
		//
		РаннийФиниш = Макс( Звено.РаннийФиниш, РаннийФиниш );
	КонецЦикла;
	Возврат РаннийФиниш;
КонецФункции

// датой финиша звена является последний рабочий день работы
Процедура РасчитатьСрокиРабот2шаг( ОкончаниеРабот, Цепочка )
	КолЗвеньев = Цепочка.Количество();
	// обход в обратную сторону
	Для Н = 0 По КолЗвеньев -1 Цикл
		Звено = Цепочка[КолЗвеньев - Н -1];
		Если Н = 0 Тогда // последнее звено 
			ПозднийФиниш 		= ОкончаниеРабот;
		Иначе
			ПоследующееЗвено 	= Цепочка[КолЗвеньев - Н];
			ПозднийФиниш		= НоваяРабочаяДата( ПоследующееЗвено.ПозднийСтарт, -1 ); 
		КонецЕсли;
		
		Звено.Вставить("ПозднийФиниш", ПозднийФиниш );
		Звено.Вставить("ПозднийСтарт", НоваяРабочаяДата( ПозднийФиниш, 1-Звено.Продолжительность )); 
		Звено.Вставить("Резерв", 	   РазницаРабочихДней( Звено.РаннийСтарт, Звено.ПозднийСтарт ));
	КонецЦикла;
КонецПроцедуры

Функция НазваниеИнтервала( ПроцентВыполнения, Ресурсы )
	НазваниеИнтервала = ?(ЗначениеЗаполнено( ПроцентВыполнения ), "" + ПроцентВыполнения + "%","");
	Для Каждого Ресурс ИЗ Ресурсы Цикл
		НазваниеИнтервала = НазваниеИнтервала + ?(ЗначениеЗаполнено( НазваниеИнтервала ),", ","") + 
							СокрЛП( Ресурс.Должность ) + "("+Ресурс.Количество+")";
		
	КонецЦикла;
	Возврат НазваниеИнтервала;
	
КонецФункции

// Возвращает Истина, если переданная задача является суммарной
Функция ЭтоСуммарнаяРабота( Работа ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	Справочник.ЗадачиПроектовСтруктура КАК СтруктураРабот
	|ГДЕ
	|	СтруктураРабот.Родитель = &Работа
	|	И НЕ СтруктураРабот.ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("Работа", Работа);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции	

// при массовой загрузке 
// работы могут загружаться в произвольном порядке
// поэтому проверяем все 
Процедура УстановитьСуммарныеРаботы( ЗадачаПроекта ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПроектовСтруктура.Ссылка КАК Работа
		|ИЗ
		|	Справочник.ЗадачиПроектовСтруктура КАК ЗадачиПроектовСтруктура
		|ГДЕ
		|	ЗадачиПроектовСтруктура.Владелец = &ЗадачаПроекта
		|
		|ДЛЯ ИЗМЕНЕНИЯ";
	
	Запрос.УстановитьПараметр("ЗадачаПроекта", ЗадачаПроекта);
	
	РезультатЗапроса 		= Запрос.Выполнить();
	ВыборкаДетальныеЗаписи 	= РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РаботаОбъект = ВыборкаДетальныеЗаписи.Работа.ПолучитьОбъект();
		РаботаОбъект.Суммарная = ЭтоСуммарнаяРабота( ВыборкаДетальныеЗаписи.Работа );
		РаботаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// проверяется, можно ли записать новую иерархию работ
// 1. если работа становится суммарной, то на неё не должно быть ссылок в документах 
//    ТРВ и ТЗП
// Работа - элемент справочника Задачи проекта (структура)
Функция РазрешеноСделатьРаботуСуммарной( Работа ) Экспорт
	
	// если уже суммарная
	Если Работа.Суммарная Тогда Возврат Истина; КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТабельРаботПоЗадачеПроектаРабочееВремя.Ссылка
		|ИЗ
		|	Документ.ТабельРаботПоЗадачеПроекта.РабочееВремя КАК ТабельРаботПоЗадачеПроектаРабочееВремя
		|ГДЕ
		|	ТабельРаботПоЗадачеПроектаРабочееВремя.Задача = &Работа
		|	И ТабельРаботПоЗадачеПроектаРабочееВремя.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТабельУчетаРабочегоВремениРабочееВремя.Задача
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремени.РабочееВремя КАК ТабельУчетаРабочегоВремениРабочееВремя
		|ГДЕ
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Проведен
		|	И ТабельУчетаРабочегоВремениРабочееВремя.Задача = &Работа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СвязиРабот.Работа
		|ИЗ
		|	РегистрСведений.СвязиРабот КАК СвязиРабот
		|ГДЕ
		|	СвязиРабот.Работа = &Работа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СвязиРабот.ВедущаяРабота
		|ИЗ
		|	РегистрСведений.СвязиРабот КАК СвязиРабот
		|ГДЕ
		|	СвязиРабот.ВедущаяРабота = &Работа";
	
	Запрос.УстановитьПараметр("Работа", Работа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Ложь;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

// если кроме текущей работы других подчиненных нет, 
// то сбрасываем признак суммарной работы
Функция ИзменилиОсиротевшегоРодителя( Работа )  Экспорт
	РаботаРодитель = Работа.Родитель;
	Если НЕ ЗначениеЗаполнено( РаботаРодитель ) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// у родителя текущей работы не остались другие дети
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачиПроектовСтруктура.Ссылка
		|ИЗ
		|	Справочник.ЗадачиПроектовСтруктура КАК ЗадачиПроектовСтруктура
		|ГДЕ
		|	ЗадачиПроектовСтруктура.Родитель = &РодительРаботы
		|	И ЗадачиПроектовСтруктура.Ссылка <> &Работа";
		
		
	//
	Запрос.УстановитьПараметр("Работа", 		Работа);
	Запрос.УстановитьПараметр("РодительРаботы", РаботаРодитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// остались другие дети
		Возврат Истина;
	КонецЦикла;
	
	Попытка
		РаботаОбъект =  РаботаРодитель.ПолучитьОбъект();
		//ЗаблокироватьДанныеДляРедактирования(РаботаОбъект.Ссылка);
		РаботаОбъект.Суммарная	= Ложь;
		РаботаОбъект.Записать();
		Возврат Истина;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не удалось сделать не суммарной родителя " + Символы.ПС + 
						  РаботаРодитель + Символы.ПС + 
						  ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;

КонецФункции

#Область ПересчетСтруктурыЗадачи

// связи из регистра сведений СвязиРабот + не суммарные задачи не указанные в регистре
Функция ПолучитьСвязиРабот( ЗадачаПроекта ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязиРабот.Работа КАК Этап,
		|	СвязиРабот.ВедущаяРабота,
		|	СвязиРабот.ТипСвязи,
		|	СвязиРабот.Работа.Продолжительность,
		|	СвязиРабот.Работа.Код КАК ПорядковыйНомер
		|ПОМЕСТИТЬ ВТ_Связи
		|ИЗ
		|	РегистрСведений.СвязиРабот КАК СвязиРабот
		|ГДЕ
		|	(СвязиРабот.Работа.Владелец = &Владелец
		|			ИЛИ СвязиРабот.ВедущаяРабота.Владелец = &Владелец)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Этап,
		|	ВложенныйЗапрос.Этап.Код КАК ПорядковыйНомер,
		|	ВложенныйЗапрос.Этап.Продолжительность КАК РаботаПродолжительность,
		|	ЗНАЧЕНИЕ(Справочник.ЗадачиПроектовСтруктура.ПустаяСсылка) КАК ВедущаяРабота,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыСвязиРабот.КонецНачало) КАК ТипСвязи
		|ПОМЕСТИТЬ ВТ_ЭтапыБезСвязей
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗадачиПроектовСтруктура.Ссылка КАК Этап,
		|		ВЫБОР
		|			КОГДА ВТ_Связи.Этап ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК Включать
		|	ИЗ
		|		Справочник.ЗадачиПроектовСтруктура КАК ЗадачиПроектовСтруктура
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Связи КАК ВТ_Связи
		|			ПО (ВТ_Связи.Этап = ЗадачиПроектовСтруктура.Ссылка)
		|	ГДЕ
		|		ЗадачиПроектовСтруктура.Владелец = &Владелец
		|		И НЕ ЗадачиПроектовСтруктура.Суммарная) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.Включать
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Связи.Этап КАК Этап,
		|	ВТ_Связи.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ВТ_Связи.РаботаПродолжительность КАК РаботаПродолжительность,
		|	ВТ_Связи.ВедущаяРабота КАК ВедущаяРабота,
		|	ВТ_Связи.ТипСвязи КАК ТипСвязи
		|ИЗ
		|	ВТ_Связи КАК ВТ_Связи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ЭтапыБезСвязей.Этап,
		|	ВТ_ЭтапыБезСвязей.ПорядковыйНомер,
		|	ВТ_ЭтапыБезСвязей.РаботаПродолжительность,
		|	ВТ_ЭтапыБезСвязей.ВедущаяРабота,
		|	ВТ_ЭтапыБезСвязей.ТипСвязи
		|ИЗ
		|	ВТ_ЭтапыБезСвязей КАК ВТ_ЭтапыБезСвязей
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("Владелец", ЗадачаПроекта);
	
	тзСвязи	= Запрос.Выполнить().Выгрузить();
	// этапы, которые не указаны в регистре связей работ и вех
	Возврат тзСвязи;
КонецФункции

//без виртуального старта и финиша
//исхода только из связи начало-конец
Функция ПолучитьЦепочкиЗадачиПроекта( ЗадачаПроекта, ДляИзменения = Ложь ) Экспорт
	Связи 	= ПолучитьСвязиРабот( ЗадачаПроекта );
	Цепочки = ПолучитьЧепочкиПоСвязям( Связи, ДляИзменения );
	Возврат Цепочки;
	
КонецФункции

// для чтения или изменения
Функция ПолучитьЧепочкиПоСвязям( Связи, ДляИзменения = Ложь ) Экспорт
	Цепочки = Новый Массив;
	
	Отбор  = Новый Структура;
	Отбор.Вставить( "ВедущаяРабота", Справочники.ЗадачиПроектовСтруктура.ПустаяСсылка());
	
	мПоследующиеРаботы = Связи.НайтиСтроки( Отбор );
	Для Каждого Эл ИЗ мПоследующиеРаботы Цикл
		мЦепочка 	= Новый Массив;
		// для изменений нужен объект;
		Работа 		= ?( ДляИзменения, Эл.Этап.ПолучитьОбъект(), Эл.Этап);
		//мЦепочка.Добавить( Эл.Этап.ПолучитьОбъект() );
		мЦепочка.Добавить( Работа );
		//
		Цепочки.Добавить( мЦепочка );
	КонецЦикла;
	//
	ЗаполнитьЦепочкиВниз( Цепочки, Связи, ДляИзменения );
	
	Возврат Цепочки;
КонецФункции

// заполнение цепочки от имеющегося начала цепочки до конца
Функция ЗаполнитьЦепочкиВниз( Цепочки, Связи, ДляИзменения  )
	НовыеЦепочки	 = Новый Массив;
	НашлиПоследующие = Ложь;
	Для Каждого Цепочка ИЗ Цепочки Цикл
		Ном = 0;
		
		// последняя в цепочке 
		Отбор  = Новый Структура;
		ВедущаяРабота = Цепочка[Цепочка.Количество()-1];
		Отбор.Вставить( "ВедущаяРабота", ВедущаяРабота.Ссылка );
		мПоследующиеРаботы = Связи.НайтиСтроки( Отбор );
		Для Каждого Эл ИЗ мПоследующиеРаботы Цикл
			НашлиПоследующие = Истина;
			// для пересчета
			Работа 		= ?( ДляИзменения, Эл.Этап.ПолучитьОбъект(), Эл.Этап);
			//Работа = Эл.Этап.ПолучитьОбъект();
			
			Если Ном = 0 Тогда
				Цепочка.Добавить( Работа );
			Иначе
				НовЦепочка = Новый Массив;
				// копируем, кроме последнего элемента
				Для Н = 1 ПО Цепочка.Количество()-1 Цикл
					НовЦепочка.Добавить( Цепочка[Н-1] );
				КонецЦикла;
				НовЦепочка.Добавить( Работа );
				НовыеЦепочки.Добавить( НовЦепочка );
			КонецЕсли;
			Ном = Ном + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	// продолжаем вниз, если нашли на этом этапе
	//Если НовыеЦепочки.Количество() <> 0 Тогда
	Если НашлиПоследующие Тогда
		Для Каждого Эл ИЗ НовыеЦепочки Цикл 
			Цепочки.Добавить( Эл );
		КонецЦикла;
		
		ЗаполнитьЦепочкиВниз( Цепочки, Связи, ДляИзменения );
	КонецЕсли;
КонецФункции

Функция РасчитатьСрокиРабот( ЗадачаПроекта ) Экспорт
	
	Цепочки = УП_РаботыСервер.ПолучитьЦепочкиЗадачиПроекта( ЗадачаПроекта, Истина );
	// расчитываем период 
	ПериодРабот = ПолучитьПериодРабот( ЗадачаПроекта, Цепочки );
	
	// вперед 
	Для Каждого Цепочка ИЗ Цепочки Цикл
		РасчитатьЦепочкуВперед( Цепочка, ПериодРабот);
	КонецЦикла;
	
	// в обратную сторону
	Для Каждого Цепочка ИЗ Цепочки Цикл
		РасчитатьЦепочкуНазад( Цепочка,  ПериодРабот);
	КонецЦикла;
	
	// расчитывем критические пути
	УстановитьКритическийПуть( Цепочки );
	
	// записываем результат	
	ЗаписатьРасчетЭтапов( Цепочки ); // записываем
	Возврат ПериодРабот;
	
КонецФункции

Процедура УстановитьКритическийПуть( Цепочки )
	// сбрасываем
	Для Каждого Цепочка ИЗ Цепочки Цикл
		Для Каждого Этап ИЗ Цепочка Цикл
				Этап.КритическийПуть 	= Ложь;
		КонецЦикла;
	КонецЦикла;
	
	// для работ на критическом пути !!!
	Для Каждого Цепочка ИЗ Цепочки Цикл
		РезервЦепочки = РезервЦепочки( Цепочка );
		Если РезервЦепочки = 0 Тогда
			Для Каждого Этап ИЗ Цепочка Цикл
				Этап.КритическийПуть 	= Истина;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПериодРабот( ЗадачаПроекта, Цепочки )
	// здесь есть разница - считать от окончания или от начала
	ПериодРабот = Новый СтандартныйПериод;
	ДатаНачала	= ?(ЗначениеЗаполнено( ЗадачаПроекта.НачалоРабот), 
					ЗадачаПроекта.НачалоРабот, ТекущаяДата());
	//
	//ПериодРабот.ДатаНачала = УП_РаботыСервер.ДобавитьРабочиеДни(  ДатаНачала, 0);
	ПериодРабот.ДатаНачала = ДобавитьРабочиеДни(  ДатаНачала, 0);
	
	ПродолжительностьРабот = 0;
	Для Каждого Цепочка ИЗ Цепочки Цикл
		ПродолжительностьРаботПоЦепочке = 0;
		Для Каждого Эл ИЗ Цепочка Цикл
			ПродолжительностьРаботПоЦепочке = ПродолжительностьРаботПоЦепочке + Эл.Продолжительность;
		КонецЦикла;
		ПродолжительностьРабот = МАКС( ПродолжительностьРабот, ПродолжительностьРаботПоЦепочке );
	КонецЦикла;
	
	//ПериодРабот.ДатаОкончания	= УП_РаботыСервер.ДобавитьРабочиеДни(  ДатаНачала, ПродолжительностьРабот-1);
	ПериодРабот.ДатаОкончания	= ДобавитьРабочиеДни(  ДатаНачала, ПродолжительностьРабот-1);
	
	Возврат ПериодРабот;
КонецФункции

Процедура РасчитатьЦепочкуВперед( Цепочка, ПериодРабот  )
	//
	НачалоЭтапа = ПериодРабот.ДатаНачала;
	
	Для Каждого Этап ИЗ Цепочка Цикл
		//Этап = Справочники.ЗадачиПроектовСтруктура.СоздатьЭлемент();
		Если 		Этап.ТипОграничения = Перечисления.ТипыОграниченияРабот.ФиксированноеНачало Тогда
			// не меняем 
		ИначеЕсли 	Этап.ТипОграничения = Перечисления.ТипыОграниченияРабот.НачалоНеРанее 		Тогда
			Этап.РаннийСтарт = МАКС( НачалоЭтапа, Этап.РаннийСтарт); // начало дня
			
		ИначеЕсли 	Этап.ТипОграничения = Перечисления.ТипыОграниченияРабот.НачалоНеПозднее		Тогда
			Этап.РаннийСтарт = МИН( НачалоЭтапа, Этап.РаннийСтарт); // начало дня
			
		Иначе
			Этап.РаннийСтарт 	= НачалоЭтапа;
			
		КонецЕсли;
		
		// теоретически
		//РаннийФиниш = УП_РаботыСервер.ДобавитьРабочиеДни( Этап.РаннийСтарт, Этап.Продолжительность-1);
		РаннийФиниш = ДобавитьРабочиеДни( Этап.РаннийСтарт, Этап.Продолжительность-1);
		
		Если 		Этап.ТипОграничения = Перечисления.ТипыОграниченияРабот.ФиксированноеОкончание 	Тогда
			// не меняем 
			
		ИначеЕсли 	Этап.ТипОграничения = Перечисления.ТипыОграниченияРабот.ОкончаниеНеПозднее      Тогда
			Этап.РаннийФиниш = МИН( Этап.ПозднийФиниш, РаннийФиниш );
			
		ИначеЕсли 	Этап.ТипОграничения = Перечисления.ТипыОграниченияРабот.ОкончаниеНеРанее      	Тогда
			Этап.РаннийФиниш = МАКС( Этап.ПозднийФиниш, РаннийФиниш );
			
		Иначе
			// расчетный
			Этап.РаннийФиниш = РаннийФиниш;
		КонецЕсли;
		
		// начало следующего этапа
		//НачалоЭтапа 			= УП_РаботыСервер.ДобавитьРабочиеДни( Этап.РаннийФиниш, 1);
		НачалоЭтапа = ДобавитьРабочиеДни( Этап.РаннийФиниш, 1);
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьЦепочкуНазад(  Цепочка, ПериодРабот )
	ОкончаниеЭтапа 	= НачалоДня( ПериодРабот.ДатаОкончания );  // последний день работ
	ДлинаЦепочки 	= Цепочка.Количество();
	
	Для Н = 1 ПО ДлинаЦепочки Цикл
		Этап = Цепочка[ДлинаЦепочки-Н]; // считаем с конца цепочки
		
		Если 		Этап.ТипОграничения = Перечисления.ТипыОграниченияРабот.ФиксированноеОкончание 	Тогда
			// оставляем без изменений
			
		ИначеЕсли 	Этап.ТипОграничения = Перечисления.ТипыОграниченияРабот.ОкончаниеНеПозднее 		Тогда
			Этап.ПозднийФиниш = МИН( Этап.ПозднийФиниш, ОкончаниеЭтапа );
			
		ИначеЕсли 	Этап.ТипОграничения = Перечисления.ТипыОграниченияРабот.ОкончаниеНеРанее 		Тогда
			Этап.ПозднийФиниш = МАКС( Этап.ПозднийФиниш, ОкончаниеЭтапа );
			
		Иначе
		// если на предыдущих цепочках установили Поздний финиш, то но может быть сдвинут только на более раннюю дату
		// но этот этап не обязательно состоит в других цепочках
			Если Этап.Модифицированность() Тогда
				// надо с учетом резерва 
				Этап.ПозднийФиниш = МИН(Этап.ПозднийФиниш, ОкончаниеЭтапа);
			Иначе
				Этап.ПозднийФиниш = ОкончаниеЭтапа;
			КонецЕсли;
		КонецЕсли;
		
		ПозднийСтарт = УП_РаботыСервер.ОтнятьРабочиеДни( Этап.ПозднийФиниш, Этап.Продолжительность-1);
		Если 		Этап.ТипОграничения = Перечисления.ТипыОграниченияРабот.ФиксированноеНачало 	Тогда
			// оставляем без изменений
			
		ИначеЕсли 	Этап.ТипОграничения = Перечисления.ТипыОграниченияРабот.НачалоНеПозднее 		Тогда
			Этап.ПозднийСтарт 	= МИН( Этап.РаннийСтарт, ПозднийСтарт );
			
		ИначеЕсли 	Этап.ТипОграничения = Перечисления.ТипыОграниченияРабот.НачалоНеРанее			Тогда
			Этап.ПозднийСтарт 	= МАКС( Этап.РаннийСтарт, ПозднийСтарт );
			
		Иначе
			// расчетный
			Этап.ПозднийСтарт	= ПозднийСтарт;
		КонецЕсли;
		//ОкончаниеЭтапа			= УП_РаботыСервер.ОтнятьРабочиеДни( Этап.ПозднийСтарт, 1);
		ОкончаниеЭтапа	= ОтнятьРабочиеДни( Этап.ПозднийСтарт, 1);
		
		// резерв по разнице в старте
		//Этап.Резерв				= УП_РаботыСервер.РазницаРабочихДней( Этап.РаннийСтарт, Этап.ПозднийСтарт);
		Этап.Резерв		= РазницаРабочихДней( Этап.РаннийСтарт, Этап.ПозднийСтарт);
		
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьРасчетЭтапов( Цепочки  )
	Для Каждого Цепочка ИЗ Цепочки Цикл
		Для Каждого Этап ИЗ Цепочка Цикл
			Попытка
				Этап.Записать();
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось записать работу по задаче проекта " + Символы.ПС+
								  Этап + Символы.ПС + 
								  ОписаниеОшибки();
				Сообщение.Сообщить();
				Возврат;
			КонецПопытки;
		КонецЦикла;;
	КонецЦикла;
КонецПроцедуры

Функция РезервЦепочки( Цепочка )
	Резерв = 0;
	Для Каждого Этап ИЗ Цепочка Цикл
		Резерв = Резерв + Этап.Резерв;
	КонецЦикла;
	Возврат Резерв;
КонецФункции


#КонецОбласти 

Процедура УдалитьСвязиРаботПоЗадачеПроекта( ЗадачаПроекта ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвязиРабот.Работа
		|ИЗ
		|	РегистрСведений.СвязиРабот КАК СвязиРабот
		|ГДЕ
		|	СвязиРабот.Работа.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", ЗадачаПроекта );
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр ИЗ РезультатЗапроса Цикл 
		
		МенЗап = РегистрыСведений.СвязиРабот.СоздатьНаборЗаписей();
		МенЗап.Отбор.Работа.Установить( Стр.Работа );
		МенЗап.Записать();
	КонецЦикла;
	
	
КонецПроцедуры