&НаСервере 
Функция ЗагрузитьСметуПроекта( сДок ) Экспорт

	ДокСс = Документы.Смета.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.Смета.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		// !!!
		
		Для Каждого СтрТЧ ИЗ сДок.Документы Цикл
			СтрД = ДокОб.Документы.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, СтрТЧ);
		КонецЦикла;
		
		Попытка 
			РежимЗаписи = ?( сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( РежимЗаписи );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Смета проекта " + сДок.Номер + ", " +ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
			
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
		
КонецФункции

&НаСервере 
Функция ЗагрузитьСметуЗадачиПроекта( сДок ) Экспорт
	ДокСс = Документы.СметаЗадачиПроекта.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.СметаЗадачиПроекта.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		// !!!
		
		Для Каждого СтрТЧ ИЗ сДок.Документы Цикл
			СтрД = ДокОб.Документы.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, СтрТЧ);
			
		КонецЦикла;
		
		Для Каждого СтрТЧ ИЗ сДок.Расчет Цикл
			СтрД = ДокОб.Расчет.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, СтрТЧ);
			
		КонецЦикла;
		
		Попытка 
			РежимЗаписи = ?( сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( РежимЗаписи );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Смета задачи проекта " + сДок.Номер + ", " +ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли; 
	Возврат ДокСс;
КонецФункции

&НаСервере
Функция ЗагрузитьЗадачуПроекта( СсПроект, сЗадачаПроекта ) Экспорт
	СпрСс = Справочники.ЗадачиПроектов.НайтиПоКоду( сЗадачаПроекта.Код ,,,СсПроект);
	Если СпрСс.Пустая() Тогда
		СпрОб = Справочники.ЗадачиПроектов.СоздатьЭлемент();
		СпрОб.Владелец = СсПроект;
		ЗаполнитьЗначенияСвойств( СпрОб, сЗадачаПроекта );
		
		Для Каждого Исполнитель ИЗ сЗадачаПроекта.Исполнители Цикл
			Стр = СпрОб.Исполнители.Добавить();
			Стр.ФизическоеЛицо = Исполнитель;
		КонецЦикла;
		
		Попытка
			СпрОб.Записать();
			СпрСс = СпрОб.Ссылка;
			
			//// вехи
			//Для Каждого Веха ИЗ сЗадачаПроекта.ВехиЗадачи Цикл
			//	СсВеха = Справочники.ЗадачиПроектовВехи.НайтиПоКоду(Веха.Код,,,СпрСс);
			//	Если СсВеха.Пустая() Тогда
			//		ОбВеха = Справочники.ЗадачиПроектовВехи.СоздатьЭлемент();
			//		ОбВеха.Владелец = СпрСс;
			//		ЗаполнитьЗначенияСвойств( ОбВеха, Веха );
			//		Попытка 
			//			ОбВеха.Записать();
			//		Исключение
			//			Сообщение = Новый СообщениеПользователю;
			//			Сообщение.Текст = "Не удалсь записать веху задачи проекта " +  Символы.ПС + 
			//							  сЗадачаПроекта.Код + Символы.ПС +
			//							  ОписаниеОшибки();
			//			Сообщение.Сообщить();
			//			Возврат Неопределено;
			//
			//		КонецПопытки;
			//	КонецЕсли;
			//КонецЦикла;               
			
			// структура
			Для Каждого Эл ИЗ сЗадачаПроекта.СтруктураЗадачи Цикл
				СсСтрЗадачи = Справочники.ЗадачиПроектовСтруктура.НайтиПоКоду( Эл.Код,,, СпрСс );
				Если СсСтрЗадачи.Пустая() Тогда
					ОбСтрЗадачи = Справочники.ЗадачиПроектовСтруктура.СоздатьЭлемент();
					ОбСтрЗадачи.Владелец = СпрСс;
					ЗаполнитьЗначенияСвойств( ОбСтрЗадачи, Эл );
					Если Эл.Свойство("Ресурсы") Тогда
						Для Каждого Ресурс ИЗ Эл.Ресурсы Цикл
							СтрРесурс = ОбСтрЗадачи.Ресурсы.Добавить();
							ЗаполнитьЗначенияСвойств( СтрРесурс, Ресурс );
						КонецЦикла;
					КонецЕсли;
					
					//ОбСтрЗадачи.Должность = УП_КадрыСервер.ДолжностьПодразделенияПоТарифнойСтавке( Эл.ТарифнаяСтавка, СпрСс.Подразделение );
					
					Попытка
						ОбСтрЗадачи.Записать();
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = "Не удалсь записать структуру задачи проекта " +  Символы.ПС + 
										  сЗадачаПроекта.Код + Символы.ПС +
										  ОписаниеОшибки();
						Сообщение.Сообщить();
						Возврат Неопределено;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла
			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалсь записать задачу проекта " +  Символы.ПС + 
							  сЗадачаПроекта.Код + Символы.ПС +
							  ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат СпрСс;

КонецФункции

&НаСервере
Функция ЗагрузитьПланРаботТиражный( сДокумент ) Экспорт
	ДокСс = Документы.ПланРаботТиражный.НайтиПоНомеру( сДокумент.Номер, сДокумент.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ПланРаботТиражный.СоздатьДокумент();
		//ДокОб.ИсполнительДокумента 	= ПараметрыСеанса.ТекущийПользователь; 
		ЗаполнитьЗначенияСвойств( ДокОб, сДокумент );
		
		Для Каждого СтрТЧ ИЗ сДокумент.Расчет Цикл
			СтрД = ДокОб.Расчет.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, СтрТЧ);
		КонецЦикла;
		
		Попытка 
			РежимЗаписи = ?( сДокумент.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( РежимЗаписи );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "План работ тиражный " + сДокумент.Номер + ", " +ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
		
КонецФункции


&НаСервере
Функция  ЗагрузитьРасходПоЗадачеПроекта(сДок, ВидДокумента) Экспорт
	ДокСс = Документы[ВидДокумента].НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы[ВидДокумента].СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		ДокОб.СтатьяСметы 			= Справочники.СтатьиСметы[ сДок.СтатьяСметы];
		
		Для Каждого СтрТЧ ИЗ сДок.Описание Цикл
			СтрД = ДокОб.Описание.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, СтрТЧ);
		КонецЦикла;
		
		Попытка 
			РежимЗаписи = ?( сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( РежимЗаписи );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Расход по задаче проекта " + сДок.Номер + ", " +ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
			
		КонецПопытки;
	КонецЕсли;
	
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьПланРабот( сПланРабот ) Экспорт
	ДокСс = Документы.ПланРабот.НайтиПоНомеру( сПланРабот.Номер, сПланРабот.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ПланРабот.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сПланРабот );
		// !!!
		Для Каждого СтрФР ИЗ сПланРабот.ФронтРабот Цикл
			СтрД = ДокОб.ФронтРабот.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, СтрФР);
			// 
			СтрД.Должность = УП_КадрыСервер.ДолжностьПодразделенияПоТарифнойСтавке( СтрФР.ТарифнаяСтавка, ДокОб.Подразделение);
			
		КонецЦикла;
		
		Попытка 
			РежимЗаписи = ?( сПланРабот.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( РежимЗаписи );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "План работ " + сПланРабот.Номер+ " не проведен, " +ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
			
		КонецПопытки;
	КонецЕсли;
	
	Возврат ДокСс;
		
КонецФункции

&НаСервере
Функция ЗагрузитьОценкуСотрудников( сДок ) Экспорт
	ДокСс = Документы.ОценкаСотрудника.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ОценкаСотрудника.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Для Каждого Стр ИЗ сДок.Оценки Цикл
			СтрД = ДокОб.Оценки.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи оценки сотрудника №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьРРНаВыплатуКР( сДок ) Экспорт
	ДокСс = Документы.РаспределениеРасходовНаВыплатуКР.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.РаспределениеРасходовНаВыплатуКР.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Для Каждого Стр ИЗ сДок.Распределение Цикл
			СтрД = ДокОб.Распределение.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи распределения расходов на выплату КР №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьВыплатуЗПП( сДок ) Экспорт
	ДокСс = Документы.ВыплатаЗППроизводства.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ВыплатаЗППроизводства.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Для Каждого Стр ИЗ сДок.Выплаты Цикл
			СтрД = ДокОб.Выплаты.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи выплаты ЗП производства №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьВыплатуКР( сДок ) Экспорт
	ДокСс = Документы.ВыплатаКоммерческихРасходов.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ВыплатаКоммерческихРасходов.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Для Каждого Стр ИЗ сДок.ВыплатыКР Цикл
			СтрД = ДокОб.ВыплатыКР.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи выплаты коммерческих расходов №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьЗаявкуНаВыплатуКР( сДок ) Экспорт
	ДокСс = Документы.ЗаявкаНаВыплатуКоммРасходов.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ЗаявкаНаВыплатуКоммРасходов.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Для Каждого Стр ИЗ сДок.КлиентМенеджеры Цикл
			СтрД = ДокОб.КлиентМенеджеры.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Для Каждого Стр ИЗ сДок.РаспределениеПоДокументам Цикл
			СтрД = ДокОб.РаспределениеПоДокументам.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи заявки на выплату коммерческих расходов №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьЗаявкуНаВыплатуРасхода( сДок ) Экспорт
	ДокСс = Документы.ЗаявкаНаВыплатуРасхода.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ЗаявкаНаВыплатуРасхода.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи заявки на выплату расхода №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции


&НаСервере
Функция ЗагрузитьЗаявкуНаВыплату( сДок ) Экспорт
	ДокСс = Документы.ЗаявкаНаВыплату.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ЗаявкаНаВыплату.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
			
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи заявки на выплату №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьЗакрытиеТиражногоПланаРабот( сДок ) Экспорт
	ДокСс = Документы.ЗакрытиеТиражныхПлановРабот.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ЗакрытиеТиражныхПлановРабот.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Для Каждого Стр ИЗ сДок.Расходы Цикл
			СтрД = ДокОб.Расходы.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи закрытия тиражного плана работ №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьЗакупкуППЛО( сДок ) Экспорт
	ДокСс = Документы.ЗакупкаППЛО.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ЗакупкаППЛО.СоздатьДокумент();
	Иначе
		ДокОб = ДокСс.ПолучитьОбъект();
		ДокОб.ПометкаУдаления = Ложь;
		ДокОб.Товар.Очистить();
	КонецЕсли;
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Для Каждого Стр ИЗ сДок.Товар Цикл
			СтрД = ДокОб.Товар.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи закупки ПП(ЛО) №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	//КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьЗаявкуНаОплатуПоставщику( сДок ) Экспорт
	ДокСс = Документы.ЗаявкаНаОплатуПоставщику.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ЗаявкаНаОплатуПоставщику.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			//Режим = РежимЗаписиДокумента.Запись;
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи заявки на оплату поставщику №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьОтгрузкуПП( сДок ) Экспорт
	ДокСс = Документы.ОтгрузкаПП.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ОтгрузкаПП.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Для Каждого Стр ИЗ сДок.Состав Цикл
			СтрД = ДокОб.Состав.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			//Режим = РежимЗаписиДокумента.Запись;
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи лицензии №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьОтгрузкуАбонемента( сДок ) Экспорт
	ДокСс = Документы.ОтгрузкаАбонемента.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ОтгрузкаАбонемента.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			//Режим = РежимЗаписиДокумента.Запись;
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка отгрузки абонемента №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьЛицензию( сДок ) Экспорт
	ДокСс = Документы.Лицензия.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.Лицензия.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Для Каждого Стр ИЗ сДок.Состав Цикл
			СтрД = ДокОб.Состав.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			//Режим = РежимЗаписиДокумента.Запись;
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи лицензии №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьТабельЗП( сДок ) Экспорт
	ДокСс = Документы.ТабельРаботПоЗадачеПроекта.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ТабельРаботПоЗадачеПроекта.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Для Каждого Стр ИЗ сДок.РабочееВремя Цикл
			СтрД = ДокОб.РабочееВремя.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			//Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			Режим = РежимЗаписиДокумента.Запись;
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи табеля задачи проекта №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьТабельПодразделения( сДок ) Экспорт
	ДокСс = Документы.ТабельПодразделения.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ТабельПодразделения.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Для Каждого Стр ИЗ сДок.РабочееВремя Цикл
			СтрД = ДокОб.РабочееВремя.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи табеля подразделения №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьЗакрытиеТП( сДок ) Экспорт  
	ДокСс = Документы.ЗакрытиеТП.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ЗакрытиеТП.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Для Каждого Стр ИЗ сДок.Закрытие Цикл
			СтрД = ДокОб.Закрытие.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи закрытия тиражного проекта №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции


&НаСервере
Функция ЗагрузитьЛимитТП( сДок )	Экспорт
	ДокСс = Документы.ЛимитыТП.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ЛимитыТП.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Для Каждого Стр ИЗ сДок.Лимиты Цикл
			СтрД = ДокОб.Лимиты.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи лимита тиражного проекта №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции
	

&НаСервере
Функция ЗагрузитьЗакрытиеАТП(сДок ) Экспорт
	ДокСс = Документы.ЗакрытиеАктаТП.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ЗакрытиеАктаТП.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Для Каждого Стр ИЗ сДок.ФизическиеЛица Цикл
			СтрД = ДокОб.ФизическиеЛица.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи закрытия акта ТП №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьАктТП( сДок ) Экспорт
	ДокСс = Документы.АктТиражногоПодразделения.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.АктТиражногоПодразделения.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи Акта ТП №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьИсполнителяДокумента( сИсполнительДокумента ) Экспорт
	Наименование = сИсполнительДокумента.Наименование;
	СпрСс = Справочники.Пользователи.НайтиПоНаименованию( Наименование, Истина );
	Если СпрСс.Пустая() Тогда
		СпрОб = Справочники.Пользователи.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств( СпрОб, сИсполнительДокумента );
		СпрОб.ФизическоеЛицо = УП_ПереносДанных.ЗагрузитьФизическоеЛицо( сИсполнительДокумента.сФизическоеЛицо );
		
		Попытка
			СпрОб.Записать();
			СпрСс = СпрОб.Ссылка;
		Исключение
			Сообщить("Не загрузили пользователя измерения " + Наименование + ", "+ ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
		
	Возврат СпрСс;
		
КонецФункции

&НаСервере
Функция ЗагрузитьДокументУТ(сДок, ЗаполнятьОплату = Ложь ) Экспорт
	ДокСс = Документы.ДокументУТ.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ДокументУТ.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		Для Каждого Стр ИЗ сДок.КоммерческоеВознаграждение Цикл
			СтрД = ДокОб.КоммерческоеВознаграждение.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
	ИначеЕсли ЗаполнятьОплату Тогда
		ДокОб = ДокСс.ПолучитьОбъект();
		ДокОб.Оплата = сДок.Оплата;
		
	Иначе 
		Возврат ДокСс;
	КонецЕсли;
		
	Попытка
		Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ДокОб.Записать( Режим );
		ДокСс = ДокОб.Ссылка;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка записи документа УТ №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьДоговор( сДок ) Экспорт
	ДокСс = Документы.Договор.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.Договор.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		Для Каждого Стр ИЗ сДок.ЗадачиПроекта Цикл
			СтрД = ДокОб.ЗадачиПроекта.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		Для Каждого Стр ИЗ сДок.ЭтапыГрафикаОплаты Цикл
			СтрД = ДокОб.ЭтапыГрафикаОплаты.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи договора №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьОплату( сДок ) Экспорт
	ДокСс = Документы.Оплата.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.Оплата.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		Для Каждого Стр ИЗ сДок.РасшифровкаПлатежа Цикл
			СтрД = ДокОб.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи оплаты №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
	
КонецФункции


&НаСервере
Функция ЗагрузитьТРВ( сДок ) Экспорт
	ДокСс = Документы.ТабельУчетаРабочегоВремени.НайтиПоНомеру( сДок.Номер, сДок.Дата );
	Если ДокСс.Пустая() Тогда
		ДокОб = Документы.ТабельУчетаРабочегоВремени.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств( ДокОб, сДок );
		Для Каждого Стр ИЗ сДок.РабочееВремя Цикл
			СтрД = ДокОб.РабочееВремя.Добавить();
			ЗаполнитьЗначенияСвойств( СтрД, Стр );
		КонецЦикла;
		
		
		Попытка
			Режим = ?(сДок.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
			ДокОб.Записать( Режим );
			ДокСс = ДокОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка записи ТРВ №" + сДок.Номер + Символы.ПС + ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ДокСс;
КонецФункции

&НаСервере
Функция ЗагрузитьТипТП( сТипТП )  Экспорт
	СпрСс = Справочники.ТипыТиражныхПроектов.НайтиПоКоду( сТипТП.Код );
	Если СпрСс.Пустая() Тогда
		СпрОб = Справочники.ТипыТиражныхПроектов.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств( СпрОб, сТипТП );
		Попытка
			СпрОб.Записать();
			СпрСс = СпрОб.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат СпрСс;
			
КонецФункции

&НаСервере
Функция ЗагрузитьПодразделение( сПодразделение ) Экспорт
	Попытка
		Наименование = сПодразделение.Наименование;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено( Наименование ) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СпрСс = Справочники.Подразделения.НайтиПоНаименованию( Наименование, Истина );
	Если СпрСс.Пустая() Тогда
		СпрОб = Справочники.Подразделения.СоздатьЭлемент();
		СпрОб.Наименование 		= Наименование;
		СпрОб.Производственное 	= сПодразделение.Производственное;
		Попытка 
			СпрОб.Записать();
			СпрСс = СпрОб.Ссылка;
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если сПодразделение.Свойство("Руководитель") Тогда
		ФизическоеЛицо = ЗагрузитьФизическоеЛицо( сПодразделение.Руководитель );
		Если ЗначениеЗаполнено( ФизическоеЛицо ) Тогда
			МенЗаписи = РегистрыСведений.РуководителиПодразделений.СоздатьМенеджерЗаписи();
			МенЗаписи.Период = Дата(2014,1,1);
			МенЗаписи.Подразделение 	= СпрСс;
			МенЗаписи.ФизическоеЛицо 	= ФизическоеЛицо;
			МенЗаписи.Записать( Истина );
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат СпрСС.Ссылка;
	
КонецФункции

&НаСервере
Функция ЗагрузитьТарифнуюСтавку( КодТарифнойСтавки ) Экспорт
	Возврат Справочники.ТарифныеСтавки.НайтиПоКоду( КодТарифнойСтавки );
КонецФункции

&НаСервере
Функция ЗагрузитьТиражныйПроект( сТП ) Экспорт
	Родитель 		= СоздатьИерархию("ПроектыТиражные", сТП.НаименованиеРодителя );
	Наименование 	= сТП.Наименование;
	СпрСс = Справочники.ПроектыТиражные.НайтиПоНаименованию( Наименование, Истина, Родитель);
	Если СпрСс.Пустая() Тогда
		СпрОб = Справочники.ПроектыТиражные.СоздатьЭлемент();
		СпрОб.Родитель = Родитель;
		ЗаполнитьЗначенияСвойств( СпрОб, сТП );
		// иерархия может занять коды
		СпрОб.УстановитьНовыйКод();
		Попытка
			СпрОб.Записать();
			СпрСс = СпрОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не удалось записать тиражный проект " + Наименование + Символы.ПС+
							  ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	Возврат СпрСс;
	
КонецФункции

&НаСервере
Функция ЗагрузитьТиповуюЗадачу( сТиповаяЗадача )  Экспорт
	Родитель 	= СоздатьИерархию("ТиповыеЗадачиПроектов", сТиповаяЗадача.НаименованиеРодителя );
	СпрСс 		= Справочники.ТиповыеЗадачиПроектов.НайтиПоНаименованию( сТиповаяЗадача.Наименование, Истина, Родитель );
	Если НЕ СпрСс.Пустая() Тогда
		Возврат СпрСс;
	КонецЕсли;
	СпрОб = Справочники.ТиповыеЗадачиПроектов.СоздатьЭлемент();
	СпрОб.Родитель = Родитель;
	ЗаполнитьЗначенияСвойств( СпрОб, сТиповаяЗадача );
	
	СпрОб.ВидТиповойЗадачи 	= Справочники.ВидыТиповыхЗадач.НайтиПоНаименованию(
								сТиповаяЗадача.НаименованиеВидаТиповойЗадачи, Истина );
	Попытка
		СпрОб.Записать();
		Возврат СпрОб.Ссылка;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ЗагрузитьПроект( сПроект ) Экспорт
	СпрСс = Справочники.Проекты.НайтиПоКоду( сПроект.Код );
	Если СпрСс.Пустая() Тогда
		СпрОб = Справочники.Проекты.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств( СпрОб, сПроект );
		Попытка
			СпрОб.Записать();
			СпрСс = СпрОб.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат СпрСс;
КонецФункции		


// сДолжность структура, содержит свойства
// Должность 				- наименование
// Производственная 		- булево
// ТарифнаяСтавкаДолжности 	- код тарифной ставки
// 
&НаСервере
Функция ЗагрузитьДолжность( сДолжность ) Экспорт
	Попытка
		Наименование = сДолжность.Наименование;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено( Наименование ) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СпрСс = Справочники.Должности.НайтиПоНаименованию( Наименование, Истина );
	Если СпрСс.Пустая() Тогда
		СпрОб = Справочники.Должности.СоздатьЭлемент();
		СпрОб.Наименование 		= Наименование;
		СпрОб.Производственная 	= сДолжность.Производственная;
		СпрОб.ТарифнаяСтавка	= ЗагрузитьТарифнуюСтавку( сДолжность.ТарифнаяСтавкаДолжности );
		Попытка
			СпрОб.Записать();
			СпрСс = СпрОб.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат СпрСс;		
КонецФункции

&НаСервере
Функция ЗагрузитьФизическоеЛицо( сФизЛицо ) Экспорт
	Попытка
		Наименование = сФизЛицо.Наименование;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено( Наименование ) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СпрСс = Справочники.ФизическиеЛица.НайтиПоНаименованию( Наименование, Истина );
	Если СпрСс.Пустая() Тогда
		СпрОб = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СпрОб, сФизЛицо );
		Попытка
			СпрОб.Записать();
			СпрСс = СпрОб.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат СпрСс;		
КонецФункции


&НаСервере
Функция НайтиКонтрагентаПоИНН(	ИНН, КПП ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП";

	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции


&НаСервере
Функция ЗагрузитьКонтрагентаПоИНН(	сКонтрагент ) Экспорт
									
	СпрСс = НайтиКонтрагентаПоИНН( сКонтрагент.ИНН, сКонтрагент.КПП );
	Если СпрСс  <> Неопределено Тогда
		Возврат СпрСс;
	КонецЕсли;

	СпрОб = Справочники.Контрагенты.СоздатьЭлемент();
	СпРОб.Родитель 				= СоздатьИерархию( "Контрагенты", сКонтрагент.НаименованиеРодителя );
	ЗаполнитьЗначенияСвойств( СпрОб, сКонтрагент );

	Попытка
		СпрОб.Записать();
		Возврат СпрОб.Ссылка;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
											
КонецФункции

// ищем по наименованию в пределах родителя
&НаСервере
Процедура ЗагрузитьЦеныНоменклатуры( Номенклатура, мЦены)
	Для Каждого Цена ИЗ мЦены Цикл
		МенЗаписи = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств( МенЗаписи, Цена );
		МенЗаписи.Номенклатура = Номенклатура;
		МенЗаписи.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗагрузитьСкидкуНаППЛО(  сСкидкаНаППЛО ) Экспорт
	Наименование = сСкидкаНаППЛО.Наименование;
	СпрСс = Справочники.СкидкиНаППЛО.НайтиПоНаименованию(Наименование, Истина );
	Если СпрСс.Пустая() Тогда
		СпрОб = Справочники.СкидкиНаППЛО.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств( СпрОб, сСкидкаНаППЛО );
		
		Попытка
			СпрОб.Записать();
			СпрСс = СпрОб.Ссылка;
		Исключение
			Сообщить("Не загрузили скидку на ПП(ЛО)" + Наименование + ", "+ ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
		
	Возврат СпрСс;
КонецФункции

&НаСервере
Функция ЗагрузитьЕдиницуИзмерения( сЕдиницаИзмерения ) Экспорт
	СпрСс = Справочники.ЕдиницыИзмерения.НайтиПоКоду( сЕдиницаИзмерения.Код );
	Если СпрСс.Пустая() Тогда
		СпрОб = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств( СпрОб, сЕдиницаИзмерения );
		
		Попытка
			СпрОб.Записать();
			СпрСс = СпрОб.Ссылка;
		Исключение
			Сообщить("Не загрузили единицу измерения " + сЕдиницаИзмерения.Наименование + ", "+ ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
		
	Возврат СпрСс;
КонецФункции

&НаСервере
Функция ЗагрузитьВидНоменклатуры( сВидНоменклатуры ) Экспорт
	СпрСс = Справочники.ВидыНоменклатуры.НайтиПоНаименованию( сВидНоменклатуры.Наименование, Истина );
	Если СпрСс.Пустая() Тогда
		СпрОб = Справочники.ВидыНоменклатуры.СоздатьЭлемент();
	Иначе
		
		Если СпрСс.Правообладатель  = сВидНоменклатуры.Правообладатель
		и	 СпрСс.ТипНоменклатуры	= сВидНоменклатуры.ТипНоменклатуры
		//и	 СпрСс.СкидкаНаППЛО		= сВидНоменклатуры.СкидкаНаППЛО		
		Тогда
			Возврат СпрСс;
		Иначе
			СпрОб = СпрСс.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств( СпрОб, сВидНоменклатуры );
	
	Попытка
		СпрОб.Записать();
		Возврат СпрОб.Ссылка;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции


&НаСервере
Функция ЗагрузитьКритерийОценки( сСправ  ) Экспорт
	Наименование 	= сСправ.Наименование;
	СпрСс = Справочники.КритерииОценкиСотрудника.НайтиПоНаименованию( Наименование,Истина );
	Если СпрСс.Пустая() Тогда
		СпрОб = Справочники.КритерииОценкиСотрудника.СоздатьЭлемент();
		// проверим
		ЗаполнитьЗначенияСвойств( СпрОб, сСправ );
		
		Попытка
			СпрОб.Записать();
			СпрСс = СпрОб.Ссылка;
		Исключение
			Сообщить("Не загрузили критерий оценки сотрудника " + Наименование + ", "+ ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		
	КонецЕсли;
	Возврат СпрСс;
КонецФункции

&НаСервере
Функция ЗагрузитьНоменклатуру( сНоменклатура ) Экспорт
	//Родитель 		= СоздатьИерархию("Номенклатура", сНоменклатура.НаименованиеРодителя );
	Родитель = Неопределено;
	Если сНоменклатура.Свойство("ОписаниеРодителя" ) Тогда
		Родитель  = СоздатьИерархиюПоКоду("Номенклатура", 
								сНоменклатура.ОписаниеРодителя.ПолноеНаименование, 
								сНоменклатура.ОписаниеРодителя.ПолныйКод  );
	КонецЕсли;
	
	Код		= сНоменклатура.Код;
	СпрСс 	= Справочники.Номенклатура.НайтиПоКоду(  Код, Ложь, Родитель);
	Если СпрСс.Пустая() Тогда
		СпрОб = Справочники.Номенклатура.СоздатьЭлемент();
		СпрОб.Родитель = Родитель;
		// проверим
		ЗаполнитьЗначенияСвойств( СпрОб, сНоменклатура );
		// вид номенклатуры
		
		Попытка
			СпрОб.Записать();
			СпрСс = СпрОб.Ссылка;
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не загрузили номенклатуру " + сНоменклатура.Наименование + ", "+ ОписаниеОшибки();
			Сообщение.Сообщить();
			Возврат Неопределено;
		КонецПопытки;
		
		Если  сНоменклатура.Свойство("Цены") Тогда
			ЗагрузитьЦеныНоменклатуры( СпрСс.Ссылка, сНоменклатура.Цены);
		КонецЕсли;
		
	КонецЕсли;
	Возврат СпрСс;
КонецФункции


&НаСервере
Функция ПроведениеПриПереносе() Экспорт
	Возврат Константы.ПереносДанных.Получить();
	Возврат Истина;
КонецФункции


&НаКлиенте
Функция ОЛЕЗначениеДопРеквизита( БазаОЛЕ, ОбъектДопРекв, НазваниеДопРеквизита ) Экспорт
	ПВХ = БазаОЛЕ.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(НазваниеДопРеквизита);
	Для Каждого СтрокаДР ИЗ ОбъектДопРекв.ДополнительныеРеквизиты Цикл
		//Если СтрокаДР.Свойство = ПВХ Тогда
		Если ПВХ.Наименование=СтрокаДР.Свойство.Наименование Тогда
			Возврат СтрокаДР.Значение;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ЗагрузитьСтатьюРасходов( сСправ ) Экспорт 
	Если НЕ ЗначениеЗаполнено( сСправ.Код ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	СпрСс = Справочники.СтатьиРасходов.НайтиПоКоду( сСправ.Код );
	Если СпрСс.Пустая() Тогда
		СпрОб 				= Справочники.СтатьиРасходов.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств( СпрОб, сСправ );
		СпрОб.Родитель 		= СоздатьИерархию( "СтатьиРасходов", сСправ.НаименованиеРодителя);
		
		Попытка
			СпрОб.Записать();
			СпрСс = СпрОб.Ссылка;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат СпрСс;
	
КонецФункции

// по коду, уникальному во всем справочнике
&НаСервере
Функция СоздатьИерархиюПоКоду( НазвСправ, ПолноеНаименование, ПолныйКод ) 
	// 
	//Если Найти(ПолныйКод, "00-00000560" )<> 0 Тогда
	//	с=4;
	//КонецЕсли;
	ИерархияГруппИЭлементов = (Метаданные.Справочники[НазвСправ].ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов);
	Родитель 	= Справочники[НазвСправ].ПустаяСсылка();
	Масс		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеНаименование,"/");
	МассКод		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолныйКод,"/");
	
	Для Н = 1 ПО Масс.Количество() Цикл
		Наименование 	= Масс[Н-1];
		Код		 		= МассКод[Н-1];
		
		// !!!! без указания родителя, во всем справочнике
		Спр = Справочники[НазвСправ].НайтиПоКоду( Код, Ложь);
		Если Спр.Пустая() Тогда
			Если ИерархияГруппИЭлементов Тогда
				СпрГр = Справочники[НазвСправ].СоздатьГруппу();
			Иначе
				СпрГр = Справочники[НазвСправ].СоздатьЭлемент();
			КонецЕсли;
			
			СпрГр.Родитель 		= Родитель;
			СпрГр.Наименование 	= Наименование;
			СпрГр.Код		 	= Код;
			Попытка
				СпрГр.Записать();
				Родитель = СпрГр.Ссылка;
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не удалось записать родителя " +Символы.ПС +
								  ПолноеНаименование +  Символы.ПС + 
								  " в справочнике " + НазвСправ + Символы.ПС +
								  ОписаниеОшибки();
				Сообщение.Сообщить();
				Возврат Справочники[НазвСправ].ПустаяСсылка();
			КонецПопытки;
		Иначе
			Родитель = Спр.Ссылка;
		КонеЦесли;
	КонецЦикла;
	
	Возврат Родитель;
КонецФункции

