// Формирует структуру времени интервала фона.
//
// Параметры:
//  Начало	 - Дата	 - Начало времени интервала фона.
//  Конец	 - Дата	 - Конец времени интервала фона.
// 
// Возвращаемое значение:
//  Структура - Структура времени интервала фона.
//
Функция СформироватьВремяИнтервалаФона(Начало, Конец)
	
	Время = Новый Структура("Начало, Конец");
	Время.Начало = Начало;
	Время.Конец = Конец;
	
	Возврат Время;
	
КонецФункции


// Добавляем в интервалы фона фон текущего дня.
//
// Параметры:
//  ИнтервалыФона - КоллекцияИнтерваловФонаПланировщика - Интервалы фоны, в которые следует добавить фон текущего дня.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
Процедура ДобавитьФонТекущегоДня(ИнтервалыФона, НастройкиОтображения)
	
	ИнтервалыФонаТекущегоДня 			= Новый Массив;
	ВозможныеИнтервалыФонаТекущегоДня 	= Новый Массив;
	ВозможныеИнтервалыФонаТекущегоДня.Добавить(
		СформироватьВремяИнтервалаФона(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата())));
	
	Пока ВозможныеИнтервалыФонаТекущегоДня.Количество() <> 0 Цикл
		
		ВозможыйИнтервалФона = ВозможныеИнтервалыФонаТекущегоДня[0];
		
		ЕстьПересечения = Ложь;
		Для Каждого ИнтервалФона Из ИнтервалыФона Цикл
			
			// Интервал фона пустой.
			Если ИнтервалФона.Цвет = НастройкиОтображения.ЦветКалендаряДоступноеВремя Тогда
				Продолжить;
			КонецЕсли;
			
			// Интервал фона до текущего дня.
			Если ИнтервалФона.Конец <= ВозможыйИнтервалФона.Начало Тогда
				Продолжить;
			КонецЕсли;
			
			// Интервал фона после текущего дня.
			Если ИнтервалФона.Начало >= ВозможыйИнтервалФона.Конец Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьПересечения = Истина;
			
			// Интервал фона покрывает текущий день.
			Если ИнтервалФона.Начало <= ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Конец >= ВозможыйИнтервалФона.Конец Тогда
				Прервать;
			КонецЕсли;
			
			// Интервал фона закрывает начало текущего дня.
			Если ИнтервалФона.Начало <= ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Конец > ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Конец < ВозможыйИнтервалФона.Конец Тогда
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ИнтервалФона.Конец, ВозможыйИнтервалФона.Конец));
				Прервать;
			КонецЕсли;
			
			// Интервал фона закрывает конец текущего дня.
			Если ИнтервалФона.Начало > ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Начало < ВозможыйИнтервалФона.Конец
				И ИнтервалФона.Конец >= ВозможыйИнтервалФона.Конец Тогда
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ВозможыйИнтервалФона.Начало, ИнтервалФона.Начало));
				Прервать;
			КонецЕсли;
			
			// Интервал фона входит в текущий день.
			Если ИнтервалФона.Начало > ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Начало < ВозможыйИнтервалФона.Конец
				И ИнтервалФона.Конец > ВозможыйИнтервалФона.Начало
				И ИнтервалФона.Конец < ВозможыйИнтервалФона.Конец Тогда
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ИнтервалФона.Конец, ВозможыйИнтервалФона.Конец));
				ВозможныеИнтервалыФонаТекущегоДня.Добавить(
					СформироватьВремяИнтервалаФона(ВозможыйИнтервалФона.Начало, ИнтервалФона.Начало));
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьПересечения Тогда
			ИнтервалыФонаТекущегоДня.Добавить(ВозможыйИнтервалФона);
		КонецЕсли;
		
		ВозможныеИнтервалыФонаТекущегоДня.Удалить(0);
		
	КонецЦикла;
	
	Для Каждого ИнтервалФона Из ИнтервалыФонаТекущегоДня Цикл
		ФонТекущегоДня = ИнтервалыФона.Добавить(
			ИнтервалФона.Начало, ИнтервалФона.Конец);
		ФонТекущегоДня.Цвет = НастройкиОтображения.ЦветФонаТекущегоДня;
	КонецЦикла;
	
КонецПроцедуры


// Устанавливает шкалу времени планировщика в соответсвии с персональными настройками.
//
Процедура УстановитьШкалуВремени(Планировщик, НастройкиОтображения, ПериодОтображения)
	
	КоличествоЭлементов = Планировщик.ШкалаВремени.Элементы.Количество();
	Если КоличествоЭлементов >= 2 Тогда
		Для Индекс = 1 По КоличествоЭлементов - 1 Цикл
			ЭтотЭлемент = Планировщик.ШкалаВремени.Элементы[КоличествоЭлементов - Индекс];
			Планировщик.ШкалаВремени.Элементы.Удалить(ЭтотЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		
		ШкалаВремениЧас = Планировщик.ШкалаВремени.Элементы[0];
		ШкалаВремениЧас.ОтображатьПериодическиеМетки = Истина;
		ШкалаВремениЧас.Единица = ТипЕдиницыШкалыВремени.Час;
		ШкалаВремениЧас.Кратность = 1;
		ШкалаВремениЧас.Формат = "DF='HH:mm'";
		ШкалаВремениЧас.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремениЧас.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		
		ШкалаВремениМинута = Планировщик.ШкалаВремени.Элементы.Добавить();
		ШкалаВремениМинута.ОтображатьПериодическиеМетки = Ложь;
		ШкалаВремениМинута.Единица = ТипЕдиницыШкалыВремени.Минута;
		ШкалаВремениМинута.Кратность = НастройкиОтображения.РазмерЯчейкиВремени;
		ШкалаВремениМинута.Формат = "";
		ШкалаВремениМинута.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремениМинута.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		
		ШкалаВремени = Планировщик.ШкалаВремени.Элементы[0];
		ШкалаВремени.ОтображатьПериодическиеМетки = Истина;
		ШкалаВремени.Единица = ТипЕдиницыШкалыВремени.День;
		ШкалаВремени.Кратность = 1;
		ШкалаВремени.Формат = "ДФ='ddd, d MMM yyyy'";
		ШкалаВремени.ЦветТекста = НастройкиОтображения.ЦветКалендаряПодпись;
		ШкалаВремени.ЦветФона = Новый Цвет();
		
	КонецЕсли;
	
КонецПроцедуры


// Возвращает общую дату начала.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Дата - Общая дата начала.
//
Функция ПолучитьДатаНачалаОбщая(НастройкиОтображения) Экспорт
	
	ПериодОтображения 	= ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты 		= ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	ДатаНачалаОбщая 	= Неопределено;
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала = ПолучитьДатуНачалаОтображаемогоПериода( ПериодОтображения, ВыделеннаяДата);
		
		Если ДатаНачалаОбщая = Неопределено Тогда
			ДатаНачалаОбщая = ОтображаемаяДатаНачала;
		Иначе
			ДатаНачалаОбщая = Мин(ДатаНачалаОбщая, ОтображаемаяДатаНачала);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаНачалаОбщая;
	
КонецФункции

// Возвращает общую дату окончания.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Дата - Общая дата начала.
//
Функция ПолучитьДатаОкончанияОбщая(НастройкиОтображения) Экспорт
	
	ПериодОтображения 	= ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты 		= ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	ДатаОкончанияОбщая = Неопределено;
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаОкончания = ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		Если ДатаОкончанияОбщая = Неопределено Тогда
			ДатаОкончанияОбщая = ОтображаемаяДатаОкончания;
		Иначе
			ДатаОкончанияОбщая = Макс(ДатаОкончанияОбщая, ОтображаемаяДатаОкончания);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаОкончанияОбщая;
	
КонецФункции


// Возвращает период отображения с учетом настроек отображения.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ПериодОтображенияРабочегоКалендаря - Период отображения.
//
Функция ПолучитьПериодОтображения(НастройкиОтображения) Экспорт
	
	Если НастройкиОтображения.ВыделенныеДаты.Количество() > 1 Тогда
		ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День");
	Иначе
		ПериодОтображения = НастройкиОтображения.ПериодОтображения;
	КонецЕсли;
	
	Возврат ПериодОтображения;
	
КонецФункции


// Возвращает выделенные даты в планировщике.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Массив - Выделеныне даты.
//
Функция ПолучитьВыделенныеДаты(НастройкиОтображения) Экспорт
	
	ВыделенныеДаты = НастройкиОтображения.ВыделенныеДаты;
	
	Если ВыделенныеДаты.Количество() = 0 Тогда
		ВыделенныеДаты.Добавить(НастройкиОтображения.ОтображаемаяДата);
	КонецЕсли;
	
	СписокДат = Новый СписокЗначений;
	СписокДат.ЗагрузитьЗначения(ВыделенныеДаты);
	СписокДат.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	ВыделенныеДаты = СписокДат.ВыгрузитьЗначения();
	
	Возврат ВыделенныеДаты;
	
КонецФункции


// Возвращает дату приведенную к началу периода отображения календаря
Функция ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя") Тогда
		
		ДатаНачалаПериода = НачалоНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаПериода = НачалоНедели(Дата);
		
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаПериода = НачалоНедели(НачалоМесяца(Дата));
		
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаНачалаПериода = НачалоДня(Дата);
		
	КонецЕсли;
	
	Возврат ДатаНачалаПериода;
	
КонецФункции


// Возвращает дату приведенную к концу периода отображения календаря
Функция ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаОкончанияПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаОкончанияПериода = КонецДня(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя") Тогда
		
		ДатаОкончанияПериода = КонецНедели(Дата);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаОкончанияПериода = КонецНедели(Дата) + 604800; // 604800 - число секунд в неделе
		
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаОкончанияПериода = КонецНедели(КонецМесяца(Дата));
		
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаОкончанияПериода = (НачалоДня(Дата) - 1) + 604800; // 604800 - число секунд в неделе
		
	КонецЕсли;
	
	Возврат ДатаОкончанияПериода;
	
КонецФункции


// Формирует структуру элемента записи календаря.
//
// Параметры:
//  ЗаписьКалендаря	 - СтрокаТаблицыЗначений,
//                     СправочникОбъект.ЗаписиРабочегоКалендаря,
//                     СправочникСсылка.ЗаписиРабочегоКалендаря - Данные записи календаря.
// 
// Возвращаемое значение:
//  Структура - Структура данных записи календаря.
//
Функция СформироватьЭлементЗаписиКалендаря(ЗаписьКалендаря) Экспорт
	
	ЭлементЗаписиКалендаря = Новый Структура("Ссылка, ДатаНачала, ДатаОкончания, ФизическоеЛицо");
	ЗаполнитьЗначенияСвойств(ЭлементЗаписиКалендаря, ЗаписьКалендаря);
	//
	
	ЭлементЗаписиКалендаря.Вставить("ДатаНачалаИсходная", 		ЗаписьКалендаря.ДатаНачала);
	ЭлементЗаписиКалендаря.Вставить("УникальныйИдентификатор", 	Новый УникальныйИдентификатор);
	
	Возврат ЭлементЗаписиКалендаря;
	
КонецФункции



// Применяет настройки отображения планировщика.
//
Процедура ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения) Экспорт
	
	ПериодОтображения 	= ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты 		= ПолучитьВыделенныеДаты(НастройкиОтображения);
	ОтображатьВремяС 	= НастройкиОтображения.ОтображатьВремяС;
	ОтображатьВремяПо 	= НастройкиОтображения.ОтображатьВремяПо;
	
	// Заполнение текущих периодов отображения
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала 		= ПолучитьДатуНачалаОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания	= ПолучитьДатуОкончанияОтображаемогоПериода(ПериодОтображения, ВыделеннаяДата);
		//
		Планировщик.ТекущиеПериодыОтображения.Добавить(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания);
		
	КонецЦикла;
	
	// Рассчет отображаемых часов
	Для Каждого Событие Из Планировщик.Элементы Цикл
		
		Если ОтображатьВремяС = 0 И ОтображатьВремяПо = 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Определяем час начала и окончания.
		// Если окончание приходится на начало дня - то час окончания 24.
		ЧасНачала = Цел((Событие.Начало - НачалоДня(Событие.Начало)) / 3600);
		ЧасОкончания = Цел((Событие.Конец - НачалоДня(Событие.Конец - 1)) / 3600);
		
		// Определяем минимальное время для отображения.
		// Час начала берем как есть.
		// Час окончания берем предыдущий.
		МинВремя = Мин(ЧасНачала, Макс(ЧасОкончания - 1, 0));
		Если МинВремя < ОтображатьВремяС Тогда
			ОтображатьВремяС = МинВремя;
		КонецЕсли;
		
		// Определеяем максимальное время для отображения.
		// Час начала берем следующий.
		// Час окончания берем как есть, если час окончания приходится на начало часа, иначе следующий.
		СмещениеЧасаОкончания = ?(Событие.Конец = НачалоЧаса(Событие.Конец), 0, 1);
		МаксВремя = Макс(Мин(ЧасНачала + 1, 24), Мин(ЧасОкончания + СмещениеЧасаОкончания, 24));
		ОтображатьВремяПоНормализованное = 24 - ОтображатьВремяПо;
		Если МаксВремя > ОтображатьВремяПоНормализованное Тогда
			ОтображатьВремяПо = 24 - МаксВремя;
		КонецЕсли;
		
	КонецЦикла;
	
	// Настройки общие для всех периодов отображения
	//Планировщик.ОтображениеВремениЭлементов 				= НастройкиОтображения.НастройкаОтображениеВремениЭлементов;
	Планировщик.ВыравниватьГраницыЭлементовПоШкалеВремени 	= Истина;
	Планировщик.ЦветТекста 									= НастройкиОтображения.ЦветКалендаряПодпись;
	Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени 	= "ДФ='ddd, d MMM yyyy'";
	
	// Фон календаря.
	ДобавитьФонКалендаря(Планировщик.ИнтервалыФона, НастройкиОтображения);
	
	// добавить фон выходных дней
	// выделяем выходные и праздничные дни
	ДатаНачалаОбщая 	= ПолучитьДатаНачалаОбщая(НастройкиОтображения);
	ДатаОкончанияОбщая 	= ПолучитьДатаОкончанияОбщая(НастройкиОтображения);
	УП_РаботаСРабочимКалендаремСервер.УстановитьЦветФонаВыходныхДней( Планировщик, ДатаНачалаОбщая, ДатаОкончанияОбщая );
	
	
	
	
	// Настройки специфичные для периода отображения
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты")
		Или ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		
		Планировщик.ОтображениеВремениЭлементов 				= ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
		Планировщик.ЦветФона = НастройкиОтображения.ЦветКалендаряФонШапки;
		
		// Планировщик по часам
		Планировщик.ОтображатьТекущуюДату 						= Истина;
		Планировщик.ЕдиницаПериодическогоВарианта 				= ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта 			= 24;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовки 			= Истина;
		
		// Отображать только рабочее время
		Планировщик.ОтступСНачалаПереносаШкалыВремени 			= ОтображатьВремяС;
		Планировщик.ОтступСКонцаПереносаШкалыВремени 			= ОтображатьВремяПо;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		Планировщик.ЦветФона = Новый Цвет();                     
		
		Планировщик.ОтображениеВремениЭлементов 				= ОтображениеВремениЭлементовПланировщика.НеОтображать;
		
		
		// Планировщик по дням
		Планировщик.ОтображатьТекущуюДату 						= Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта 				= ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта 			= 7;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовки 			= Истина;
		
		// Отображать только рабочее время
		Планировщик.ОтступСНачалаПереносаШкалыВремени 			= 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени 			= 0;
		
	КонецЕсли;
	
	// Шкала времени
	УстановитьШкалуВремени(Планировщик, НастройкиОтображения, ПериодОтображения);
	
	// Измерение ФизическоеЛицо
	Планировщик.Измерения.Очистить();
	Если НастройкиОтображения.ФизическиеЛица.Количество() > 1 Тогда
		ИзмерениеПланировщика = Планировщик.Измерения.Добавить("ФизическоеЛицо");
		Для Каждого ФизическоеЛицо Из НастройкиОтображения.ФизическиеЛица Цикл
			ЭлементИзмеренияПомещение = ИзмерениеПланировщика.Элементы.Добавить(ФизическоеЛицо);
		КонецЦикла;
	КонецЕсли;
	
	// Выделение текущего дня.
	ДобавитьФонТекущегоДня(Планировщик.ИнтервалыФона, НастройкиОтображения);
	
КонецПроцедуры

// Добавляем в интервалы фона фон календаря.
//
// Параметры:
//  ИнтервалыФона - КоллекцияИнтерваловФонаПланировщика - Интервалы фоны, в которые следует добавить фон текущего дня.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
Процедура ДобавитьФонКалендаря(ИнтервалыФона, НастройкиОтображения)
	
	
	ДатаНачалаОбщая 	= ПолучитьДатаНачалаОбщая(НастройкиОтображения);
	ДатаОкончанияОбщая 	= ПолучитьДатаОкончанияОбщая(НастройкиОтображения);
	Если ДатаНачалаОбщая = Неопределено Или ДатаОкончанияОбщая = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИнтервалФона Из ИнтервалыФона Цикл
		
		// Интервал фона пустой.
		Если ИнтервалФона.Цвет = НастройкиОтображения.ЦветКалендаряДоступноеВремя
			И ИнтервалФона.Начало = ДатаНачалаОбщая
			И ИнтервалФона.Конец = ДатаОкончанияОбщая Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	// общий фон для всего периода
	ФонПланировщика 		= ИнтервалыФона.Добавить(ДатаНачалаОбщая, ДатаОкончанияОбщая);
	ФонПланировщика.Цвет 	= НастройкиОтображения.ЦветКалендаряДоступноеВремя;
	
	
КонецПроцедуры

// Возвращает дату приведенную к началу предыдущего периода отображения календаря
Функция ПолучитьДатуНачалаПредыдущегоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаПредыдущегоПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоДня(НачалоДня(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоНедели(НачалоНедели(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоМесяца(НачалоМесяца(Дата) - 1);
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаНачалаПредыдущегоПериода = НачалоДня(Дата) - 604800; // 604800 - число секунд в неделе
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДатаНачалаПредыдущегоПериода;
	
КонецФункции


// Возвращает дату приведенную к началу следующего периода отображения календаря
Функция ПолучитьДатуНачалаСледующегоПериода(ПериодОтображения, Дата) Экспорт
	
	ДатаНачалаСледующегоПериода = Неопределено;
	
	Если ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.День") Тогда
		
		ДатаНачалаСледующегоПериода = КонецДня(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Неделя")
		ИЛИ ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.ДвеНедели") Тогда
		
		ДатаНачалаСледующегоПериода = КонецНедели(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.Месяц") Тогда
		
		ДатаНачалаСледующегоПериода = КонецМесяца(Дата) + 1;
		
	ИначеЕсли ПериодОтображения = ПредопределенноеЗначение("Перечисление.ПериодОтображенияРабочегоКалендаря.НеделяСТекущейДаты") Тогда
		
		ДатаНачалаСледующегоПериода = НачалоДня(Дата) + 604800; // 604800 - число секунд в неделе
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ДатаНачалаСледующегоПериода;
	
КонецФункции


// Получает индекс цвета в коллекции КоллекцияЦветов.
//
// Параметры:
//  Цвет - ПеречислениеСсылка.ЦветаРабочегоКалендаря - Цвет, индекс которого необходимо получить.
//
// Возвращаемое значение:
//  Число - Индекс цвета в коллекции.
//
Функция ПолучитьИндексЦвета(Цвет) Экспорт
	
	ИндексЦвета = 0;
	
	Если Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет") Тогда
		ИндексЦвета = 0;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный") Тогда
		ИндексЦвета = 1;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий") Тогда
		ИндексЦвета = 2;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый") Тогда
		ИндексЦвета = 3;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый") Тогда
		ИндексЦвета = 4;
	ИначеЕсли Цвет = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый") Тогда
		ИндексЦвета = 5;
	КонецЕсли;
	
	Возврат ИндексЦвета;
	
КонецФункции
