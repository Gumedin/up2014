Функция СКД_ПроизводственныйКалендарь() Экспорт
	Возврат Справочники.ПроизводственныеКалендари.НайтиПоНаименованию("Российская Федерация", Истина);
	
КонецФункции

Функция СКД_МощностьПодразделенийЗаПериод( ДатаНачала, ДатаОкончания, ТолькоПроизводственныеДолжности = Истина, СворачиватьРезультат = Истина ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиНачало.Подразделение,
		|	СотрудникиНачало.Должность,
		|	СотрудникиНачало.ТарифнаяСтавка,
		|	СотрудникиНачало.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТ_Исполнения
		|ИЗ
		|	РегистрСведений.Сотрудники.СрезПоследних(
		|			{(&ДатаНачала)},
		|			Количество <> 0
		|				И (Должность.Производственная
		|					ИЛИ &ВключатьНеПроизводственныеДолжности)) КАК СотрудникиНачало
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиНачало.ТарифнаяСтавка,
		|	СотрудникиНачало.Должность,
		|	СотрудникиНачало.ФизическоеЛицо,
		|	СотрудникиНачало.Подразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Подразделение,
		|	Сотрудники.Должность,
		|	Сотрудники.ТарифнаяСтавка,
		|	Сотрудники.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Период > &ДатаНачала
		|	И Сотрудники.Период <= &ДатаОкончания
		|	И (Сотрудники.Должность.Производственная
		|			ИЛИ &ВключатьНеПроизводственныеДолжности)
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.Должность,
		|	Сотрудники.ФизическоеЛицо,
		|	Сотрудники.ТарифнаяСтавка,
		|	Сотрудники.Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.Дата,
		|	ВЫБОР
		|		КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|			ТОГДА 8
		|		КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|			ТОГДА 7
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РабочихЧасов
		|ПОМЕСТИТЬ ВТ_РабочееВремя
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Исполнения.Подразделение,
		|	ВТ_Исполнения.Должность,
		|	ВТ_Исполнения.ТарифнаяСтавка,
		|	ВТ_Исполнения.ФизическоеЛицо,
		|	ВТ_РабочееВремя.Дата,
		|	ВТ_РабочееВремя.РабочихЧасов КАК РабочихЧасов
		|ПОМЕСТИТЬ ВТ_РабочиеДниИсполнений
		|ИЗ
		|	ВТ_Исполнения КАК ВТ_Исполнения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_РабочееВремя КАК ВТ_РабочееВремя
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_РабочиеДниИсполнений.Подразделение,
		|	ВТ_РабочиеДниИсполнений.Должность,
		|	ВТ_РабочиеДниИсполнений.ТарифнаяСтавка,
		|	ВТ_РабочиеДниИсполнений.ФизическоеЛицо,
		|	ВТ_РабочиеДниИсполнений.Дата,
		|	ВТ_РабочиеДниИсполнений.РабочихЧасов,
		|	МАКСИМУМ(Сотрудники.Период) КАК ДатаИзменения
		|ПОМЕСТИТЬ ВТ_РабочиеСмены
		|ИЗ
		|	ВТ_РабочиеДниИсполнений КАК ВТ_РабочиеДниИсполнений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК Сотрудники
		|		ПО ВТ_РабочиеДниИсполнений.Должность = Сотрудники.Должность
		|			И ВТ_РабочиеДниИсполнений.ТарифнаяСтавка = Сотрудники.ТарифнаяСтавка
		|			И ВТ_РабочиеДниИсполнений.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
		|			И ВТ_РабочиеДниИсполнений.Дата >= Сотрудники.Период
		|			И ВТ_РабочиеДниИсполнений.Подразделение = Сотрудники.Подразделение
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_РабочиеДниИсполнений.Должность,
		|	ВТ_РабочиеДниИсполнений.ТарифнаяСтавка,
		|	ВТ_РабочиеДниИсполнений.ФизическоеЛицо,
		|	ВТ_РабочиеДниИсполнений.Дата,
		|	ВТ_РабочиеДниИсполнений.РабочихЧасов,
		|	ВТ_РабочиеДниИсполнений.Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_РабочиеСмены.Подразделение,
		|	ВТ_РабочиеСмены.Должность,
		|	ВТ_РабочиеСмены.ТарифнаяСтавка,
		|	ВТ_РабочиеСмены.ФизическоеЛицо,
		|	ВТ_РабочиеСмены.Дата КАК РабочийДень,
		|	СУММА(ВТ_РабочиеСмены.РабочихЧасов) КАК РабочихЧасов,
		|	НАЧАЛОПЕРИОДА(ВТ_РабочиеСмены.Дата, МЕСЯЦ) КАК Месяц,
		|	СУММА(ВЫБОР
		|			КОГДА Сотрудники.СтатусСотрудника.Активный
		|				ТОГДА Сотрудники.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ * ВТ_РабочиеСмены.РабочихЧасов) КАК Мощность,
		|	Сотрудники.Количество КАК Ставок,
		|	Сотрудники.СтатусСотрудника,
		|	ВТ_РабочиеСмены.Должность.Производственная
		|ИЗ
		|	ВТ_РабочиеСмены КАК ВТ_РабочиеСмены
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Сотрудники КАК Сотрудники
		|		ПО ВТ_РабочиеСмены.Должность = Сотрудники.Должность
		|			И ВТ_РабочиеСмены.ТарифнаяСтавка = Сотрудники.ТарифнаяСтавка
		|			И ВТ_РабочиеСмены.ФизическоеЛицо = Сотрудники.ФизическоеЛицо
		|			И ВТ_РабочиеСмены.ДатаИзменения = Сотрудники.Период
		|			И ВТ_РабочиеСмены.Подразделение = Сотрудники.Подразделение
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_РабочиеСмены.Должность,
		|	ВТ_РабочиеСмены.ТарифнаяСтавка,
		|	ВТ_РабочиеСмены.ФизическоеЛицо,
		|	Сотрудники.Количество,
		|	ВТ_РабочиеСмены.Дата,
		|	НАЧАЛОПЕРИОДА(ВТ_РабочиеСмены.Дата, МЕСЯЦ),
		|	ВТ_РабочиеСмены.Подразделение,
		|	Сотрудники.СтатусСотрудника,
		|	ВТ_РабочиеСмены.Должность.Производственная";

		
		
	Запрос.УстановитьПараметр("ВключатьНеПроизводственныеДолжности", НЕ ТолькоПроизводственныеДолжности );
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", СКД_ПроизводственныйКалендарь());
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала );
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания );
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если СворачиватьРезультат Тогда
		РезультатЗапроса.Свернуть("Подразделение,Должность,ТарифнаяСтавка,Месяц", "Мощность");
	КонецЕсли;
	Возврат РезультатЗапроса;

КонецФункции


// нормы времени по месяцам
Функция СКД_НормыРабочегоВремени( ДатаНачала, ДатаОкончания ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				ТОГДА 8
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|				ТОГДА 7
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РабочихЧасов,
		|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Месяц
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)";

		
		
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", СКД_ПроизводственныйКалендарь());
	Запрос.УстановитьПараметр("ДатаНачала", 	НачалоМесяца(ДатаНачала) );
	Запрос.УстановитьПараметр("ДатаОкончания", 	КонецМесяца( ДатаОкончания ));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса;

КонецФункции

Функция СКД_РабочихЧасовВДне( Дата ) Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("ПроизводственныйКалендарь", СКД_ПроизводственныйКалендарь());
	Отбор.Вставить("Дата", 						Дата);
	Отбор.Вставить("Год", 						Год(Дата));
	
	//МенЗап = РегистрыСведений.ДанныеПроизводственногоКалендаря.Получить( Отбор );
	ВидДня = РегистрыСведений.ДанныеПроизводственногоКалендаря.Получить( Отбор ).ВидДня;
	Если 		ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
		Возврат 8;
	ИначеЕсли   ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
		Возврат 7;
	Иначе
		Возврат 0;
	КонецЕсли;
				
КонецФункции


Функция СКД_МощностьПоПланамРабот( ДатаНачала, ДатаОкончания ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ФронтРаботОбороты.ПланРабот.Подразделение КАК Подразделение,
			|	ФронтРаботОбороты.Должность,
			|	ФронтРаботОбороты.ТарифнаяСтавка,
			|	ФронтРаботОбороты.Месяц,
			|	СУММА(ФронтРаботОбороты.КоличествоОборот) КАК МощностьПоПлану
			|ИЗ
			|	РегистрНакопления.ФронтРабот.Обороты(
			|			,
			|			,
			|			,
			|			ТИПЗНАЧЕНИЯ(ПланРабот) = ТИП(Документ.ПланРабот)
			|				И (Месяц МЕЖДУ &ДатаНачала И &ДатаОкончания)
			|				И ТипСуммы = 0) КАК ФронтРаботОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	ФронтРаботОбороты.ТарифнаяСтавка,
			|	ФронтРаботОбороты.Должность,
			|	ФронтРаботОбороты.Месяц,
			|	ФронтРаботОбороты.ПланРабот.Подразделение";
	
	
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция СКД_НачалоГодаПоГоду( ГодПроекта = 0) Экспорт
	Если ГодПроекта = 0 Тогда
		Возврат НачалоГода( ТекущаяДата());
	КонецЕсли;
	Возврат НачалоГода( Дата( ГодПроекта, 1, 1));
КонецФункции


// полные права
Функция СКД_ПолныеПрава() Экспорт
	Возврат  РольДоступна(Метаданные.Роли.ПолныеПрава);
КонецФункции

 //если нет полных прав, то нельзя пустой список
Функция СКД_ВсеМенеджеры() Экспорт
	Если РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда 
		Возврат Истина;
	КонецЕсли;
	// коммерческий директор
	Если РольДоступна(Метаданные.Роли.КоммерческийДиректор) Тогда 
		Возврат Истина;
	КонецЕсли;
	// финансовый директор
	Если РольДоступна(Метаданные.Роли.ФинансовыйДиректор) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	// финансовый менеджер
	Если РольДоступна(Метаданные.Роли.ФинансовыйМенеджер) Тогда 
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
КонецФункции

//
Функция СКД_СписокПуст( ПараметрСКД ) Экспорт
	Если ПараметрСКД = Неопределено  Тогда 
		Возврат Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено( ПараметрСКД ) Тогда 
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

//***************************************************
// 30 12 2014 добавлено физлицо пользователя
//
Функция СКД_ДоступныеФЛ( Диспетчер = Неопределено ) Экспорт
	
	Если Диспетчер = Неопределено Тогда
		Диспетчер = ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоступныеФизЛица.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ДоступныеФизЛица КАК ДоступныеФизЛица
	|ГДЕ
	|	ДоступныеФизЛица.Диспетчер = &Диспетчер";
	
	Запрос.УстановитьПараметр("Диспетчер",  	Диспетчер);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку( "ФизическоеЛицо");	
	
	// 30 12 2014 добавлено физлицо пользователя
	Если Результат.Найти( Диспетчер ) = Неопределено Тогда
		Результат.Добавить( Диспетчер );
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

///**********************************************************************************
 //определяет параметр СКД, ограничивающий список разрешенных проектов
 //список значений

Функция СКД_МассивРазрешенныхПроектов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Проект
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	НЕ Проекты.ПометкаУдаления
		|	И (&ДоступныВсеПроекты
		|			ИЛИ Проекты.Куратор В (&мФизЛицаПользователя)
		|			ИЛИ Проекты.ДиректорПроекта В (&мФизЛицаПользователя)
		|			ИЛИ Проекты.МенеджерПроекта В (&мФизЛицаПользователя))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Проекты.Код";

		//|			ИЛИ Проекты.ИсполнительПроекта 		В (&ТСотрудники))
		
	Запрос.УстановитьПараметр("ДоступныВсеПроекты", 	СКД_ПолныеПрава());
	Запрос.УстановитьПараметр("мФизЛицаПользователя", 	СКД_ДоступныеФЛ());
	
	// 	
	МассивПроектов 	= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Проект");
	Возврат МассивПроектов;
	
КонецФункции

// для отчетов по планам работ
Функция СКД_МассивРазрешенныхПР() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланРабот.Ссылка КАК ПланРабот
		|ИЗ
		|	Документ.ПланРабот КАК ПланРабот
		|ГДЕ
		|	НЕ ПланРабот.ПометкаУдаления
		|	И (&ДоступныВсеПланы
		|			ИЛИ ПланРабот.ЗадачаПроекта.ПроектМенеджер В (&ФизЛица)
		|			ИЛИ ПланРабот.ЗадачаПроекта.Владелец.МенеджерПроекта В (&ФизЛица)
		|			ИЛИ ПланРабот.ЗадачаПроекта.Владелец.Куратор В (&ФизЛица)
		|			ИЛИ ПланРабот.Подразделение В (&Подразделения))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПланРабот.Номер";
	
	Запрос.УстановитьПараметр("ДоступныВсеПланы", 	СКД_ПолныеПрава());
	Запрос.УстановитьПараметр("ФизЛица", 			СКД_ДоступныеФЛ());
	Запрос.УстановитьПараметр("Подразделения", 		УП_КадрыСервер.ДоступныеПодразделения());
	
	МассивПлановРабот = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПланРабот");
	Возврат МассивПлановРабот;
	
КонецФункции


#Область ПосещенияКонтрагентов

// начало месяца посещения
Функция НачалоМесяцаПосещений() Экспорт
	Возврат НачалоМесяца( Константы.МесяцЖурналаПосещений.Получить());
КонецФункции

// открытый период посещений
Функция ОткрытыйПериодПосещений() Экспорт
	Период = Новый СтандартныйПериод;
	Период.Вариант=ВариантСтандартногоПериода.Месяц;
	Период.ДатаНачала 		= НачалоМесяцаПосещений();
	Период.ДатаОкончания 	= КонецМесяца( Период.ДатаНачала);
	Возврат Период;
КонецФункции


// начало посещения не раньше 9 часов,
// и не позднее 17
// дата - дата + время
// возвращает дата+время
Функция НачалоПосещения( Дата ) Экспорт
	ЧасНачала = Час( Дата );
	Если 		ЧасНачала < 9 Тогда
		ЧасНачала = 9;
	ИначеЕсли	ЧасНачала >17 Тогда
		ЧасНачала = 17;
	КонецЕсли;
	
	Возврат НачалоДня( Дата ) + ЧасНачала * 3600;
	
КонецФункции


Функция КонтрагентПоПредмету( ПредметПосещения, ФизическоеЛицо = Неопределено ) Экспорт
	Если 	ТипЗнч( ПредметПосещения ) = Тип("ДокументСсылка.ПланРабот") 
	или		ТипЗнч( ПредметПосещения ) = Тип("ДокументСсылка.ПланРаботТиражный") Тогда
		Возврат УП_ПланыРаботПоПроектам.КонтрагентЗадачиПроекта( ПредметПосещения.ЗадачаПроекта );

		//Возврат ПредметПосещения.ЗадачаПроекта.Владелец.Контрагент;
		
	ИначеЕсли	ТипЗнч( ПредметПосещения ) = Тип("СправочникСсылка.ЗадачиПроектов") Тогда
		Возврат УП_ПланыРаботПоПроектам.КонтрагентЗадачиПроекта( ПредметПосещения );
		//Возврат ПредметПосещения.Владелец.Контрагент;
		
	ИначеЕсли	ТипЗнч( ПредметПосещения ) = Тип("СправочникСсылка.Проекты") Тогда
		Возврат ПредметПосещения.Контрагент;
		
	ИначеЕсли	ТипЗнч( ПредметПосещения ) = Тип("СправочникСсылка.ПроектыТиражные") Тогда
		Возврат ПредметПосещения.Контрагент;
		
	ИначеЕсли	ТипЗнч( ПредметПосещения ) = Тип("СправочникСсылка.ОтметкиТабеля") 
				и ФизическоеЛицо <> Неопределено Тогда
				
		Возврат ФизическоеЛицо.Организация.Контрагент; 
		
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

// дни, в которые рабочее время по норме не 0
Функция РабочиеДниМесяцаПосещений() Экспорт
КонецФункции

#КонецОбласти


//
Функция ПроектЗадачи( ЗадачаПроекта ) Экспорт
	Возврат ЗадачаПроекта.Владелец;
КонецФункции
	