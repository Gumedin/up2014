// от даты до конца месяца или до последней даты
Функция ПериодМесяц( ДатаНачала, ДатаОкончания ) 
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала 		= ДатаНачала;
	Период.ДатаОкончания	= МИН( ДатаОкончания, КонецМесяца( ДатаНачала ));
	Возврат Период;
КонецФункции

// в  том числе в разные годы
Функция  КоличествоРабочихДней(  Календарь, Период)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(1) КАК КоличествоРабочихДней
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И (ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|			ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
		|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &Календарь";

	Запрос.УстановитьПараметр("ДатаНачала", 	Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Календарь", 		Календарь);
	

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.КоличествоРабочихДней =  Null Тогда Возврат 0; КонецЕсли;
		Возврат ВыборкаДетальныеЗаписи.КоличествоРабочихДней;
	КонецЦикла;
КонецФункции


Функция КоличествоРабочихДнейМеждуДатами( ДатаНачала, ДатаОкончания, Календарь = Неопределено ) Экспорт
	Календарь 	= ?( Календарь = Неопределено, СКД_ПроизводственныйКалендарь(), Календарь);
	Период 		= Новый СтандартныйПериод;
	Период.ДатаНачала 		= ДатаНачала;
	Период.ДатаОкончания 	= ДатаОкончания;
	Возврат КоличествоРабочихДней(  Календарь, Период);
КонецФункции


//******************************************
//	количество рабочих часов в указанной дате
Функция КоличествоРабочихЧасовВДне( Дата, Календарь = Неопределено ) Экспорт
	Если Календарь = Неопределено Тогда
		Календарь = СКД_ПроизводственныйКалендарь();
		//Справочники.ПроизводственныеКалендари.НайтиПоНаименованию("Российская Федерация");
	КонецЕсли;
	
	Отбор	= Новый Структура;
	Отбор.Вставить("ПроизводственныйКалендарь", Календарь);
	Отбор.Вставить("Дата", 						Дата);
	Отбор.Вставить("Год", 						Год(Дата));
	
	СтрГрафика	= РегистрыСведений.ДанныеПроизводственногоКалендаря.Получить( Отбор );
	Если 		СтрГрафика.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий Тогда
		Возврат 8;
	ИначеЕсли	СтрГрафика.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
		Возврат 7;
	КонецЕсли;
	Возврат 0;
		
КонецФункции


//
// вариант функции СоответствиеРабочихДнейЗаПериод()
Функция РабочиеДниПоМесяцам( ДатаНачала, ДатаОкончания) Экспорт
	сРД = Новый Соответствие;
	
	Календарь = СКД_ПроизводственныйКалендарь(); //Справочники.ПроизводственныеКалендари.НайтиПоНаименованию("Российская Федерация");
	Если НЕ ЗначениеЗаполнено( Календарь ) Тогда
		Возврат сРД;
	КонецЕсли;
	
	СуткиВСекундах = 24*60*60;
	
	Д1 = НачалоМесяца(ДатаНачала);
	Пока Д1 <= ДатаОкончания Цикл
		ПериодМесяц  			= ПериодМесяц( Д1, ДатаОкончания );
		// несколько цифр за месяц		
		сЗаМесяц = Новый Структура;
		// всего дней (месяц может быть неполным)
		сЗаМесяц.Вставить("Дней", 		 (ПериодМесяц.ДатаОкончания - ПериодМесяц.ДатаНачала)/СуткиВСекундах);
		// рабочих дней
		КоличествоРДнейВМесяце	= КоличествоРабочихДней(  Календарь, ПериодМесяц);
		сЗаМесяц.Вставить("РЧасов", КоличествоРДнейВМесяце * 8);
		сЗаМесяц.Вставить("РДней", КоличествоРДнейВМесяце );
		// количество рабочих недель
		КоличествоНедель = Окр( КоличествоРДнейВМесяце /5, 2);
		сЗаМесяц.Вставить("РНедель", КоличествоНедель );
		// количество месяцев (месяц может быть неполным)
		КоличествоРДнейВПолномМесяце = КоличествоРабочихДней(  Календарь, ПериодМесяц( НачалоМесяца(Д1), КонецМесяца(Д1)));
		КоличествоМесяцев = ?(КоличествоРДнейВПолномМесяце =0, 0, Окр( КоличествоРДнейВМесяце / КоличествоРДнейВПолномМесяце, 2));
		сЗаМесяц.Вставить("РМесяцев", КоличествоМесяцев );
		
		сРД.Вставить( Д1, сЗаМесяц );
		Д1 = НачалоМесяца( ДобавитьМесяц(Д1,1));
	КонецЦикла;
	
	Возврат сРД;
КонецФункции

//**********************************************************************************
// печать плана работ из документа или калькулятора плана работ
//
Функция ДетальноеКоличество( ФронтРабот, Месяц = Неопределено, Должность = Неопределено, ТарифнаяСтавка = Неопределено )
	Отбор = Новый Структура;
	Если Месяц <> Неопределено Тогда
		Отбор.Вставить("Месяц", Месяц);
	КонецЕсли;
	Если Должность <> Неопределено Тогда
		Отбор.Вставить("Должность", 		Должность);
		Отбор.Вставить("ТарифнаяСтавка", 	ТарифнаяСтавка);
	КонецЕсли;
	Если Отбор.Количество() <> 0 Тогда
		тз = ФронтРабот.Скопировать( Отбор, "Количество,Сумма");
		Количество 	= тз.Итог("Количество");
		Сумма 		= тз.Итог("Сумма");
	Иначе
		Количество 	= ФронтРабот.Итог("Количество");
		Сумма	 	= ФронтРабот.Итог("Сумма");
	КонецЕсли;
	С = Новый Соответствие;
	с.Вставить("Количество", Количество );
	с.Вставить("Сумма", 	 Сумма);
	
		
	Возврат с;
		
КонецФункции

Функция ДетальноеКоличествоТиражное( Расчет, Месяц = Неопределено, Номенклатура = Неопределено )
	Отбор = Новый Структура;
	Если Месяц <> Неопределено Тогда
		Отбор.Вставить("Месяц", Месяц);
	КонецЕсли;
	Если Номенклатура <> Неопределено Тогда
		Отбор.Вставить("Номенклатура", 		Номенклатура);
	КонецЕсли;
	Если Отбор.Количество() <> 0 Тогда
		тз = Расчет.Скопировать( Отбор, "Количество,Сумма,СуммаФОТ");
		Количество 	= тз.Итог("Количество");
		Сумма 		= тз.Итог("Сумма");
		СуммаФОТ	= тз.Итог("СуммаФОТ");
	Иначе
		Количество 	= Расчет.Итог("Количество");
		Сумма	 	= Расчет.Итог("Сумма");
		СуммаФОТ	= Расчет.Итог("СуммаФОТ");
	КонецЕсли;
	//С = Новый Соответствие;
	С = Новый Структура;
	с.Вставить("Количество", Количество );
	с.Вставить("Сумма", 	 Сумма);
	с.Вставить("СуммаФОТ", 	 СуммаФОТ);
	Возврат с;
		
КонецФункции


Функция КонтрольныеТочкиЗадачиПроекта( ЗадачаПроекта )
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПроектовВехи.Наименование КАК КонтрольнаяТочка,
		|	ЗадачиПроектовВехи.Дата КАК ДатаКонтрольнойТочки
		|ИЗ
		|	Справочник.ЗадачиПроектовВехи КАК ЗадачиПроектовВехи
		|ГДЕ
		|	ЗадачиПроектовВехи.Владелец = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаКонтрольнойТочки";
	
	Запрос.УстановитьПараметр("Владелец", ЗадачаПроекта );
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ПолучитьФронтРаботПоЗадаче( ЗадачаПроекта ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланРаботФронтРабот.Ссылка КАК Ссылка,
		|	ПланРаботФронтРабот.ТарифнаяСтавка КАК ТарифнаяСтавка,
		|	СУММА(ПланРаботФронтРабот.Количество) КАК Количество,
		|	СУММА(ПланРаботФронтРабот.Сумма) КАК Сумма,
		|	ПланРаботФронтРабот.СтавкаФОТ КАК СтавкаФОТ
		|ИЗ
		|	Документ.ПланРабот.ФронтРабот КАК ПланРаботФронтРабот
		|ГДЕ
		|	ПланРаботФронтРабот.Ссылка.ЗадачаПроекта.Ссылка = &ЗадачаПроекта
		|	И ПланРаботФронтРабот.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланРаботФронтРабот.ТарифнаяСтавка,
		|	ПланРаботФронтРабот.Ссылка,
		|	ПланРаботФронтРабот.СтавкаФОТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	ТарифнаяСтавка";

	Запрос.УстановитьПараметр("ЗадачаПроекта", ЗадачаПроекта);

	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции

Функция ПолучитьФронтРаботПоИсточнику( Источник, Ссылка )
	
		//|	Документ.ПланРабот.ФронтРабот КАК ПланРаботФронтРабот

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланРаботФронтРабот.Месяц,
		|	ПланРаботФронтРабот.Должность,
		|	ПланРаботФронтРабот.ТарифнаяСтавка,
		|	СУММА(ПланРаботФронтРабот.Количество) КАК Количество,
		|	СУММА(ПланРаботФронтРабот.Сумма) КАК Сумма
		|ИЗ
		|	" + Источник +  " КАК ПланРаботФронтРабот
		|ГДЕ
		|	ПланРаботФронтРабот.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланРаботФронтРабот.Месяц,
		|	ПланРаботФронтРабот.Должность,
		|	ПланРаботФронтРабот.ТарифнаяСтавка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;

КонецФункции

Функция ПолучитьРасчетПоИсточнику( Источник, Ссылка )
	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланРаботРасчет.Месяц,
		|	ПланРаботРасчет.Номенклатура,
		|	СУММА(ПланРаботРасчет.Количество) КАК Количество,
		|	СУММА(ПланРаботРасчет.СуммаФОТ) КАК СуммаФОТ,
		|	СУММА(ПланРаботРасчет.Сумма) КАК Сумма
		|ИЗ
		|	" + Источник +  " КАК ПланРаботРасчет
		|ГДЕ
		|	ПланРаботРасчет.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланРаботРасчет.Месяц,
		|	ПланРаботРасчет.Номенклатура";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;

КонецФункции


Процедура СформироватьПланРаботПоИсточнику(ТабДок, Ссылка, Макет )
	
	// 2015 09 22
	ЭтоПланРабот = (ТипЗнч( Ссылка )= Тип("ДокументСсылка.ПланРабот" ));
	
	// начальный фронт работ
	Если 		ЭтоПланРабот Тогда
		Источник 		= "Документ.ПланРабот.ФронтРабот";
		Подразделение	= Ссылка.ЗадачаПроекта.Подразделение;
		Проект	 		= Ссылка.ЗадачаПроекта.Владелец;
		ЗадачаПроекта 	= Ссылка.ЗадачаПроекта;
		Заголовок		= "План работ № " + Ссылка.Номер + " от " + Формат(Ссылка.Дата,"ДЛФ=D"); 
		
	//ИначеЕсли 	ТипЗнч( Ссылка )= Тип("СправочникСсылка.КалькуляторПланаРабот" ) Тогда
	Иначе
	
		Источник 		= "Справочник.КалькуляторПланаРабот.ФронтРабот";
		// 2015 09 22
		Если ЗначениеЗаполнено( Ссылка.ЗадачаПроекта ) Тогда
			Проект	 		= Ссылка.ЗадачаПроекта.Владелец;
			ЗадачаПроекта 	= Ссылка.ЗадачаПроекта;
			Подразделение	= Ссылка.ЗадачаПроекта.Подразделение;
		Иначе
			Проект	 		= Ссылка.Родитель.Наименование; 
			ЗадачаПроекта 	= Ссылка.Наименование;
			Подразделение	= Ссылка.Подразделение;
	КонецЕсли;
		Заголовок		= "Калькулятор плана работ";
		
	КонецЕсли;
	
	
	сПараметрыПечати = Новый Структура;
	// 2015 09 22
	Если ТипЗнч( ЗадачаПроекта ) = Тип("СправочникСсылка.ЗадачиПроектов") Тогда
		СрокиРеализации = Формат(ЗадачаПроекта.НачалоРабот, "ДЛФ=D") + " - " + Формат(ЗадачаПроекта.ОкончаниеРабот, "ДЛФ=D");
		сПараметрыПечати.Вставить("СрокиРеализации", 	СрокиРеализации);
		сПараметрыПечати.Вставить("ПостановкаЗадачи",	ЗадачаПроекта.ПостановкаЗадачи); 
		сПараметрыПечати.Вставить("ТРП",				ЗадачаПроекта.ПроектМенеджер); 
		сПараметрыПечати.Вставить("КонтрольныеТочки",	КонтрольныеТочкиЗадачиПроекта( ЗадачаПроекта ));
		
	КонецЕсли;
	//
	РуководительПП	= УП_КадрыСервер.РуководительПодразделения(Подразделение, ТекущаяДата());
	сПараметрыПечати.Вставить("РуководительПП",	РуководительПП.Руководитель	); 
	
	
	тзФронтРабот = ПолучитьФронтРаботПоИсточнику( Источник, Ссылка );
	
	тзДолжности 	= тзФронтРабот.Скопировать(,"Должность,ТарифнаяСтавка");
	тзДолжности.Свернуть( "Должность,ТарифнаяСтавка", "");
	тзДолжности.Сортировать("Должность,ТарифнаяСтавка");
	
	Шапка 			= Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств( Шапка.Параметры, сПараметрыПечати );
	Шапка.Параметры.Подразделение 	= Подразделение;
	Шапка.Параметры.Заголовок 		= Заголовок;
	Шапка.Параметры.ЗадачаПроекта 	= ЗадачаПроекта;
	Шапка.Параметры.Проект 			= Проект;
	ТабДок.Вывести(Шапка );
	
	// 2015 09 22
	Если сПараметрыПечати.Свойство( "КонтрольныеТочки" ) Тогда
		Для Каждого КТ ИЗ сПараметрыПечати.КонтрольныеТочки Цикл
			ОбластьКТ =  Макет.ПолучитьОбласть("КонтрольнаяТочка");
			ЗаполнитьЗначенияСвойств( ОбластьКТ.Параметры, КТ );
			ТабДок.Вывести( ОбластьКТ );
		КонецЦикла;
	КонецЕсли;
	
	ШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы|Начало");
	ТабДок.Вывести(ШапкаТаблицы );
	
	Для Каждого НС из тзДолжности Цикл
		ШапкаК = Макет.ПолучитьОбласть("ШапкаТаблицы|Должность");
		ЗаполнитьЗначенияСвойств( ШапкаК.Параметры, НС );
		ТабДок.Присоединить(ШапкаК);
	КонецЦикла;
	ШапкаИ = Макет.ПолучитьОбласть("ШапкаТаблицы|Итого");
	ТабДок.Присоединить(ШапкаИ );
	
	тзМесяцы = тзФронтРабот.Скопировать(,"Месяц");
	тзМесяцы.Свернуть( "Месяц", "");
	тзМесяцы.Сортировать("Месяц");
	Для Каждого Месяц ИЗ тзМесяцы Цикл
		ОблМесяц = Макет.ПолучитьОбласть("Месяц|Начало");
		ОблМесяц.Параметры.Номер = тзМесяцы.Индекс( Месяц)  + 1;
		ОблМесяц.Параметры.Месяц = ПредставлениеПериода( НачалоМесяца( Месяц.Месяц ), 
														 КонецМесяца( Месяц.Месяц), "ФП=Истина");
		ТабДок.Вывести(ОблМесяц);
		
		//
		Для Каждого НС из тзДолжности Цикл
			ОблМесяцК = Макет.ПолучитьОбласть("Месяц|Должность");
			Р = ДетальноеКоличество( тзФронтРабот, Месяц.Месяц, НС.Должность, НС.ТарифнаяСтавка );
			ОблМесяцК.Параметры.Количество 	= Р["Количество"];
			ОблМесяцК.Параметры.Сумма 		= Р["Сумма"];
			ТабДок.Присоединить(ОблМесяцК );
		КонецЦикла;
		ОблМесяцИ = Макет.ПолучитьОбласть("Месяц|Итого");
		// 
		Р = ДетальноеКоличество( тзФронтРабот, Месяц.Месяц );
		ОблМесяцИ.Параметры.Количество 	= Р["Количество"];
		ОблМесяцИ.Параметры.Сумма 		= Р["Сумма"];
		ТабДок.Присоединить( ОблМесяцИ );
		
	КонецЦикла;
	
	Подвал = Макет.ПолучитьОбласть("Подвал|Начало");
	ЗаполнитьЗначенияСвойств( Шапка.Параметры, Ссылка );
	ТабДок.Вывести(Подвал);
	Для Каждого НС из тзДолжности Цикл
		ПодвалК = Макет.ПолучитьОбласть("Подвал|Должность");
		//
		Р = ДетальноеКоличество( тзФронтРабот,, НС.Должность, НС.ТарифнаяСтавка );
		ПодвалК.Параметры.Количество 	= Р["Количество"];
		ПодвалК.Параметры.Сумма 		= Р["Сумма"];
		
		
		
		ТабДок.Присоединить(ПодвалК );
	КонецЦикла;
	ПодвалИ = Макет.ПолучитьОбласть("Подвал|Итого");
	
	Р = ДетальноеКоличество( тзФронтРабот );
	ПодвалИ.Параметры.Количество 	= Р["Количество"];
	ПодвалИ.Параметры.Сумма 		= Р["Сумма"];
	
	
	ТабДок.Присоединить(ПодвалИ);
	
	Подписи = Макет.ПолучитьОбласть("Подписи");
	ЗаполнитьЗначенияСвойств( Подписи.Параметры, сПараметрыПечати );
	ТабДок.Вывести(Подписи);
	
	
	
	//}}
КонецПроцедуры

Процедура СформироватьПланРаботТиражныйПоИсточнику(ТабДок, Ссылка, Макет )
	
	// 2015 09 22
	ЭтоПланРабот = (ТипЗнч( Ссылка )= Тип("ДокументСсылка.ПланРаботТиражный" ));
	
	// начальный фронт работ
	Если 		ЭтоПланРабот Тогда
		Источник 		= "Документ.ПланРаботТиражный.Расчет";
		Подразделение	= Ссылка.ЗадачаПроекта.Подразделение;
		Проект	 		= Ссылка.ЗадачаПроекта.Владелец;
		ЗадачаПроекта 	= Ссылка.ЗадачаПроекта;
		Заголовок		= "План работ (тиражный) № " + Ссылка.Номер + " от " + Формат(Ссылка.Дата,"ДЛФ=D"); 
		
	Иначе
		Если Ссылка.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли;
	
		Источник 		= "Справочник.КалькуляторПланаРаботТиражного.Расчет";
		// 2015 09 22
		Если ЗначениеЗаполнено( Ссылка.ЗадачаПроекта ) Тогда
			Проект	 		= Ссылка.ЗадачаПроекта.Владелец;
			ЗадачаПроекта 	= Ссылка.ЗадачаПроекта;
			Подразделение	= Ссылка.ЗадачаПроекта.Подразделение;
		Иначе
			Проект	 		= Ссылка.Родитель.Наименование; 
			ЗадачаПроекта 	= Ссылка.Наименование;
			Подразделение	= Ссылка.Подразделение;
		КонецЕсли;
		Заголовок		= "Калькулятор плана работ (тиражного)";
		
	КонецЕсли;
	СкидкаКлиенту	= Ссылка.СкидкаКлиенту;
	
	
	сПараметрыПечати = Новый Структура;
	// 2015 09 22
	Если ТипЗнч( ЗадачаПроекта ) = Тип("СправочникСсылка.ЗадачиПроектов") Тогда
		СрокиРеализации = Формат(ЗадачаПроекта.НачалоРабот, "ДЛФ=D") + " - " + Формат(ЗадачаПроекта.ОкончаниеРабот, "ДЛФ=D");
		сПараметрыПечати.Вставить("СрокиРеализации", 	СрокиРеализации);
		сПараметрыПечати.Вставить("ПостановкаЗадачи",	ЗадачаПроекта.ПостановкаЗадачи); 
		сПараметрыПечати.Вставить("ТРП",				ЗадачаПроекта.ПроектМенеджер); 
		сПараметрыПечати.Вставить("КонтрольныеТочки",	КонтрольныеТочкиЗадачиПроекта( ЗадачаПроекта ));
		
	КонецЕсли;
	//
	РуководительПП	= УП_КадрыСервер.РуководительПодразделения(Подразделение, ТекущаяДата());
	сПараметрыПечати.Вставить("РуководительПП",	РуководительПП.Руководитель	); 
	
	
	тзРасчет = ПолучитьРасчетПоИсточнику( Источник, Ссылка );
	
	тзНоменклатуры = тзРасчет.Скопировать(,"Номенклатура");
	тзНоменклатуры.Свернуть( "Номенклатура", "");
	тзНоменклатуры.Сортировать("Номенклатура");
	
	Шапка 			= Макет.ПолучитьОбласть("Шапка|Начало");
	ЗаполнитьЗначенияСвойств( Шапка.Параметры, сПараметрыПечати );
	Шапка.Параметры.Подразделение 	= Подразделение;
	Шапка.Параметры.Заголовок 		= Заголовок;
	Шапка.Параметры.ЗадачаПроекта 	= ЗадачаПроекта;
	Шапка.Параметры.Проект 			= Проект;
	Шапка.Параметры.СкидкаКлиенту	= СкидкаКлиенту;
	ТабДок.Вывести(Шапка );
	// для выравнивания результата
	Для Каждого НС из тзНоменклатуры Цикл
		ШапкаК = Макет.ПолучитьОбласть("Шапка|Номенклатура");
		ТабДок.Присоединить(ШапкаК);
	КонецЦикла;
	ШапкаК = Макет.ПолучитьОбласть("Шапка|Итого");
	ТабДок.Присоединить(ШапкаК);
	
	ШапкаТаблицы 	= Макет.ПолучитьОбласть("ШапкаТаблицы|Начало");
	ТабДок.Вывести(ШапкаТаблицы );
	
	Для Каждого НС из тзНоменклатуры Цикл
		ШапкаК = Макет.ПолучитьОбласть("ШапкаТаблицы|Номенклатура");
		ЗаполнитьЗначенияСвойств( ШапкаК.Параметры, НС );
		ТабДок.Присоединить(ШапкаК);
	КонецЦикла;
	ШапкаИ = Макет.ПолучитьОбласть("ШапкаТаблицы|Итого");
	ТабДок.Присоединить(ШапкаИ );
	
	тзМесяцы = тзРасчет.Скопировать(,"Месяц");
	тзМесяцы.Свернуть( "Месяц", "");
	тзМесяцы.Сортировать("Месяц");
	Для Каждого Месяц ИЗ тзМесяцы Цикл
		ОблМесяц = Макет.ПолучитьОбласть("Месяц|Начало");
		ОблМесяц.Параметры.Номер = тзМесяцы.Индекс( Месяц)  + 1;
		ОблМесяц.Параметры.Месяц = ПредставлениеПериода( НачалоМесяца( Месяц.Месяц ), 
														 КонецМесяца( Месяц.Месяц), "ФП=Истина");
		ТабДок.Вывести(ОблМесяц);
		
		//
		Для Каждого НС из тзНоменклатуры Цикл
			ОблМесяцК = Макет.ПолучитьОбласть("Месяц|Номенклатура");
			Р = ДетальноеКоличествоТиражное( тзРасчет, Месяц.Месяц, НС.Номенклатура);
			ЗаполнитьЗначенияСвойств( ОблМесяцК.Параметры, Р );
			//ОблМесяцК.Параметры.Количество 	= Р["Количество"];
			//ОблМесяцК.Параметры.Сумма 		= Р["Сумма"];
			ТабДок.Присоединить(ОблМесяцК );
		КонецЦикла;
		ОблМесяцИ = Макет.ПолучитьОбласть("Месяц|Итого");
		// 
		Р = ДетальноеКоличествоТиражное( тзРасчет, Месяц.Месяц );
		ЗаполнитьЗначенияСвойств( ОблМесяцИ.Параметры, Р );
		//ОблМесяцИ.Параметры.Количество 	= Р["Количество"];
		//ОблМесяцИ.Параметры.Сумма 		= Р["Сумма"];
		ТабДок.Присоединить( ОблМесяцИ );
		
	КонецЦикла;
	
	Р = ДетальноеКоличествоТиражное( тзРасчет );
	
	Подвал = Макет.ПолучитьОбласть("Подвал|Начало");
	ЗаполнитьЗначенияСвойств( Подвал.Параметры, Ссылка );
	Подвал.Параметры.СуммаДляКлиента = Р["Сумма"] - СкидкаКлиенту;
	
	ТабДок.Вывести(Подвал);
	Для Каждого НС из тзНоменклатуры Цикл
		ПодвалК = Макет.ПолучитьОбласть("Подвал|Номенклатура");
		//
		Р = ДетальноеКоличествоТиражное( тзРасчет,, НС.Номенклатура);
		ЗаполнитьЗначенияСвойств( ПодвалК.Параметры, Р );
		
		//ПодвалК.Параметры.Количество 	= Р["Количество"];
		//ПодвалК.Параметры.Сумма 		= Р["Сумма"];
		ТабДок.Присоединить(ПодвалК );
	КонецЦикла;
	ПодвалИ = Макет.ПолучитьОбласть("Подвал|Итого");
	
	Р = ДетальноеКоличествоТиражное( тзРасчет );
	ЗаполнитьЗначенияСвойств( ПодвалИ.Параметры, Р );
	//ПодвалИ.Параметры.Количество 	= Р["Количество"];
	//ПодвалИ.Параметры.Сумма 		= Р["Сумма"];
	ТабДок.Присоединить(ПодвалИ);
	
КонецПроцедуры


// для планов работ - вариант 1
// для планов работ тиражных - вариант 2
Процедура ОбработатьКомандуНаСтрокеФОТ( Количество, СтрФОТ, Команда, Вариант =  1 )
	Если 		Команда = "Добавить" 	Тогда
		СтрФОТ.Количество = СтрФОТ.Количество + Количество;
		
	ИначеЕсли 	Команда = "Вычесть"	Тогда
		СтрФОТ.Количество = МАКС( СтрФОТ.Количество - Количество,0);
		
	ИначеЕсли 	Команда = "Очистить" 	Тогда	
		СтрФОТ.Количество = 0;
		
	ИначеЕсли 	Команда = "Установить" Тогда
		СтрФОТ.Количество = Количество;
		
	КонецЕсли;
	Если Вариант = 1 Тогда
		СтрФОТ.Сумма 		= СтрФОТ.Количество * СтрФОТ.СтавкаФОТ;
	Иначе
		СтрФОТ.СуммаФОТ		= СтрФОТ.Количество * СтрФОТ.ЦенаФОТ;
		СтрФОТ.Сумма		= СтрФОТ.Количество * СтрФОТ.Цена;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПустыеСтроки( ТЗ, НазваниеПоля = "Сумма", ЗначениеПоля = 0 ) Экспорт
	мУдаляемыеСтроки = ТЗ.НайтиСтроки( Новый Структура(НазваниеПоля, ЗначениеПоля ));
	Для Каждого Эл ИЗ мУдаляемыеСтроки Цикл 
		ТЗ.Удалить( Эл );
	КонецЦикла;
КонецПроцедуры

// 2014 10 25
// проверить как с должностями
Процедура ОбработатьИзмененияФронтаРабот( Объект, Период, Количество, Должность, ИсполненВключая,
										  Команда, сКалендарь = Неопределено, НазвПоляКалендаря = "" ) Экспорт
	// строки из текущего ФР отобранные по Ставке по неисполненным месяцам
	сФР = Новый Соответствие;
	//
	Отбор = Новый Структура;
	Отбор.Вставить("Должность", 		Должность);
	Отбор.Вставить("ТарифнаяСтавка", 	Должность.ТарифнаяСтавка);
	мФР = Объект.ФронтРабот.НайтиСтроки( Отбор );
	Для Каждого Эл ИЗ мФР Цикл
		Если Эл.Месяц <= ИсполненВключая Тогда Продолжить; КонецЕсли;
		// список изменяемых строк
		сФР.Вставить( Эл.Месяц, Эл );
	КонецЦикла;
	
	Если ТипЗнч( Объект) = Тип("ДокументСсылка.ПланРабот") 
	ИЛИ ЗначениеЗаполнено( Объект.ЗадачаПроекта ) Тогда
		ГодЗадачиПроекта = Объект.ЗадачаПроекта.Владелец.ГодПроекта;
	Иначе
		// 2017 06 05
		ГодЗадачиПроекта = Объект.ГодПроекта;
	КонецЕсли;
	
	// теперь по установленному периоду, с интервалом месяц
	текМесяц 	= НачалоМесяца( Период.ДатаНачала );
	послМесяц 	= НачалоМесяца( Период.ДатаОкончания );
	Пока текМесяц <= послМесяц Цикл
		Если текМесяц > ИсполненВключая Тогда 
			Стр = сФР.Получить( текМесяц );
			Если Стр = Неопределено Тогда
				Стр 				= Объект.ФронтРабот.Добавить();
				Стр.Месяц 			= текМесяц;
				Стр.Должность	  	= Должность;
				Стр.ТарифнаяСтавка	= Должность.ТарифнаяСтавка;
				//Стр.СтавкаФОТ		= ПоказательТарифнойСтавки( Должность.ТарифнаяСтавка, текМесяц, "СтавкаФОТ");  // цена за час
				// 2014 1 25 
				//Стр.СтавкаФОТ		= СтавкаФОТПодразделения( Объект.Подразделение, Должность.ТарифнаяСтавка, текМесяц);  
				
				// 2017 01 30
				Если ТипЗнч( Объект) = Тип("ДокументСсылка.ПланРабот") И Объект.БезКоэффициентовФОТ Тогда
					Стр.СтавкаФОТ	= ПоказательТарифнойСтавки( Должность.ТарифнаяСтавка, текМесяц, "СтавкаФОТ");  // цена за час
					
				ИначеЕсли 	ГодЗадачиПроекта >= 2017 Тогда
					Стр.СтавкаФОТ	= ПоказательТарифнойСтавки( Должность.ТарифнаяСтавка, текМесяц, "СтавкаФОТ");  // цена за час
					
				Иначе
					// 2014 10 25 
					Стр.СтавкаФОТ	= СтавкаФОТПодразделения( Объект.Подразделение, Должность.ТарифнаяСтавка, текМесяц);  
				КонецЕсли;
				
			КонецЕсли;
			
			Если сКалендарь = Неопределено Тогда
				// если одинаковое число для каждого месяца
				КолВМесяц = Количество;
			Иначе
				// если по календарю, то 
				КолВМесяц = Окр( Количество * сКалендарь[текМесяц][НазвПоляКалендаря], 0);
			
			КонецЕсли;
			
			// обрабатываем команду над одной строкой ФОТ
			ОбработатьКомандуНаСтрокеФОТ( КолВМесяц, Стр, Команда );
			
		КонецЕсли;
		// следующий месяц
		текМесяц = ДобавитьМесяц( текМесяц, 1);
	КонецЦикла;
	
	// удаляем строки
	УдалитьПустыеСтроки( Объект.ФронтРабот  );
	
	
КонецПроцедуры


// 2014 10 25
// проверить как с должностями
Процедура ОбработатьИзмененияРасчета( Объект, Период, Количество, 
										Номенклатура, ИсполненВключая,
										Команда, сКалендарь = Неопределено, НазвПоляКалендаря = "" ) Экспорт
	// строки из текущего ФР отобранные по Ставке по неисполненным месяцам
	сРасчет = Новый Соответствие;
	//
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", 	Номенклатура);
	мР = Объект.Расчет.НайтиСтроки( Отбор );
	Для Каждого Эл ИЗ мР Цикл
		Если Эл.Месяц <= ИсполненВключая Тогда Продолжить; КонецЕсли;
		// список изменяемых строк
		сРасчет.Вставить( Эл.Месяц, Эл );
	КонецЦикла;
	
	// теперь по установленному периоду, с интервалом месяц
	текМесяц 	= НачалоМесяца( Период.ДатаНачала );
	послМесяц 	= НачалоМесяца( Период.ДатаОкончания );
	Пока текМесяц <= послМесяц Цикл
		Если текМесяц > ИсполненВключая Тогда 
			Стр = сРасчет.Получить( текМесяц );
			Если Стр = Неопределено Тогда
				Стр 				= Объект.Расчет.Добавить();
				Стр.Месяц 			= текМесяц;
				Стр.Номенклатура  	= Номенклатура;
				Стр.Цена 			= ЦенаНоменклатуры( Стр.Номенклатура,  Справочники.ВидыЦен.ЦенаОтпускная, 	Стр.Месяц );
				Стр.ЦенаФОТ 		= ЦенаНоменклатуры( Стр.Номенклатура,  Справочники.ВидыЦен.ЦенаФОТ, 		Стр.Месяц );
				
			КонецЕсли;
			
			Если сКалендарь = Неопределено Тогда
				// если одинаковое число для каждого месяца
				КолВМесяц = Количество;
			Иначе
				// если по календарю, то 
				КолВМесяц = Окр( Количество * сКалендарь[текМесяц][НазвПоляКалендаря], 0);
			
			КонецЕсли;
			
			// обрабатываем команду над одной строкой ФОТ
			ОбработатьКомандуНаСтрокеФОТ( КолВМесяц, Стр, Команда, 2 );
			
		КонецЕсли;
		// следующий месяц
		текМесяц = ДобавитьМесяц( текМесяц, 1);
	КонецЦикла;
	
	// удаляем строки
	УдалитьПустыеСтроки( Объект.Расчет  );
	
	
КонецПроцедуры


// Процедура печати документа.
//
Функция ПечатьПланаРабот(МассивОбъектов, ОбъектыПечати, ИмяМакета = "ПланРабот") Экспорт
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланРабот.Ссылка
		|ИЗ
		|	Документ.ПланРабот КАК ПланРабот
		|ГДЕ
		|	ПланРабот.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КалькуляторПланаРабот.Ссылка
		|ИЗ
		|	Справочник.КалькуляторПланаРабот КАК КалькуляторПланаРабот
		|ГДЕ
		|	КалькуляторПланаРабот.Ссылка В(&МассивОбъектов)";
	
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПланРабот_ПланРабот";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщиеМакеты.ПФ_MXL_ПланРабот");
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// выводим документ
		//УП_ПланыРаботПоПроектам.СформироватьПланРаботПоИсточнику(ТабличныйДокумент, Шапка.Ссылка, Макет );
		СформироватьПланРаботПоИсточнику(ТабличныйДокумент, Шапка.Ссылка, Макет );
		
		// конец вывода документа

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции


// Процедура печати документа.
//
Функция ПечатьПланаРаботТиражного(МассивОбъектов, ОбъектыПечати, ИмяМакета = "ПланРабот") Экспорт
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланРаботТиражный.Ссылка
		|ИЗ
		|	Документ.ПланРаботТиражный КАК ПланРаботТиражный
		|ГДЕ
		|	ПланРаботТиражный.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КалькуляторПланаРаботТиражного.Ссылка
		|ИЗ
		|	Справочник.КалькуляторПланаРаботТиражного КАК КалькуляторПланаРаботТиражного
		|ГДЕ
		|	КалькуляторПланаРаботТиражного.Ссылка В ИЕРАРХИИ(&МассивОбъектов)";
	
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПланРабот_ПланРабот";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщиеМакеты.ПФ_MXL_ПланРаботТиражный");
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// выводим документ
		//УП_ПланыРаботПоПроектам.СформироватьПланРаботПоИсточнику(ТабличныйДокумент, Шапка.Ссылка, Макет );
		СформироватьПланРаботТиражныйПоИсточнику(ТабличныйДокумент, Шапка.Ссылка, Макет );
		
		// конец вывода документа

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции


Функция ПериодРаботПоПлануРабот( ПланРабот )
	// период работ 
	тзФР = ПланРабот.ФронтРабот.Выгрузить();
	Если тзФР.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	тзФР.Сортировать("Месяц");
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала 		= НачалоМесяца(тзФР[0].Месяц);
	Период.ДатаОкончания 	= КонецМесяца( тзФР[тзФР.Количество()-1].Месяц );
	
	Возврат Период;
КонецФункции

Функция ПериодПроекта( ЗадачаПроекта )
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала = НачалоГода( Дата(ЗадачаПроекта.Владелец.ГодПроекта,1,1));
	Период.ДатаНачала = КонецГода( Дата(ЗадачаПроекта.Владелец.ГодПроекта,12,31));
	Возврат Период;
КонецФункции

//
Функция ИсполнителиЗадачиПроекта( ЗадачаПроекта, ДатаИсполнения = Неопределено ) Экспорт
	
	// сотрудники подразделения за период работ
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПроектовИсполнители.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗадачиПроектовИсполнители.ФизическоеЛицо.Представление КАК ФизическоеЛицоПредставление
		|ИЗ
		|	Справочник.ЗадачиПроектов.Исполнители КАК ЗадачиПроектовИсполнители
		|ГДЕ
		|	ЗадачиПроектовИсполнители.Ссылка.Ссылка = &Ссылка
		|";	

	Запрос.УстановитьПараметр("Ссылка", ЗадачаПроекта );
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	ВключаяСотрудниковПодразделения = НЕ ЗадачаПроекта.ТолькоИсполнители;
	Если ВключаяСотрудниковПодразделения Тогда
	// добавляем сотрудников подразделения
		тзСотрудники = УП_КадрыСервер.СотрудникиПодразделенияНаДату( ЗадачаПроекта.Подразделение, ДатаИсполнения); 
		Для Каждого СтрФЛ ИЗ тзСотрудники Цикл
			Если Результат.Найти( СтрФЛ.ФизическоеЛицо ) = Неопределено Тогда
				Результат.Добавить( СтрФЛ.ФизическоеЛицо );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ТабельРаботПоЗадачеПроектаУжеСуществует( ТабельЗП, ПланРабот, ПериодРегистрации  ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТабельРаботПоЗадачеПроекта.Ссылка
		|ИЗ
		|	Документ.ТабельРаботПоЗадачеПроекта КАК ТабельРаботПоЗадачеПроекта
		|ГДЕ
		|	ТабельРаботПоЗадачеПроекта.ПланРабот = &ПланРабот
		|	И ТабельРаботПоЗадачеПроекта.ПериодРегистрации = &ПериодРегистрации
		|	И ТабельРаботПоЗадачеПроекта.Ссылка <> &Ссылка
		|	И НЕ ТабельРаботПоЗадачеПроекта.ПометкаУдаления";

		//"ВЫБРАТЬ ПЕРВЫЕ 1
		//|	ТабельРаботПоЗадачеПроекта.Ссылка
		//|ИЗ
		//|	Документ.ТабельРаботПоЗадачеПроекта КАК ТабельРаботПоЗадачеПроекта
		//|ГДЕ
		//|	ТабельРаботПоЗадачеПроекта.Проведен
		//|	И ТабельРаботПоЗадачеПроекта.ПланРабот = &ПланРабот
		//|	И ТабельРаботПоЗадачеПроекта.ПериодРегистрации = &ПериодРегистрации
		//|	И ТабельРаботПоЗадачеПроекта.Ссылка <> &Ссылка";
		
		
	Запрос.УстановитьПараметр("Ссылка", 			ТабельЗП);
	Запрос.УстановитьПараметр("ПериодРегистрации", 	ПериодРегистрации);
	Запрос.УстановитьПараметр("ПланРабот", 			ПланРабот);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст ="Табель работ по плану работ " + ПланРабот + Символы.ПС + 
				"за " + Формат( ПериодРегистрации, "ДФ = 'ММММ гг'") + " уже записан";
		Сообщение.Сообщить();
		Возврат Истина;
	КонецЦикла;
	// 
	Возврат Ложь;
	
КонецФункции

Функция ТабельРаботПоЗадачеПроектаТиражныйУжеСуществует( ТабельЗПТ, ПланРаботТиражный, ПериодРегистрации  ) Экспорт
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТабельРаботПоЗадачеПроектаТиражный.Ссылка
		|ИЗ
		|	Документ.ТабельРаботПоЗадачеПроектаТиражный КАК ТабельРаботПоЗадачеПроектаТиражный
		|ГДЕ
		|	ТабельРаботПоЗадачеПроектаТиражный.Проведен
		|	И ТабельРаботПоЗадачеПроектаТиражный.ПериодРегистрации = &ПериодРегистрации
		|	И ТабельРаботПоЗадачеПроектаТиражный.Ссылка <> &Ссылка
		|	И ТабельРаботПоЗадачеПроектаТиражный.ПланРаботТиражный = &ПланРаботТиражный";
	
		
	Запрос.УстановитьПараметр("Ссылка", 			ТабельЗПТ);
	Запрос.УстановитьПараметр("ПериодРегистрации", 	ПериодРегистрации);
	Запрос.УстановитьПараметр("ПланРаботТиражный", 	ПланРаботТиражный);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст ="Табель работ (тиражный) по плану работ " + ПланРаботТиражный + Символы.ПС + 
				"за " + Формат( ПериодРегистрации, "ДФ = 'ММММ гг'") + " уже записан";
		Сообщение.Сообщить();
		Возврат Истина;
	КонецЦикла;
	// 
	Возврат Ложь;
	
КонецФункции


//*************************************************************************************
// тиражные планы работ
Функция ПолучитьЦеныНоменклатурыИзПланаРабот( ПланРаботТиражный, Номенклатура)  Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланТиражныхРаботОстатки.ЦенаФОТ,
		|	ПланТиражныхРаботОстатки.КоличествоОстаток,
		|	ПланТиражныхРаботОстатки.Цена КАК Цена
		|ИЗ
		|	РегистрНакопления.ПланТиражныхРабот.Остатки КАК ПланТиражныхРаботОстатки
		|ГДЕ
		|	ПланТиражныхРаботОстатки.ПланРаботТиражный = &ПланРаботТиражный
		|	И ПланТиражныхРаботОстатки.Номенклатура = &Номенклатура
		|	И ПланТиражныхРаботОстатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Цена УБЫВ";

	Запрос.УстановитьПараметр("Номенклатура", 		Номенклатура);
	Запрос.УстановитьПараметр("ПланРаботТиражный", 	ПланРаботТиражный);

	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции


// массив номенклатуры из плана работ тиражного 
Функция МассивНоменклатурыИзПланаРаботТиражного( ПланРаботТиражный ) Экспорт 
	
	Если НЕ ТипЗнч( ПланРаботТиражный ) = Тип("ДокументСсылка.ПланРаботТиражный") Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланРаботТиражныйРасчет.Номенклатура
		|ИЗ
		|	Документ.ПланРаботТиражный.Расчет КАК ПланРаботТиражныйРасчет
		|ГДЕ
		|	ПланРаботТиражныйРасчет.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ПланРаботТиражный);

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции


// План работ - м.б. ПланРабот или ПланРаботТиражный
Функция ОтметкиРабочегоВремениПоПлануРабот( ПериодРегистрации, ПланРабот ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТабельУчетаРабочегоВремениРабочееВремя.ТарифнаяСтавка = ЗНАЧЕНИЕ(Справочник.ТарифныеСтавки.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Должность.ТарифнаяСтавка = ЗНАЧЕНИЕ(Справочник.ТарифныеСтавки.ПустаяСсылка)
		|						ТОГДА КатегорияСотрудниковСрезПоследних.ТарифнаяСтавка
		|					ИНАЧЕ ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Должность.ТарифнаяСтавка
		|				КОНЕЦ
		|		ИНАЧЕ ТабельУчетаРабочегоВремениРабочееВремя.ТарифнаяСтавка
		|	КОНЕЦ КАК ТарифнаяСтавка,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ДатаТабеля КАК ДатаТабеля,
		|	СУММА(ТабельУчетаРабочегоВремениРабочееВремя.КоличествоЧасов) КАК Количество,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Задача,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Подразделение,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Должность
		|ИЗ
		|	Документ.ТабельУчетаРабочегоВремени.РабочееВремя КАК ТабельУчетаРабочегоВремениРабочееВремя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТарифныеСтавкиФизическихЛиц.СрезПоследних(&ПериодРегистрации, ) КАК КатегорияСотрудниковСрезПоследних
		|		ПО ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.ФизическоеЛицо = КатегорияСотрудниковСрезПоследних.ФизическоеЛицо
		|ГДЕ
		|	ТабельУчетаРабочегоВремениРабочееВремя.ОтметкаТабеля.Код В(&Коды)
		|	И НАЧАЛОПЕРИОДА(ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.ПериодРегистрации, МЕСЯЦ) = &ПериодРегистрации
		|	И ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Проведен
		|	И ТабельУчетаРабочегоВремениРабочееВремя.Основание = &ПланРабот
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.ФизическоеЛицо,
		|	ТабельУчетаРабочегоВремениРабочееВремя.ДатаТабеля,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Задача,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Подразделение,
		|	ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Должность,
		|	ВЫБОР
		|		КОГДА ТабельУчетаРабочегоВремениРабочееВремя.ТарифнаяСтавка = ЗНАЧЕНИЕ(Справочник.ТарифныеСтавки.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Должность.ТарифнаяСтавка = ЗНАЧЕНИЕ(Справочник.ТарифныеСтавки.ПустаяСсылка)
		|						ТОГДА КатегорияСотрудниковСрезПоследних.ТарифнаяСтавка
		|					ИНАЧЕ ТабельУчетаРабочегоВремениРабочееВремя.Ссылка.Должность.ТарифнаяСтавка
		|				КОНЕЦ
		|		ИНАЧЕ ТабельУчетаРабочегоВремениРабочееВремя.ТарифнаяСтавка
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаТабеля,
		|	ФизическоеЛицо,
		|	ТарифнаяСтавка";

		
	// массив кодов отметок табеля, в которых может содержаться план работ
	// в ТРВ
	мКодов = Новый Массив;
	мКодов.Добавить("02");
	мКодов.Добавить("03");
	мКодов.Добавить("04");
	// 2015 11 11 Ивановская
	мКодов.Добавить("13");
	
	
	Запрос.УстановитьПараметр("Коды", 				мКодов);
	Запрос.УстановитьПараметр("ПериодРегистрации", 	ПериодРегистрации);
	Запрос.УстановитьПараметр("ПланРабот", 			ПланРабот);

	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции


// поиск плана работ по файлу табеля из Excel
Функция ПланРаботИзФайлаExcel( Знач НомерПланаРабот, Дата ) Экспорт
	сПР 	= Новый Структура;
	сПР.Вставить("Задача", "");
	сПр.Вставить("ТарифнаяСтавка", "");
	
	СтрНПР 	= СтрЗаменить( СокрЛП( НомерПланаРабот), "/","\");
	Н 		= Найти( СтрНПР, "\" );
	Если Н = 0 Тогда
		НомерДок 	= СтрНПР;
		НомерПодз	= "";
	Иначе
		НомерДок 	= Лев( СтрНПР, Н-1);
		НомерПодз	= Сред( СтрНПР, Н+1);
	КонецЕсли;		
	
	ДокСс = Документы.ПланРабот.НайтиПоНомеру( НомерДок, Дата );
	сПР.Вставить("Основание", ДокСс );
	Если ЗначениеЗаполнено( НомерПодз ) Тогда
		СсПодзадача = Справочники.ЗадачиПроектовСтруктура.НайтиПоКоду( Число( НомерПодз ),,, ДокСс.ЗадачаПроекта );
		Если НЕ СсПодзадача.Суммарная Тогда
			сПР.Вставить("Задача", 			СсПодзадача );
		КонецЕсли;
		//сПР.Вставить("ТарифнаяСтавка", 	СсПодзадача.ТарифнаяСтавка );
	КонецЕсли;
	Возврат сПР;
КонецФункции


// 
Функция КонтрагентЗадачиПроекта( ЗадачаПроекта ) Экспорт
	Если НЕ ЗначениеЗаполнено( ЗадачаПроекта ) Тогда 
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Если ЗначениеЗаполнено( ЗадачаПроекта.Контрагент ) Тогда 
		Возврат ЗадачаПроекта.Контрагент;
	КонецЕсли;
	Возврат ЗадачаПроекта.Владелец.Контрагент;
	
КонецФункции

Функция МнемоКодКонтрагента( Контрагент ) Экспорт
	Если НЕ ЗначениеЗаполнено( Контрагент ) Тогда 
		Возврат "";
	КонецЕсли;
	МнемоКод = ?(ЗначениеЗаполнено(Контрагент.Мнемокод), Контрагент.Мнемокод, Контрагент.Наименование);
	Возврат СокрЛП( МнемоКод );
КонецФункции


// 2015 07 03
// т.к. в смете задачи проекта может быть несколько планов работ
// выдаем только сумму по одному плану работ
// если план работ не включен в смету задачи проекта, то 0
// 2016 09 18
// план работ  - план работ или план работ тиражный
Функция СметаПланаРабот( ПланРабот ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СметаЗадачиПроектаДокументы.Документ КАК ПланРабот,
		|	СметаЗадачиПроектаДокументы.Ссылка КАК СметаЗадачи
		|ПОМЕСТИТЬ ВТ_ПланРабот
		|ИЗ
		|	Документ.СметаЗадачиПроекта.Документы КАК СметаЗадачиПроектаДокументы
		|ГДЕ
		|	СметаЗадачиПроектаДокументы.Ссылка.Проведен
		|	И СметаЗадачиПроектаДокументы.Документ = &ПланРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(БюджетПоМесяцам.Сумма, 0)) КАК Сумма,
		|	ВТ_ПланРабот.СметаЗадачи КАК СметаЗадачиПроекта
		|ИЗ
		|	ВТ_ПланРабот КАК ВТ_ПланРабот
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БюджетПоМесяцам КАК БюджетПоМесяцам
		|		ПО ВТ_ПланРабот.ПланРабот = БюджетПоМесяцам.Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПланРабот.СметаЗадачи";
	
	Запрос.УстановитьПараметр("ПланРабот", ПланРабот);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	сРезультат = Новый Структура;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		сРезультат.Вставить("СуммаПлан", 			ВыборкаДетальныеЗаписи.Сумма);
		сРезультат.Вставить("СметаЗадачиПроекта", 	ВыборкаДетальныеЗаписи.СметаЗадачиПроекта);
		Возврат сРезультат;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


// 2016 10 19
// исполнение плана работ (в т.ч. тиражного )
// по фронту работ
Функция ДатаИсполненияПланаРаботПоФронтуРабот( ПланРабот ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ФронтРаботОбороты.Месяц) КАК Месяц
		|ИЗ
		|	РегистрНакопления.ФронтРабот.Обороты(
		|			,
		|			,
		|			,
		|			ПланРабот = &ПланРабот
		|				И ТипСуммы = 1) КАК ФронтРаботОбороты";
		
		
	// тип суммы 1 - факт
	Запрос.УстановитьПараметр("ПланРабот", ПланРабот);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Месяц;
	КонецЦикла;
	
	Возврат Дата(1,1,1);

КонецФункции


// 2017 06 19
// определяет массив месяцев для задачи проекта
Функция МесяцыЗадачиПроекта( ЗадачаПроекта ) Экспорт
	// 
	НачалоПроекта		= Дата( ЗадачаПроекта.Владелец.ГодПроекта, 1, 1);
	ОкончаниеПроекта	= Дата( ЗадачаПроекта.Владелец.ГодПроекта, 12, 31);
	//
	НачалоЗадачиПроекта = НачалоМесяца( 
							?( ЗначениеЗаполнено( ЗадачаПроекта.НачалоРабот ), 
							ЗадачаПроекта.НачалоРабот, НачалоПроекта )
							);
							
	ОкончаниеЗадачиПроекта = НачалоМесяца( 
							?( ЗначениеЗаполнено( ЗадачаПроекта.ОкончаниеРабот), 
							ЗадачаПроекта.ОкончаниеРабот, 
							МАКС( ОкончаниеПроекта, КонецГода(НачалоЗадачиПроекта)))
							);
							
	// из-за неправильного ввода может быть ошибка
	ОкончаниеЗадачиПроекта = МАКС( ОкончаниеЗадачиПроекта, НачалоЗадачиПроекта );
	
	мМесяцы = Новый Массив;
	МесяцЗадачи = НачалоЗадачиПроекта;
	Пока МесяцЗадачи <= ОкончаниеЗадачиПроекта Цикл
		мМесяцы.Добавить( МесяцЗадачи );
		МесяцЗадачи = ДобавитьМесяц( МесяцЗадачи, 1);
	КонецЦикла;
	Возврат мМесяцы;
КонецФункции