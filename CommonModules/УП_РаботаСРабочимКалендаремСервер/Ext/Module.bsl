// Возвращает цвет занятости.
//
// Параметры:
//  Занятость - Структура - Занятость.
//
// Возвращаемое значение:
//  Цвет - Цвет занятости.
//
Функция ПолучитьЦветЗанятости(Событие)
	
	Если Событие.Отработано Тогда
		ЦветЗанятости = ЦветаСтиля.ЦветКалендаряЗанятоеВремя;
	Иначе
		ЦветЗанятости = ЦветаСтиля.ЦветКалендаряДоступноеВремя;
	КонецЕсли;
	
	Возврат ЦветЗанятости;
	
КонецФункции

// Формирует структуру интервала фона планировщика.
//
// Параметры:
//  Занятость - Структура - Занятость.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Структура - Интервал фона планировщика
//
Функция ПолучитьСтруктуруИнтервалаФонаПланировщика(Занятость, НастройкиОтображения)
	
	СтруктураИнтервалаФона = Новый Структура("Начало, Конец, Цвет");
	СтруктураИнтервалаФона.Начало 	= Занятость.ДатаНачала;
	СтруктураИнтервалаФона.Конец 	= Занятость.ДатаОкончания;
	СтруктураИнтервалаФона.Цвет 	= ПолучитьЦветЗанятости(Занятость);
	
	Возврат СтруктураИнтервалаФона;
	
КонецФункции


// Формирует структуру элемент планировщика по событию.
//
Функция ПолучитьСтруктурыЭлементовПланировщика(НастройкиОтображения, ЗаписиКалендаря = Неопределено) Экспорт
	
	ПериодОтображения 	= УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты 		= УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	// Получение отображаемых данных
	СобытияПоЧасам = СформироватьТаблицуСобытий();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала =
			УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания =
			УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		
		СобытияНаДату = ПолучитьТаблицуСобытий(
			ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, НастройкиОтображения.ФизическиеЛица, НастройкиОтображения.ПериодОтображения);
		
		Для Каждого Событие Из СобытияНаДату Цикл
			НоваяСтрока = СобытияПоЧасам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктурыЭлементов = Новый Массив;
	
	Для Каждого ЗаписьКалендаря Из СобытияПоЧасам Цикл
		СтруктураЭлемента = ПолучитьСтруктуруЭлементаПланировщика(
			ЗаписьКалендаря,
			НастройкиОтображения.ИспользоватьНапоминания,
			НастройкиОтображения.ОтключеноОтображениеВремени);//,
			//НастройкиОтображения.КартинкиПосещения);
		СтруктурыЭлементов.Добавить(СтруктураЭлемента);
	КонецЦикла;
	
	Возврат СтруктурыЭлементов;
	
КонецФункции

// Формирует таблицу занятости
Функция СформироватьТаблицуЗанятости() Экспорт
	
	ТаблицаЗанятости = Новый ТаблицаЗначений;
	ТаблицаЗанятости.Колонки.Добавить("ДатаНачала");
	ТаблицаЗанятости.Колонки.Добавить("ДатаОкончания");
	ТаблицаЗанятости.Колонки.Добавить("Цвет");
	ТаблицаЗанятости.Колонки.Добавить("Отработано");
	
	Возврат ТаблицаЗанятости;
	
КонецФункции



// Формирует таблицу занятости планировщика.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица занятости планировщика.
//
Функция ПолучитьТаблицуЗанятостиПланировщика(НастройкиОтображения)
	
	ПериодОтображения 	= УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты 		= УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	
	ТаблицаЗанятости = СформироватьТаблицуЗанятости();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		
		ОтображаемаяДатаНачала =
			УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		
		ОтображаемаяДатаОкончания =
			УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
				
		ТаблицаЗанятостиНаДату = ПолучитьТаблицуСобытий(
			ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, НастройкиОтображения.ФизическиеЛица, НастройкиОтображения.ПериодОтображения);
		
		Для Каждого Занятость Из ТаблицаЗанятостиНаДату Цикл
			НоваяСтрока = ТаблицаЗанятости.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Занятость);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЗанятости;
	
КонецФункции


// Формирует структуры интервалов фона планировщика.
//
// Параметры:
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
// Возвращаемое значение:
//  Массив - Структуры интервалов планировщика.
//
Функция ПолучитьСтруктурыИнтерваловФонаПланировщика(НастройкиОтображения) Экспорт
	
	ИнтервалыФонаПланировщика = Новый Массив;
	Если НастройкиОтображения.ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.Месяц Тогда
		Возврат ИнтервалыФонаПланировщика;
	КонецЕсли;
	
	ТаблицаЗанятости = ПолучитьТаблицуЗанятостиПланировщика(НастройкиОтображения);
	
	Для Каждого Занятость Из ТаблицаЗанятости Цикл
		СтруктураИнтервалаФона = ПолучитьСтруктуруИнтервалаФонаПланировщика(Занятость, НастройкиОтображения);
		ИнтервалыФонаПланировщика.Добавить(СтруктураИнтервалаФона);
	КонецЦикла;
	
	Возврат ИнтервалыФонаПланировщика;
	
КонецФункции


// Возвращает пустую структуру данных планировщика.
//
// Возвращаемое значение:
//  Структура - Структура данных планировщика.
//
Функция ПолучитьСтруктуруДанныхПланировщика()
	
	ДанныеПланировщика = Новый Структура;
	ДанныеПланировщика.Вставить("Элементы", Новый Массив);
	ДанныеПланировщика.Вставить("ИнтервалыФона", Новый Массив);
	
	Возврат ДанныеПланировщика;
	
КонецФункции


// Получает данные планировщика, при необходимость сохраняя изменную настройку.
//
Функция ПолучитьДанныеПланировщика(Знач НастройкиОтображения, Знач ИзмененнаяНастройка) Экспорт
	
	СохранитьНастройку(НастройкиОтображения, ИзмененнаяНастройка);
	
	ДанныеПланировщика 					= ПолучитьСтруктуруДанныхПланировщика();
	ДанныеПланировщика.Элементы 		= ПолучитьСтруктурыЭлементовПланировщика(НастройкиОтображения);
	ДанныеПланировщика.ИнтервалыФона 	= ПолучитьСтруктурыИнтерваловФонаПланировщика(НастройкиОтображения);
	
	Возврат ДанныеПланировщика;
	
КонецФункции


// Устанавливает значение измерения элемента планировщика.
//
// Параметры:
//  Элемент - ЭлементПланировщика - Элемент планировщика.
//  Измерение - Любой - Измерение планировщика.
//  ЗначениеИзмерения - Любой - Значение измерения планировщика.
//
Процедура УстановитьЗначениеИзмерения(Элемент, Измерение, ЗначениеИзмерения)
	
	СтруктураЭлемента = Новый Структура("ЗначенияИзмерений");
	
	СоответствиеИзмерений = Новый Соответствие();
	СоответствиеИзмерений.Вставить(Измерение, ЗначениеИзмерения);
	СтруктураЭлемента.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеИзмерений);
	
	Элемент.Загрузить(СтруктураЭлемента);
	
КонецПроцедуры


// Возвращает цвет рамки элемента календаря.
//
// Параметры:
//  ЦветФона	 - Цвет	 - Цвет фона элемента планировщика.
// 
// Возвращаемое значение:
//  Цвет - Цвет рамки записи календаря.
//
Функция ПолучитьЦветРамкиЭлементаПланировщика(ЦветФона)
	
	Если ЦветФона = ЦветаСтиля.ЦветКалендаряКрасный Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряКрасная;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряСиний Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряСиняя;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряЖелтый Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряЖелтая;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряЗеленый Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряЗеленая;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряОранжевый Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряОранжевая;
	ИначеЕсли ЦветФона = ЦветаСтиля.ЦветКалендаряПоУмолчанию Тогда
		ЦветРамки = ЦветаСтиля.РамкаКалендаряПоУмолчанию;
	Иначе
		ЦветРамки = ЦветаСтиля.ЦветРамки;
	КонецЕсли;
	
	Возврат ЦветРамки;
	
	
КонецФункции


// Возвращает по цвету рабочего календаря цвет для отображения
Функция ПолучитьЦветТабличногоДокумента(ЦветКалендаря) Экспорт
	
	Если ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряКрасный;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряСиний;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряЖелтый;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряЗеленый;
	ИначеЕсли ЦветКалендаря = ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый") Тогда
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряОранжевый;
	Иначе
		ЦветТабличногоДокумента = ЦветаСтиля.ЦветКалендаряПоУмолчанию;
	КонецЕсли;
	
	Возврат ЦветТабличногоДокумента;
	
КонецФункции



// Сохраняет персональную настройку рабочего календаря текущего пользователя.
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	//Если Настройка = "ПериодОтображенияРабочегоКалендаря" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ПериодОтображенияРабочегоКалендаря") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"ПериодОтображенияРабочегоКалендаря",
	//		Значение);
	//		
	//ИначеЕсли Настройка = "ОтображатьПомеченныеНаУдаление" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Булево") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"ОтображатьПомеченныеНаУдаление",
	//		Значение);
	//	
	//ИначеЕсли Настройка = "ОтображатьОтклоненные" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Булево") Тогда
	//		
	//		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"ОтображатьОтклоненные",
	//		Значение);
	//	
	//ИначеЕсли Настройка = "ОтображатьНавигационныйКалендарь" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Булево") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"ОтображатьНавигационныйКалендарь",
	//		Значение);
	//	
	//ИначеЕсли Настройка = "СвернутьСобытияВесьДеньВКалендаре" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Булево") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"СвернутьСобытияВесьДеньВКалендаре",
	//		Значение);
	//	
	//ИначеЕсли Настройка = "ВремяНачалаОтображения" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Дата") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"ВремяНачалаОтображения",
	//		Значение);
	//	
	//ИначеЕсли Настройка = "ВремяОкончанияОтображения" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Дата") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"ВремяОкончанияОтображения",
	//		Значение);
	//	
	//ИначеЕсли Настройка = "МасштабСтандартный" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Число") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"МасштабСтандартный",
	//		Значение);
	//	
	//ИначеЕсли Настройка = "МасштабСПанельюИнформации" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Число") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"МасштабСПанельюИнформации",
	//		Значение);
	//	
	//ИначеЕсли Настройка = "ОтображатьЛегенду" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Булево") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"ОтображатьЛегенду",
	//		Значение);
	//	
	//ИначеЕсли Настройка = "ОтображатьВремяС" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Число") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"ОтображатьВремяС",
	//		Значение);
	//	
	//ИначеЕсли Настройка = "ОтображатьВремяПо" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Число") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"ОтображатьВремяПо",
	//		Значение);
	//	
	//ИначеЕсли Настройка = "ОтображениеВремениЭлементов" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ОтображениеВремениЭлементов") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"ОтображениеВремениЭлементов",
	//		Значение);
	//	
	//ИначеЕсли Настройка = "ОтображатьЗанятость" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Булево") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"ОтображатьЗанятость",
	//		Значение);
	//	
	//ИначеЕсли Настройка = "ИспользоватьБыстроеРедактирование" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Булево") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"ИспользоватьБыстроеРедактирование",
	//		Значение);
	//	
	//ИначеЕсли Настройка = "РазмерЯчейкиВремени" Тогда
	//	
	//	Если ТипЗнч(Значение) <> Тип("Число") Тогда
	//		
	//		ВызватьИсключение СтрШаблон(
	//			НСтр("ru = 'Некорректное значение настройки рабочего календаря: ""%1""'"),
	//			Настройка);
	//		
	//	КонецЕсли;
	//	
	//	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	//		"РабочийКалендарь",
	//		"РазмерЯчейкиВремени",
	//		Значение);
	//	
	//Иначе
	//	
	//	ВызватьИсключение СтрШаблон(
	//		НСтр("ru = 'Некорректная настройка рабочего календаря: ""%1""'"),
	//		Настройка);
	//	
	//КонецЕсли;
	
КонецПроцедуры



// Сохраняет измененную настройку отображения.
//
Процедура СохранитьНастройку(НастройкиОтображения, ИзмененнаяНастройка) Экспорт
	
	Если Не ЗначениеЗаполнено(ИзмененнаяНастройка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзмененнаяНастройка = "ПериодОтображения" Тогда
		//УстановитьПерсональнуюНастройку(
		//	"ПериодОтображенияРабочегоКалендаря",
		//	НастройкиОтображения.ПериодОтображения);
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру настроек отображения планировщика.
//
Функция ПолучитьНастройкиОтображения() Экспорт
	
	НастройкиОтображения = Новый Структура;
	
	// Период отображения
	НастройкиОтображения.Вставить(
		"ПериодОтображения",
		Перечисления.ПериодОтображенияРабочегоКалендаря.Месяц );
	
	// Пользователи
	МассивФизическихЛиц = Новый Массив;
	МассивФизическихЛиц.Добавить(ПользователиКлиентСервер.ТекущийПользователь().ФизическоеЛицо);
	НастройкиОтображения.Вставить(
		"ФизическиеЛица",
		МассивФизическихЛиц);
	
	// Отображаемая дата
	ОтображаемаяДата = НачалоДня(ТекущаяДата());
	НастройкиОтображения.Вставить(
		"ОтображаемаяДата",
		ОтображаемаяДата);
	
	// Выделенные даты
	ВыделенныеДаты = Новый Массив;
	ВыделенныеДаты.Добавить(ОтображаемаяДата);
	НастройкиОтображения.Вставить(
		"ВыделенныеДаты",
		ВыделенныеДаты);
	
	
	// Использовать напоминания
	НастройкиОтображения.Вставить(
		"ИспользоватьНапоминания",
		ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя"));
	
	// Настройка отображения времени элементов и 
	НастройкаОтображениеВремениЭлементов = ПолучитьНастройкуОтображениеВремениЭлементов();
	НастройкиОтображения.Вставить(
		"НастройкаОтображениеВремениЭлементов",
		НастройкаОтображениеВремениЭлементов);
	
	// Отключено отображение времени
	НастройкиОтображения.Вставить(
		"ОтключеноОтображениеВремени",
		НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать);
	

	// Цвет календаря подпись
	НастройкиОтображения.Вставить(
		"ЦветКалендаряПодпись",
		ЦветаСтиля.ЦветКалендаряПодпись);
	
	// Цвет календаря фон шапки
	НастройкиОтображения.Вставить(
		"ЦветКалендаряФонШапки",
		ЦветаСтиля.ЦветКалендаряФонШапки);
	
	// Отображать время с
	НастройкиОтображения.Вставить(
		"ОтображатьВремяС",
		9 );
		
	
	// Отображать время по
	НастройкиОтображения.Вставить(
		"ОтображатьВремяПо", 
		6 );
	
	
	// Размер ячейки времени
	НастройкиОтображения.Вставить(
		"РазмерЯчейкиВремени",
		15);
	
	// Цвет фона текущего дня.
	НастройкиОтображения.Вставить(
		"ЦветФонаТекущегоДня",
		ЦветаСтиля.ЦветКалендаряФонТекущегоДня);
	
	// Цвет пустого фона.
	НастройкиОтображения.Вставить(
		"ЦветКалендаряДоступноеВремя",
		ЦветаСтиля.ЦветКалендаряДоступноеВремя);
		
	//// картинки отработано, не отработано
	//КартинкиПосещения = Новый Соответствие;
	//КартинкиПосещения.Вставить(Ложь, 	БиблиотекаКартинок.ЗапланированноеВзаимодействие);
	//КартинкиПосещения.Вставить(Истина, 	БиблиотекаКартинок.Успешно);
	//
	//НастройкиОтображения.Вставить(
	//	"КартинкиПосещения", КартинкиПосещения );
	
	
	Возврат НастройкиОтображения;
	
КонецФункции

// Процедура отображает события пользователя в календарь на указанный период
Процедура ОтобразитьКалендарь(Планировщик, НастройкиОтображения) Экспорт
	
	ЗагрузитьДанныеПланировщика(Планировщик, НастройкиОтображения);
	УП_РаботаСРабочимКалендаремКлиентСервер.ПрименитьНастройкиОтображения(Планировщик, НастройкиОтображения);
	
КонецПроцедуры

// Формирует пустую таблицу событий.
//
Функция СформироватьТаблицуСобытий()
	
	ТаблицаСобытий = Новый ТаблицаЗначений;
	ТаблицаСобытий.Колонки.Добавить("Ссылка");
	ТаблицаСобытий.Колонки.Добавить("Наименование");
	ТаблицаСобытий.Колонки.Добавить("ДатаНачала");
	ТаблицаСобытий.Колонки.Добавить("ДатаОкончания");
	ТаблицаСобытий.Колонки.Добавить("Цвет");
	//ТаблицаСобытий.Колонки.Добавить("УстановленоНапоминание");
	//
	ТаблицаСобытий.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаСобытий.Колонки.Добавить("ПредметПосещения");
	ТаблицаСобытий.Колонки.Добавить("Количество");
	ТаблицаСобытий.Колонки.Добавить("Контрагент");
	ТаблицаСобытий.Колонки.Добавить("Отработано");
	ТаблицаСобытий.Колонки.Добавить("Часов");
	ТаблицаСобытий.Колонки.Добавить("Задание");
	ТаблицаСобытий.Колонки.Добавить("Результат");
	ТаблицаСобытий.Колонки.Добавить("Уточнение");
	
	Возврат ТаблицаСобытий;
	
КонецФункции

// Формирует таблицу событий
Функция ПолучитьТаблицуСобытий(ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания,
 	ФизическиеЛица, ПериодОтображения)
	
	// Для возможности добавления в дальнейшем ссылок на мероприятия не используется Выгрузить.
	ТаблицаСобытий = СформироватьТаблицуСобытий();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.Контрагент,
		|	ПосещенияКонтрагентов.ПредметПосещения,
		|	ПосещенияКонтрагентов.Количество,
		|	ПосещенияКонтрагентов.Часов,
		|	НАЧАЛОПЕРИОДА(ПосещенияКонтрагентов.Дата, ЧАС) КАК ДатаНачала,
		|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПосещенияКонтрагентов.Дата, ЧАС), ЧАС, ПосещенияКонтрагентов.Часов) КАК ДатаОкончания,
		|	ПосещенияКонтрагентов.ФизическоеЛицо,
		|	ПосещенияКонтрагентов.Ссылка КАК Посещение,
		|	ПосещенияКонтрагентов.Подразделение,
		|	ПосещенияКонтрагентов.Отработано,
		|	ПосещенияКонтрагентов.Ссылка,
		|	ПосещенияКонтрагентов.Цвет КАК Цвет,
		|	ПосещенияКонтрагентов.Задание,
		|	ПосещенияКонтрагентов.Результат,
		|	ПосещенияКонтрагентов.Уточнение
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	ПосещенияКонтрагентов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ПосещенияКонтрагентов.ФизическоеЛицо В(&ФизическиеЛица)
		|	И НЕ ПосещенияКонтрагентов.ПометкаУдаления";
		
		
	Запрос.УстановитьПараметр("ДатаНачала", 	ОтображаемаяДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ОтображаемаяДатаОкончания);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	
	//РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаСобытий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		// 
		НоваяСтрока.Наименование = ТекстЭлементаПланировщика( НоваяСтрока, ПериодОтображения );
	КонецЦикла;
	
	Возврат ТаблицаСобытий;
	
КонецФункции

//Функция ТекстЭлементаПланировщика( СтрокаПосещения, ПериодОтображения )
//	//
//	ПредметПосещения 	= СтрокаПосещения.ПредметПосещения;
//	ЧасовПосещения 		= "" + СтрокаПосещения.Часов + "ч.,";
//	Если ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.Месяц Тогда
//		СтрВремя		= Формат( СтрокаПосещения.ДатаНачала, "ДФ='d ddd, HH:mm'") +" - " + 
//						  Формат( СтрокаПосещения.ДатаОкончания, "ДФ='HH:mm'")+ ", " + ЧасовПосещения;
//	Иначе
//		СтрВремя		= ЧасовПосещения;
//	КОнецЕсли;

//	Стр2 				= ?(ЗначениеЗаполнено(СтрокаПосещения.Контрагент.МнемоКод),
//											  СтрокаПосещения.Контрагент.МнемоКод, 
//											  СтрокаПосещения.Контрагент.Наименование );
//											  
//											  
//	Если 		ТипЗнч( ПредметПосещения ) = Тип("ДокументСсылка.ПланРабот") Тогда 
//		Стр1 = "ПР " + СокрЛП( ПредметПосещения.Номер );
//		
//	ИначеЕсли 	ТипЗнч( ПредметПосещения ) = Тип("СправочникСсылка.Номенклатура") Тогда 
//		Стр1 = "" + СтрокаПосещения.Количество+ ", "+ СокрЛП( ПредметПосещения.Артикул );
//		
//	Иначе
//		Стр1 = СокрЛП( ПредметПосещения );
//		
//	КонецЕсли;
//	
//	Текст = СтрВремя  + Символы.ВК + Стр1 + Символы.ВК + Стр2;
//	Возврат Текст;
//КонецФункции


Функция МнемоПредметаПосещения( ПредметПосещения ) Экспорт
	Если 		ТипЗнч( ПредметПосещения ) = Тип("ДокументСсылка.ПланРабот") Тогда 
		Возврат "ПР " + СокрЛП( ПредметПосещения.Номер );
		
	ИначеЕсли 	ТипЗнч( ПредметПосещения ) = Тип("ДокументСсылка.ПланРаботТиражный") Тогда 
		Возврат "ПРт " + СокрЛП( ПредметПосещения.Номер );
		
	ИначеЕсли 	ТипЗнч( ПредметПосещения ) = Тип("СправочникСсылка.Номенклатура") Тогда 
		Возврат СокрЛП( ПредметПосещения.Артикул );
		
	Иначе
		Возврат СокрЛП( ПредметПосещения );
		
	КонецЕсли;
	
КонецФункции

Функция ТекстЭлементаПланировщика( СтрокаПосещения, ПериодОтображения )
	//
	ПредметПосещения 	= СтрокаПосещения.ПредметПосещения;
	ЧасовПосещения 		= "" + СтрокаПосещения.Часов + "ч.";
	МнемоПП				= МнемоПредметаПосещения( ПредметПосещения );
	
	Если ПериодОтображения = Перечисления.ПериодОтображенияРабочегоКалендаря.Месяц Тогда
		СтрВремя		= Формат( СтрокаПосещения.ДатаНачала, "ДФ='d ddd, HH:mm'") +" - " + 
						  Формат( СтрокаПосещения.ДатаОкончания, "ДФ='HH:mm'")+ Символы.ВК;
	Иначе
		СтрВремя		= "";
	КОнецЕсли;

	Стр2 				= ?(ЗначениеЗаполнено(СтрокаПосещения.Контрагент.МнемоКод),
											  СтрокаПосещения.Контрагент.МнемоКод, 
											  СтрокаПосещения.Контрагент.Наименование );
											  
											  
	Если 		ТипЗнч( ПредметПосещения ) = Тип("ДокументСсылка.ПланРабот") 
	Или         ТипЗнч( ПредметПосещения ) = Тип("СправочникСсылка.ОтметкиТабеля") Тогда 
												  
		Стр1 = ЧасовПосещения + ", " + МнемоПП;
		
	ИначеЕсли 	ТипЗнч( ПредметПосещения ) = Тип("СправочникСсылка.Номенклатура") Тогда 
		Стр1 = "" + СтрокаПосещения.Количество+ ", "+  МнемоПП + ", " + ЧасовПосещения ;
		
	ИначеЕсли 	ТипЗнч( ПредметПосещения ) = Тип("ДокументСсылка.ПланРаботТиражный") Тогда 
		МнемоУточнения = МнемоПредметаПосещения( СтрокаПосещения.Уточнение );
		Стр1 =  МнемоПП + Символы.ВК + 
				"" + СтрокаПосещения.Количество+ ", "+  МнемоУточнения + ", " + ЧасовПосещения ;
		
	Иначе
		Стр1 = МнемоПП;
		
	КонецЕсли;
	
	Текст = СтрВремя + Стр1 + Символы.ВК + Стр2;
	Возврат Текст;
КонецФункции




// Получает настройку отображения времени элементов.
//
// Возвращаемое значение:
//  ОтображениеВремениЭлементовПланировщика - Настройка отображения времени элементов
//
Функция ПолучитьНастройкуОтображениеВремениЭлементов()
	
	НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
	Возврат НастройкаОтображениеВремениЭлементов;
	
КонецФункции


// Формирует структуру элемент планировщика по событию.
//
Функция ПолучитьСтруктуруЭлементаПланировщика(Посещение,
	ИспользоватьНапоминания = Неопределено, ОтключеноОтображениеВремени = Неопределено, КартинкиПосещения = Неопределено ) Экспорт
	
	Если ИспользоватьНапоминания = Неопределено Тогда
		ИспользоватьНапоминания = ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя");
	КонецЕсли;
	
	Если ОтключеноОтображениеВремени = Неопределено Тогда
		НастройкаОтображениеВремениЭлементов = ПолучитьНастройкуОтображениеВремениЭлементов();
		ОтключеноОтображениеВремени =
			НастройкаОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
	КонецЕсли;
	
	УстановленоНапоминание = Ложь;
	
	ЭлементПланировщика = Новый ЭлементПланировщика;
	
	ЭлементПланировщика.Начало 	= Посещение.ДатаНачала;
	ЭлементПланировщика.Конец 	= Посещение.ДатаОкончания;
	УстановитьЗначениеИзмерения( ЭлементПланировщика, "ФизическоеЛицо", Посещение.ФизическоеЛицо);
	
	ЭлементПланировщика.Значение =
		УП_РаботаСРабочимКалендаремКлиентСервер.СформироватьЭлементЗаписиКалендаря(Посещение);
	// цвет фонна зависит от отработанности посещения
	ЭлементПланировщика.ЦветФона = ПолучитьЦветТабличногоДокумента( Посещение.Цвет );
	
	ЭлементПланировщика.Картинка = КартинкаЭлемента( Посещение.Отработано );
	
	Если Посещение.Отработано Тогда
		ЭлементПланировщика.Шрифт = Новый Шрифт(ЭлементПланировщика.Шрифт,,,Истина);
	КонецЕсли;
	
	
	
	ЭлементПланировщика.ЦветТекста 	= ЦветаСтиля.ЦветКалендаряПодпись;
	ЭлементПланировщика.ЦветРамки 	= ПолучитьЦветРамкиЭлементаПланировщика(Посещение.Отработано );
	
	ЭлементПланировщика.Текст 		= Посещение.Наименование;
	
	Возврат ЭлементПланировщика.Выгрузить();
	
КонецФункции

Функция КартинкаЭлемента( Отработано)
	Если Отработано Тогда 
		Возврат БиблиотекаКартинок.Успешно;
	Иначе
		Возврат БиблиотекаКартинок.ЗапланированноеВзаимодействие;
	КонецЕсли;
		
КонецФункции


// Загружает данные планировщика.
//
// Параметры:
//  Планировщик - Планировщик - Планировщик.
//  НастройкиОтображения - Структура - Структура настроек отображения календаря.
//
Процедура ЗагрузитьДанныеПланировщика(Планировщик, НастройкиОтображения)
	
	Планировщик.Элементы.Очистить();
	Планировщик.ИнтервалыФона.Очистить();
	
	ПериодОтображения 		= УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьПериодОтображения(НастройкиОтображения);
	ВыделенныеДаты 			= УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьВыделенныеДаты(НастройкиОтображения);
	
		
	// Получение отображаемых данных
	СобытияПоЧасам = СформироватьТаблицуСобытий();
	Для Каждого ВыделеннаяДата Из ВыделенныеДаты Цикл
		ОтображаемаяДатаНачала =
			УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуНачалаОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		ОтображаемаяДатаОкончания =
			УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьДатуОкончанияОтображаемогоПериода(
				ПериодОтображения, ВыделеннаяДата);
		СобытияНаДату = ПолучитьТаблицуСобытий(
			ОтображаемаяДатаНачала, ОтображаемаяДатаОкончания, НастройкиОтображения.ФизическиеЛица, НастройкиОтображения.ПериодОтображения );
		Для Каждого Событие Из СобытияНаДату Цикл
			НоваяСтрока = СобытияПоЧасам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Событие);
			
		КонецЦикла;
	КонецЦикла;
	
	
	// Заполнение элементов планировщика - События
	Для Каждого Событие Из СобытияПоЧасам Цикл
		Элемент = Планировщик.Элементы.Добавить(Событие.ДатаНачала, Событие.ДатаОкончания);
		СтруктураЭлемента = ПолучитьСтруктуруЭлементаПланировщика(
			Событие, НастройкиОтображения.ИспользоватьНапоминания,
			НастройкиОтображения.ОтключеноОтображениеВремени);//,
			//НастройкиОтображения.КартинкиПосещения);
		Элемент.Загрузить(СтруктураЭлемента);
	КонецЦикла;
	
КонецПроцедуры


Процедура УстановитьЦветФонаВыходныхДней( Планировщик,  ДатаНачалаОбщая, ДатаОкончанияОбщая )  Экспорт 
	//
	ЦветФонаНерабочихДней 		= WebЦвета.СветлоСерый;
	ЦветФонаЗакрытогоПериода 	= WebЦвета.ГрифельноСерый;
	Сутки = 24 * 60 * 60;

	Д1 = ДатаНачалаОбщая;
	Пока Д1  <= ДатаОкончанияОбщая Цикл 
		// если дата закрыта
		Если Д1 < НачалоМесяцаПосещений() Тогда
				ИнтервалФона 		= Планировщик.ИнтервалыФона.Добавить( НачалоДня(Д1), КонецДня(Д1));
				ИнтервалФона.Цвет 	= ЦветФонаЗакрытогоПериода;
		Иначе
			КоличествоЧасовВДне = СКД_РабочихЧасовВДне( Д1 );
			Если КоличествоЧасовВДне = 0 Тогда
				ИнтервалФона 		= Планировщик.ИнтервалыФона.Добавить( НачалоДня(Д1), КонецДня(Д1));
				ИнтервалФона.Цвет 	= ЦветФонаНерабочихДней;
			КонецЕсли;
		КонецЕсли;
		
		Д1 = Д1 + Сутки;
	КонецЦикла;
КонецПроцедуры


Функция РасчитатьНормуЗаПериод( ПериодПланирования ) Экспорт
	НормаЧасов 		= 0;
	Сутки 			= 24 * 60 * 60;
	Д1 				= НачалоДня( ПериодПланирования.ДатаНачала );
	КонецПериода 	= НачалоДня( ПериодПланирования.ДатаОкончания );
	Пока Д1 <= ПериодПланирования.ДатаОкончания Цикл
		НормаЧасов = НормаЧасов + УП_ПланыРаботПоПроектам.КоличествоРабочихЧасовВДне( Д1 );
		Д1 = Д1 + Сутки;
	КонецЦикла;
	Возврат НормаЧасов;
КонецФункции


// сПосещение - структура
// обязательные свойства - ФизическоеЛицо, ПредметПосещения
Функция ДобавитьПосещение( Дата, сПосещение ) Экспорт
	
	Если Дата < НачалоМесяцаПосещений() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФизическоеЛицо = сПосещение.ФизическоеЛицо;
	Если НЕ ЗначениеЗаполнено( ФизическоеЛицо ) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если НЕ сПосещение.Свойство( "Часов" ) Тогда
		сПосещение.Вставить("Часов", УП_ПланыРаботПоПроектам.КоличествоРабочихЧасовВДне( Дата ));
	КонецЕсли;
	Если сПосещение.Часов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ сПосещение.Свойство( "Подразделение" ) Тогда
		м = УП_КадрыСервер.ГдеРаботает( ФизическоеЛицо, Дата );
		Если м.Количество() = 0 Тогда 
			Возврат Неопределено;
		КонецЕсли;
		сПосещение.Вставить("Подразделение", м[0]);
	КонецЕсли;
	Если НЕ сПосещение.Свойство( "Контрагент" ) Тогда
		Контрагент = ФизическоеЛицо.Организация.Контрагент;
		Если НЕ ЗначениеЗаполнено( Контрагент ) Тогда
			Возврат Неопределено;
		КонецЕсли;
		сПосещение.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	// не проверяем существование, добавляем 
	СпрОб = Справочники.ПосещенияКонтрагентов.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств( СпрОб, сПосещение );
	// начинаем с 9, если не укаазно
	ВремяНачала = Час( Дата );
	ОдинЧас		= 60 * 60;
	
	СпрОб.Дата = НачалоДня( Дата ) + ?( ВремяНачала =0, 9, ВремяНачала) * ОдинЧас; 
	Попытка
		СпрОб.Записать();
		Возврат СпрОб.Ссылка;
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Функция ДатаСоздаваемогоПосещения( Дата ) Экспорт
		Если КонецМесяца( Дата ) < НачалоМесяцаПосещений() Тогда
		Возврат Неопределено;
	КонецЕсли;
	// если текущая дата попадает в период планирования
	
	Если ДатаМежду( ТекущаяДата(), НачалоМесяца(Дата), КонецМесяца( Дата )) Тогда
		ДатаПосещения = ТекущаяДата();
	Иначе
		ДатаПосещения = КонецМесяца( Дата );
	КонецЕсли;
	СекундВЧасе = 60 * 60;
	ДатаПосещения = НачалоДня( ДатаПосещения ) + 9 * СекундВЧасе;
	Возврат ДатаПосещения;
КонецФункции	


Функция ПродолжительностьПосещенияНоменклатуры( Номенклатура ) Экспорт
	Часов = 4; // по умолчанию
	Если ЗначениеЗаполнено( Номенклатура ) Тогда
		Продолжительность = Номенклатура.Продолжительность;
		Часов = ?( ЗначениеЗаполнено( Продолжительность ), Продолжительность, Часов);
	КонецЕсли;
	Возврат Часов;
КонецФункции


Процедура ОбновитьКонтрагентаПосещений( сКонтрагент, Очистить = Ложь ) Экспорт
	МенЗап = РегистрыСведений.КонтрагентыПосещений.СоздатьМенеджерЗаписи();
	МенЗап.Заполнить( сКонтрагент );
	Если Очистить Тогда
		МенЗап.Удалить();
	Иначе
		МенЗап.Часов = сКонтрагент.Часов;
		МенЗап.Записать();
	КонецЕсли;
КонецПроцедуры
	
Процедура ОчиститьКонтрагентовПосещенийПоПредмету( ПредметПосещения ) Экспорт
	ПосещенияКонтрагентов = РегистрыСведений.КонтрагентыПосещений;
	НаборКП = ПосещенияКонтрагентов.СоздатьНаборЗаписей();
	НаборКП.Отбор.ПредметПосещения.Установить( ПредметПосещения );
	НаборКП.Очистить();
	НаборКП.Записать();
	
КонецПроцедуры

// ПланРабот - план работ или план работ тиражный
Процедура ЗаполнитьКонтрагентовПосещенияПоИсполнителямЗадачи(  ПланРабот, Часов = 8, Количество = 0 ) Экспорт
	ЗадачаПроекта 	= ПланРабот.ЗадачаПроекта;
	Контрагент 		= УП_ПланыРаботПоПроектам.КонтрагентЗадачиПроекта( ЗадачаПроекта );
	Если НЕ ЗначениеЗаполнено( Контрагент ) Тогда
		Возврат;
	КонецЕсли;
	//
	сКонтрагент = Новый Структура;
	сКонтрагент.Вставить("Контрагент", 			Контрагент );
	сКонтрагент.Вставить("ПредметПосещения", 	ПланРабот );
	сКонтрагент.Вставить("Часов", 				Часов );
	сКонтрагент.Вставить("Количество", 			Количество );
	
	мФизЛиц = ЗадачаПроекта.Исполнители.ВыгрузитьКолонку( "ФизическоеЛицо");
	Для Каждого ФизическоеЛицо ИЗ мФизЛиц Цикл
		сКонтрагент.Вставить( "ФизическоеЛицо", ФизическоеЛицо );
		УП_РаботаСРабочимКалендаремСервер.ОбновитьКонтрагентаПосещений( сКонтрагент );
	КонецЦикла;
	
	
КонецПроцедуры

Функция СписокУточненийПредметаПосещения( ПредметПосещения ) Экспорт
	СписокУ = Новый СписокЗначений;
	Если 		ТипЗнч( ПредметПосещения ) = Тип("СправочникСсылка.ЗадачиПроектов")		Тогда
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиПроектовСтруктура.Ссылка КАК Значение,
		|	ЗадачиПроектовСтруктура.Наименование КАК Представление
		|ИЗ
		|	Справочник.ЗадачиПроектовСтруктура КАК ЗадачиПроектовСтруктура
		|ГДЕ
		|	ЗадачиПроектовСтруктура.Владелец.Ссылка = &ПредметПосещения
		|	И НЕ ЗадачиПроектовСтруктура.Суммарная
		|	И НЕ ЗадачиПроектовСтруктура.Закрыта";
	

	ИначеЕсли 	ТипЗнч( ПредметПосещения ) = Тип("ДокументСсылка.ПланРабот")            Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПланРаботФронтРабот.Должность КАК Значение,
			|	ПланРаботФронтРабот.Должность.Наименование КАК Представление
			|ИЗ
			|	Документ.ПланРабот.ФронтРабот КАК ПланРаботФронтРабот
			|ГДЕ
			|	ПланРаботФронтРабот.Ссылка = &ПредметПосещения";
		
		
	ИначеЕсли 	ТипЗнч( ПредметПосещения ) = Тип("ДокументСсылка.ПланРаботТиражный") 	Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПланРаботТиражныйРасчет.Номенклатура КАК Значение,
			|	ПланРаботТиражныйРасчет.Номенклатура.Наименование КАК Представление
			|ИЗ
			|	Документ.ПланРаботТиражный.Расчет КАК ПланРаботТиражныйРасчет
			|ГДЕ
			|	ПланРаботТиражныйРасчет.Ссылка = &ПредметПосещения";
			
	Иначе
		
		Возврат СписокУ;
			
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПредметПосещения", ПредметПосещения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокУ.Добавить( ВыборкаДетальныеЗаписи.Значение,ВыборкаДетальныеЗаписи.Представление);
	КонецЦикла;
		
	Возврат СписокУ;
КонецФункции


Функция ПолучитьПосещенияПоПредметуПосещенияЗаМесяц( ПредметПосещения, ПериодРегистрации ) Экспорт
	Возврат ПолучитьПосещенияПоПредметуПосещенияЗаПериод( ПредметПосещения, НачалоМесяца(ПериодРегистрации), КонецМесяца(ПериодРегистрации));
КонецФункции

Функция ПолучитьПосещенияПоПредметуПосещенияЗаПериод( ПредметПосещения, НачалоПериода, КонецПериода )
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПосещенияКонтрагентов.Уточнение,
		|	ПосещенияКонтрагентов.ФизическоеЛицо,
		|	ПосещенияКонтрагентов.Подразделение,
		|	ПосещенияКонтрагентов.Дата КАК ДатаТабеля,
		|	ПосещенияКонтрагентов.Количество КАК Количество,
		|	ПосещенияКонтрагентов.ПредметПосещения КАК ПланРаботТиражный,
		|	ПосещенияКонтрагентов.Расходы КАК Расходы,
		|	ПосещенияКонтрагентов.Часов КАК Часов,
		|	ПосещенияКонтрагентов.Отработано,
		|	ПосещенияКонтрагентов.Результат
		|ИЗ
		|	Справочник.ПосещенияКонтрагентов КАК ПосещенияКонтрагентов
		|ГДЕ
		|	ПосещенияКонтрагентов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ПосещенияКонтрагентов.Отработано
		|	И ПосещенияКонтрагентов.ПредметПосещения = &ПредметПосещения";
	
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 		КонецПериода);
	Запрос.УстановитьПараметр("ПредметПосещения", 	ПредметПосещения);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат РезультатЗапроса;
	
КонецФункции
	