Функция ОбработкаВыражений(страница) Экспорт     
	//Извлечение тегов @обработка@ из тела HTML страницы и вставление результатов

	результат = страница;
	
	RegExp = новый COMОбъект("VBScript.RegExp");
	
	RegExp.IgnoreCase = 1; //Игнорировать регистр
	RegExp.Global = 1; //Поиск всех вхождений шаблона
	RegExp.MultiLine = 0; //Многострочный режим
	
	выражение = "@(.*)@";
	
	RegExp.Pattern = выражение; //Ищем вхождение
	Matches=RegExp.Execute(результат);
	
	//Параметры = Новый Структура
	Параметры = ПолучитьПараметрыСессии();
	
	П = Новый Соответствие();
	Для Каждого параметр Из Параметры Цикл
		Попытка
			результатВыражения = ""; 
			фнк = """" + параметр.Значение + """";          
			Выполнить("результатВыражения = " + фнк);
			
			П[параметр.Ключ] = результатВыражения;
		Исключение
			Сообщить("Ошибка вычисления значения параметра. [" + фнк + "]");
		КонецПопытки;
	КонецЦикла;		
	
	Для индекс = 0 По Matches.Count-1 Цикл
		выражение = Matches.Item(индекс).Value;
		результатВыражения = "";
		Попытка
			фнк = СтрЗаменить(выражение, "@", "");
			Выполнить("результатВыражения = " + фнк);
		Исключение
			результатВыражения = "{" + выражение + " ошибка вычисления}";
		КонецПопытки;
		
		результат = СтрЗаменить(результат, выражение, результатВыражения);
	КонецЦикла;
	                                                        
	Возврат результат;
КонецФункции	

Функция ПроектыКМ(КМ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Ссылка,
		|	Проекты.ГодПроекта КАК ГодПроекта,
		|	Проекты.Статус КАК Статус,
		|	Проекты.СтатусЗадач КАК СтатусЗадач
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.МенеджерПроекта.Код = &КМ";
	
	Запрос.УстановитьПараметр("КМ", КМ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТекстHTML = Новый ТекстовыйДокумент;
	
	ТекстHTML.ДобавитьСтроку("<TABLE>");
	
	Пока Выборка.Следующий() Цикл
		ТекстHTML.ДобавитьСтроку("<TR>");
		ДобавитьТекстHTML(ТекстHTML, Выборка.Ссылка, Выборка.Ссылка.Наименование );
		ТекстHTML.ДобавитьСтроку("</TR>");
	КонецЦикла;

	ТекстHTML.ДобавитьСтроку("</TABLE>");
	возврат ТекстHTML.ПолучитьТекст();
КонецФункции	

Процедура ДобавитьТекстHTML(ТекстHTML, Элемент, Текст) Экспорт
    // Ссылку будем формировать хитро:
    // Предполагаем что символ "-" не входит в имена объектов метаданных,
    // учавствующих в формировании html
    // Тогда ссылка будет иметь следующий вид:
    // Номенклатура-d341d377-b3b1-11dc-a100-0011d85708ff
    // Передавать нашу ссылку будем через атрибут id
    СсылкаНаЭлемент = Элемент.Метаданные().Имя+"-"
    +Элемент.Ссылка.УникальныйИдентификатор();
    ТекстHTML.ДобавитьСтроку("<A id=""" + СсылкаНаЭлемент + """ href= ""v8://"
    + Элемент + """ >"+Текст+"</A>");
КонецПроцедуры

Функция ОбъектПоСсылке(СсылкаНаЭлемент) Экспорт 
	Объект = Неопределено;
    Разделитель = Найти(СсылкаНаЭлемент,"-");
    Если Разделитель > 0 Тогда
        // Получаем тип элемента
        ТипЭлемента = Лев(СсылкаНаЭлемент,Разделитель-1);
        // Получаем УникальныйИдентификатор
        ГУИД = Сред(СсылкаНаЭлемент,Разделитель+1);
        Объект = Справочники[ТипЭлемента].ПолучитьСсылку(
     		Новый УникальныйИдентификатор(ГУИД));
	КонецЕсли;
	
	Возврат Объект;	
КонецФункции

Процедура ЗаписатьHTMLСтраницу(КодСтраницы, ИсходныйКод) Экспорт
	МенеджерЗаписи = РегистрыСведений.ШаблоныАналитики.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КодСтраницы = КодСтраницы;
	МенеджерЗаписи.ИсходныйКодСтраницы = ИсходныйКод;
	МенеджерЗаписи.Записать();                            
КонецПроцедуры

Функция ПолучитьШаблонСтраницы(КодСтраницы) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныАналитики.ИсходныйКодСтраницы КАК ИсходныйКодСтраницы,
		|	ШаблоныАналитики.КодСтраницы КАК КодСтраницы
		|ИЗ
		|	РегистрСведений.ШаблоныАналитики КАК ШаблоныАналитики
		|ГДЕ
		|	ШаблоныАналитики.КодСтраницы = &КодСтраницы";
	
	Запрос.УстановитьПараметр("КодСтраницы", КодСтраницы);
	РезультатЗапроса = Запрос.Выполнить();                                                  
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		страница = "<HTML><BODY>Новая страница</BODY></HTML>";
	Иначе
		страница = ВыборкаДетальныеЗаписи.Получить(0).ИсходныйКодСтраницы;
	КонецЕсли;
	
	Возврат страница;		
КонецФункции

&НаСервере
Функция НайтиСсылку(Элемент)                 
    Врем = Элемент;
    Пока Врем <> Неопределено Цикл
        Если НРег(Врем.tagName) = "a" Тогда
            Возврат Врем;
        КонецЕсли;
        Врем = Врем.parentElement;
    КонецЦикла;
    Возврат Неопределено;
КонецФункции    // НайтиСсылку(Элемент)

&НаКлиенте
Процедура НайтиИПоказатьОбъект(Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	Если СтрНачинаетсяС(ВРег(ДанныеСобытия.Href), "V8://") Тогда
		Объект = ОбъектПоСсылке(ДанныеСобытия.Element.id);
		ПоказатьЗначение(,Объект);
	
		//Надо отработать нажатие браузером
		ДанныеСобытия.Event.returnValue = Ложь;	      
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПараметрыСессии()
	параметры = Новый Структура();
	КМ = ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо;
	параметры.Вставить("КМ", КМ);
	Возврат параметры;
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// 
// Помошники работы с JSON
Функция СформироватьJSONизМассив(м, БезОбработки = Ложь)
	Документ = Новый ЗаписьJSON();
	
	параметры = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	Документ.УстановитьСтроку(параметры);
	
	Если БезОбработки Тогда 
		Документ.ЗаписатьНачалоМассива();
		Первый = Истина;
		Для Каждого э Из м Цикл 
			Если Не Первый Тогда 
				Документ.ЗаписатьБезОбработки(", ");
			КонецЕсли;
			
			Документ.ЗаписатьБезОбработки(э);
			
			Первый = Ложь;
		КонецЦикла;
		Документ.ЗаписатьКонецМассива();
	Иначе 
		ЗаписатьJSON(Документ, м);
	КонецЕсли;
	Возврат Документ.Закрыть();
КонецФункции	

Функция СформироватьJSONизТЗ(тз, колонка, БезОбработки = Ложь)
	Возврат СформироватьJSONизМассив(тз.ВыгрузитьКолонку(колонка), БезОбработки);
КонецФункции	

Функция СформироватьJSONизСтруктура(данные, БезОбработки = Ложь)
	Документ = Новый ЗаписьJSON();
	Документ.ПроверятьСтруктуру = Ложь;
	
	параметры = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);
	Документ.УстановитьСтроку(параметры);
	
	Первый = Истина;
	Документ.ЗаписатьНачалоОбъекта();
	Для Каждого э из данные Цикл
		Если БезОбработки Тогда 
			Если Не Первый Тогда 
				Документ.ЗаписатьБезОбработки(", ");
			КонецЕсли;
			
			Документ.ЗаписатьИмяСвойства(э.Ключ);
			Документ.ЗаписатьБезОбработки(э.Значение);
			Первый = Ложь;
		Иначе 
			Документ.ЗаписатьИмяСвойства(э.Ключ);
			Документ.ЗаписатьЗначение(э.Значение);
		КонецЕсли;
	КонецЦикла;
	Документ.ЗаписатьКонецОбъекта();
	
	Возврат Документ.Закрыть();
КонецФункции	

Функция СформироватьJSONОбъектИзТЗ(имяКлюч, ключ, имяЗначение, тз, колонка, БезОбработки = Ложь)
	Документ = Новый ЗаписьJSON();
	
	параметры = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);
	Документ.УстановитьСтроку(параметры);
	
	Документ.ЗаписатьНачалоОбъекта();
	Документ.ЗаписатьБезОбработки(имяКлюч + ": '" + ключ + "', " + имяЗначение + ": " + СформироватьJSONизТЗ(тз, колонка, БезОбработки));
	Документ.ЗаписатьКонецОбъекта();
	
	Возврат Документ.Закрыть();
КонецФункции	

/////////////////////////////////////////////////////////////////////////////////////////
// 
// Шаблоны страниц
Функция СтатистикаДляКМ(КодСтаницы, ЗНАЧ ТекущиеПроекты) Экспорт
	Шаблон = ПолучитьШаблонСтраницы(КодСтаницы);
	Попытка
		Категории = Новый ЗаписьJSON();
		Категории.УстановитьСтроку();
		
		Обеспечено = Новый ЗаписьJSON();
		Обеспечено.УстановитьСтроку();
		Реализация = Новый ЗаписьJSON();
		Реализация.УстановитьСтроку();
		Оплата = Новый ЗаписьJSON();
		Оплата.УстановитьСтроку();
		
		Категории.ЗаписатьНачалоМассива();
		Обеспечено.ЗаписатьНачалоМассива();
		Реализация.ЗаписатьНачалоМассива();
		Оплата.ЗаписатьНачалоМассива();
		
		тзВыборка = ТекущиеПроекты.Выгрузить();
		тзВыборка.Свернуть("Проект", "Обеспечено, Реализация, ООбеспечено, Оплата");
	
		Для Каждого Проект Из тзВыборка Цикл 
			Категории.ЗаписатьЗначение(Проект.Проект.Наименование);
			Обеспечено.ЗаписатьЗначение(ОКР(?(Проект.Обеспечено <> 0, Проект.ООбеспечено / Проект.Обеспечено, 0) * 100, 0));
			Реализация.ЗаписатьЗначение(ОКР(?(Проект.Обеспечено <> 0, Проект.Реализация / Проект.Обеспечено, 0) * 100, 0));
			Оплата.ЗаписатьЗначение(ОКР(?(Проект.Обеспечено <> 0, Проект.Оплата / Проект.Обеспечено, 0) * 100, 0));
		КонецЦикла;
		
		Обеспечено.ЗаписатьКонецМассива();
		Реализация.ЗаписатьКонецМассива();
		Оплата.ЗаписатьКонецМассива();
		
		Категории.ЗаписатьКонецМассива();
//		КатегорииС = ;
		
		Серии = Новый ЗаписьJSON();
		Серии.УстановитьСтроку();
		Серии.ЗаписатьНачалоМассива();
		Серии.ЗаписатьНачалоОбъекта();
		Серии.ЗаписатьБезОбработки("name: 'Обеспечено', data: " + Обеспечено.Закрыть());
		Серии.ЗаписатьКонецОбъекта();
		
		Серии.ЗаписатьНачалоОбъекта();
		Серии.ЗаписатьБезОбработки("name: 'Реализация', data: " + Реализация.Закрыть());
		Серии.ЗаписатьКонецОбъекта();
		
		Серии.ЗаписатьНачалоОбъекта();
		Серии.ЗаписатьБезОбработки("name: 'Оплата', data: " + Оплата.Закрыть());
		Серии.ЗаписатьКонецОбъекта();
		
		Серии.ЗаписатьКонецМассива();
//		СерииС = ;
		
		//КатегорииС = "['18-012', '18-032', '18-222']";
		//СерииС =  "[{name: 'Обеспечено', data: [1, 0, 4]}, {name: 'Реализация', data: [5, 7, 3]}, {name: 'Прогноз', data: [5, 7, 3]}]";
		
		Шаблон = СтрЗаменить(Шаблон, "%%КАТЕГОРИИ%%", Категории.Закрыть());
		Шаблон = СтрЗаменить(Шаблон, "%%СЕРИИ%%", Серии.Закрыть());
	Исключение
		Сообщить("Ошибка:" + ОписаниеОшибки());
	КонецПопытки;	
	//HTMLДокумента = А_Аналитика.ОбработкаВыражений(РедакторHTMLДокумента);       
	Возврат Шаблон;
КонецФункции                                                                                 

Функция СтатистикаПоКМ(КодСтаницы, ЗНАЧ ТекущиеПроекты) Экспорт
	Шаблон = ПолучитьШаблонСтраницы(КодСтаницы);
	Попытка
		Категории = Новый ЗаписьJSON();
		Категории.УстановитьСтроку();
		
		ООбеспечено = Новый ЗаписьJSON();
		ООбеспечено.УстановитьСтроку();
		ОГарантия = Новый ЗаписьJSON();
		ОГарантия.УстановитьСтроку();
		ОПрогноз = Новый ЗаписьJSON();
		ОПрогноз.УстановитьСтроку();
		
		Категории.ЗаписатьНачалоМассива();
		ООбеспечено.ЗаписатьНачалоМассива();
		ОГарантия.ЗаписатьНачалоМассива();
		ОПрогноз.ЗаписатьНачалоМассива();
		
		тзВыборка = ТекущиеПроекты.Выгрузить();
		тзВыборка.Свернуть("КлиентМенеджер", "ООбеспечено, ОГарантия, ОПрогноз");
	
		Для Каждого Проект Из тзВыборка Цикл 
			Категории.ЗаписатьЗначение(Проект.КлиентМенеджер);
			ООбеспечено.ЗаписатьЗначение(Проект.ООбеспечено);
			ОГарантия.ЗаписатьЗначение(Проект.ОГарантия);
			ОПрогноз.ЗаписатьЗначение(Проект.ОПрогноз);
		КонецЦикла;
		
		ООбеспечено.ЗаписатьКонецМассива();
		ОГарантия.ЗаписатьКонецМассива();
		ОПрогноз.ЗаписатьКонецМассива();
		
		Категории.ЗаписатьКонецМассива();
//		КатегорииС = ;
		
		Серии = Новый ЗаписьJSON();
		Серии.УстановитьСтроку();
		Серии.ЗаписатьНачалоМассива();
		Серии.ЗаписатьНачалоОбъекта();
		Серии.ЗаписатьБезОбработки("name: 'Обеспечено', data: " + ООбеспечено.Закрыть());
		Серии.ЗаписатьКонецОбъекта();
		
		Серии.ЗаписатьНачалоОбъекта();
		Серии.ЗаписатьБезОбработки("name: 'Гарантия', data: " + ОГарантия.Закрыть());
		Серии.ЗаписатьКонецОбъекта();
		
		Серии.ЗаписатьНачалоОбъекта();
		Серии.ЗаписатьБезОбработки("name: 'Прогноз', data: " + ОПрогноз.Закрыть());
		Серии.ЗаписатьКонецОбъекта();
		
		Серии.ЗаписатьКонецМассива();
//		СерииС = ;
		
		КатегорииС = "['18-012', '18-032', '18-222']";
		СерииС =  "[{name: 'Обеспечено', data: [1, 0, 4]}, {name: 'Гарантия', data: [5, 7, 3]}, {name: 'Прогноз', data: [5, 7, 3]}]";
		
		Шаблон = СтрЗаменить(Шаблон, "%%КАТЕГОРИИ%%", Категории.Закрыть());
		Шаблон = СтрЗаменить(Шаблон, "%%СЕРИИ%%", Серии.Закрыть());
	Исключение
		Сообщить("Ошибка:" + ОписаниеОшибки());
	КонецПопытки;	
	//HTMLДокумента = А_Аналитика.ОбработкаВыражений(РедакторHTMLДокумента);       
	Возврат Шаблон;
КонецФункции                                                                                 

Процедура ДанныеФинансы(Данные, Год)
	
	//Периоды
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	""0000-00"" КАК Период,
		|	БюджетПоМесяцам.Месяц КАК Месяц
		|ИЗ
		|	РегистрНакопления.БюджетПоМесяцам КАК БюджетПоМесяцам
		|ГДЕ
		|	БюджетПоМесяцам.ЗадачаПроекта.ГодЗадачи = &Год
		|	И БюджетПоМесяцам.Сумма <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	БюджетПоМесяцам.Месяц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Месяц";
	
	Запрос.УстановитьПараметр("Год", Год);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Периоды = Результат.Скопировать();
	
	Периоды.Свернуть("Месяц");
	
	//Доход финансовый
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	""0000-00"" КАК Период,
		|	БюджетПоМесяцам.Месяц КАК Месяц,
		|	СУММА(ВЫБОР
		|			КОГДА БюджетПоМесяцам.ВидПлана = ЗНАЧЕНИЕ(Перечисление.ВидыПланаБюджета.Обеспечено)
		|				ТОГДА БюджетПоМесяцам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Обеспечено,
		|	СУММА(ВЫБОР
		|			КОГДА БюджетПоМесяцам.ВидПлана = ЗНАЧЕНИЕ(Перечисление.ВидыПланаБюджета.Гарантия)
		|				ТОГДА БюджетПоМесяцам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Гарантия,
		|	СУММА(ВЫБОР
		|			КОГДА БюджетПоМесяцам.ВидПлана = ЗНАЧЕНИЕ(Перечисление.ВидыПланаБюджета.Прогноз)
		|				ТОГДА БюджетПоМесяцам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Прогноз
		|ИЗ
		|	РегистрНакопления.БюджетПоМесяцам КАК БюджетПоМесяцам
		|ГДЕ
		|	БюджетПоМесяцам.ЗадачаПроекта.ГодЗадачи = &Год
		|	И БюджетПоМесяцам.СтатьяСметы = &СтатьяСметы
		|	И БюджетПоМесяцам.ТипСуммы = &ТипСуммы
		|	И БюджетПоМесяцам.Сумма <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	БюджетПоМесяцам.Месяц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Месяц";
	
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("СтатьяСметы", Справочники.СтатьиСметы.ДохФинансовые);
	Запрос.УстановитьПараметр("ТипСуммы", Перечисления.ТипСуммыБюджета.План);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ДохФинансовые = Результат.Скопировать();
	ДохФинансовые.Очистить();
	
	Обеспечено = 0;
	Гарантия = 0;
	Прогноз = 0;
	Для Каждого период из Периоды Цикл 
		отбор = новый Структура();
		отбор.Вставить("Месяц", период.Месяц);
		
		дПериод = Результат.НайтиСтроки(отбор);
		строка = ДохФинансовые.Добавить();
		
		Для Каждого стр из дПериод Цикл 
			Обеспечено = стр["Обеспечено"] + Обеспечено;
			Гарантия = стр["Гарантия"] + Гарантия;
			Прогноз = стр["Прогноз"] + Прогноз;
		КонецЦикла;	
		
		строка["Обеспечено"] = Обеспечено;
		строка["Гарантия"] = Гарантия;
		строка["Прогноз"] = Прогноз;
		
		строка["Период"] = Формат(период["Месяц"], "ДФ=ММ-гггг");
	КонецЦикла;

	Данные.Вставить("ДохФинансовые", ДохФинансовые);
	
	//ДоходВаловый
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	""0000-00"" КАК Период,
		|	БюджетПоМесяцам.Месяц КАК Месяц,
		|	СУММА(ВЫБОР
		|			КОГДА БюджетПоМесяцам.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипСуммыБюджета.План)
		|				ТОГДА БюджетПоМесяцам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК План,
		|	СУММА(ВЫБОР
		|			КОГДА БюджетПоМесяцам.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипСуммыБюджета.Факт)
		|				ТОГДА БюджетПоМесяцам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Факт
		|ИЗ
		|	РегистрНакопления.БюджетПоМесяцам КАК БюджетПоМесяцам
		|ГДЕ
		|	БюджетПоМесяцам.ЗадачаПроекта.ГодЗадачи = &Год
		|	И БюджетПоМесяцам.СтатьяСметы = &СтатьяСметы
		|	И БюджетПоМесяцам.Сумма <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	БюджетПоМесяцам.Месяц
		|
		|УПОРЯДОЧИТЬ ПО
		|	Месяц";
	
	Запрос.УстановитьПараметр("Год", Год);
	Запрос.УстановитьПараметр("СтатьяСметы", Справочники.СтатьиСметы.ВаловыйДоход);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ВаловыйДоход = Результат.Скопировать();
	ВаловыйДоход.Очистить();
	
	План = 0;
	Факт = 0;
	Для Каждого период из Периоды Цикл 
		отбор = новый Структура();
		отбор.Вставить("Месяц", период.Месяц);
		
		дПериод = Результат.НайтиСтроки(отбор);
		строка = ВаловыйДоход.Добавить();
		
		Для Каждого стр из дПериод Цикл 
			План = стр["План"] + План;
			Факт = стр["Факт"] + Факт;
		КонецЦикла;	
		
		строка["План"] = План;
		строка["Факт"] = Факт;
		
		строка["Период"] = Формат(период["Месяц"], "ДФ=ММ-гггг");		
	КонецЦикла;

	Данные.Вставить("ВаловыйДоход", ВаловыйДоход);
	
	//Реализация
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	""0000-00"" КАК Период,
		|	Реализация.Месяц КАК Месяц,
		|	СУММА(Реализация.План) КАК План,
		|	СУММА(Реализация.Факт) КАК Факт,
		|	NULL КАК Оплата
		|ИЗ
		|	РегистрНакопления.Реализация КАК Реализация
		|ГДЕ
		|	Реализация.ЗадачаПроекта.ГодЗадачи = &Год
		|
		|СГРУППИРОВАТЬ ПО
		|	Реализация.Месяц
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""0000-00"" КАК Период,
		|	ОбеспечениеОплата.Месяц,
		|	NULL,
		|	NULL,
		|	СУММА(ОбеспечениеОплата.СуммаОплачено)
		|ИЗ
		|	РегистрНакопления.ОбеспечениеОплата КАК ОбеспечениеОплата
		|ГДЕ
		|	ОбеспечениеОплата.ЗадачаПроекта.ГодЗадачи = &Год
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбеспечениеОплата.Месяц";
	
	Запрос.УстановитьПараметр("Год", Год);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Результат.Свернуть("Период, Месяц","План, Факт, Оплата");
	Результат.Сортировать("Месяц");

	План = 0;
	Факт = 0;
	Оплата = 0;
	Для Каждого строка из Результат Цикл 
		План = строка["План"] + План;
		Факт = строка["Факт"] + Факт;
		Оплата = строка["Оплата"] + Оплата;
		
		строка["План"] = План;
		строка["Факт"] = Факт;
		строка["Оплата"] = Оплата;
		
		строка["Период"] = Формат(строка["Месяц"], "ДФ=ММ-гггг");
	КонецЦикла;
	
	Данные.Вставить("Реализация", Результат);
	
	//Расходы
	
КонецПроцедуры

Функция СтатистикаФинансы(КодСтаницы, Год) Экспорт
	Шаблон = ПолучитьШаблонСтраницы(КодСтаницы);  
	Попытка
		Данные = Новый Структура();
		ДанныеФинансы(Данные, Год);
		
		//ДОХОДЫ
		Категории = СформироватьJSONизТЗ(Данные["ДохФинансовые"], "Период");
		
		Шаблон = СтрЗаменить(Шаблон, "%%ДОХОДЫ_КАТЕГОРИИ%%", Категории);
		
		серия = Новый Соответствие();
		серия.Вставить("enableMouseTracking", "false");
		серия.Вставить("type", "'area'");
		серия.Вставить("yAxis", "0");
		
		м = Новый Массив();
		серия.Вставить("name", "'Обеспечено'");
		серия.Вставить("data", СформироватьJSONизТЗ(Данные["ДохФинансовые"], "Обеспечено"));
		м.Добавить(СформироватьJSONизСтруктура(серия, Истина));
		
		серия.Вставить("name", "'Гарантия'");
		серия.Вставить("data", СформироватьJSONизТЗ(Данные["ДохФинансовые"], "Гарантия"));
		м.Добавить(СформироватьJSONизСтруктура(серия, Истина));
		
		серия.Вставить("name", "'Прогноз'");
		серия.Вставить("data", СформироватьJSONизТЗ(Данные["ДохФинансовые"], "Прогноз"));
		м.Добавить(СформироватьJSONизСтруктура(серия, Истина));
		
		серия.Вставить("type", "'spline'");
		серия.Вставить("yAxis", "1");
		
		серия.Вставить("name", "'Валовый доход(план)'");
		серия.Вставить("data", СформироватьJSONизТЗ(Данные["ВаловыйДоход"], "План"));
		м.Добавить(СформироватьJSONизСтруктура(серия, Истина));
		
		серия.Вставить("name", "'Валовый доход(факт)'");
		серия.Вставить("data", СформироватьJSONизТЗ(Данные["ВаловыйДоход"], "Факт"));
		м.Добавить(СформироватьJSONизСтруктура(серия, Истина));
		
		Серии = СформироватьJSONизМассив(м, Истина);
		
		Шаблон = СтрЗаменить(Шаблон, "%%ДОХОДЫ_СЕРИИ%%", Серии);
		
		//РЕАЛИЗАЦИЯ
		Категории = СформироватьJSONизТЗ(Данные["Реализация"], "Период");
		
		Шаблон = СтрЗаменить(Шаблон, "%%РЕАЛИЗАЦИЯ_КАТЕГОРИИ%%", Категории);
		
		серия = Новый Соответствие();
		серия.Вставить("enableMouseTracking", "false");
		серия.Вставить("type", "'area'");
		
		м = Новый Массив();
		серия.Вставить("name", "'План'");
		серия.Вставить("data", СформироватьJSONизТЗ(Данные["Реализация"], "План"));
		м.Добавить(СформироватьJSONизСтруктура(серия, Истина));
		
		серия.Вставить("name", "'Факт'");
		серия.Вставить("data", СформироватьJSONизТЗ(Данные["Реализация"], "Факт"));
		м.Добавить(СформироватьJSONизСтруктура(серия, Истина));
		
		серия.Вставить("name", "'Оплата'");
		серия.Вставить("data", СформироватьJSONизТЗ(Данные["Реализация"], "Оплата"));
		м.Добавить(СформироватьJSONизСтруктура(серия, Истина));
		
		Серии = СформироватьJSONизМассив(м, Истина);
		
		Шаблон = СтрЗаменить(Шаблон, "%%РЕАЛИЗАЦИЯ_СЕРИИ%%", Серии);
	Исключение
		Сообщить("Ошибка:" + ОписаниеОшибки());
	КонецПопытки;	
	
	Возврат Шаблон;
КонецФункции    