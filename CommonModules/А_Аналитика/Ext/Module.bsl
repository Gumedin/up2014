Функция ОбработкаВыражений(страница) Экспорт     
	//Извлечение тегов @обработка@ из тела HTML страницы и вставление результатов

	результат = страница;
	
	RegExp = новый COMОбъект("VBScript.RegExp");
	
	RegExp.IgnoreCase = 1; //Игнорировать регистр
	RegExp.Global = 1; //Поиск всех вхождений шаблона
	RegExp.MultiLine = 0; //Многострочный режим
	
	выражение = "@(.*)@";
	
	RegExp.Pattern = выражение; //Ищем вхождение
	Matches=RegExp.Execute(результат);
	
	//Параметры = Новый Структура
	Параметры = ПолучитьПараметрыСессии();
	
	П = Новый Соответствие();
	Для Каждого параметр Из Параметры Цикл
		Попытка
			результатВыражения = ""; 
			фнк = """" + параметр.Значение + """";          
			Выполнить("результатВыражения = " + фнк);
			
			П[параметр.Ключ] = результатВыражения;
		Исключение
			Сообщить("Ошибка вычисления значения параметра. [" + фнк + "]");
		КонецПопытки;
	КонецЦикла;		
	
	Для индекс = 0 По Matches.Count-1 Цикл
		выражение = Matches.Item(индекс).Value;
		результатВыражения = "";
		Попытка
			фнк = СтрЗаменить(выражение, "@", "");
			Выполнить("результатВыражения = " + фнк);
		Исключение
			результатВыражения = "{" + выражение + " ошибка вычисления}";
		КонецПопытки;
		
		результат = СтрЗаменить(результат, выражение, результатВыражения);
	КонецЦикла;
	                                                        
	Возврат результат;
КонецФункции	

Функция ПроектыКМ(КМ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Ссылка,
		|	Проекты.ГодПроекта КАК ГодПроекта,
		|	Проекты.Статус КАК Статус,
		|	Проекты.СтатусЗадач КАК СтатусЗадач
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.МенеджерПроекта.Код = &КМ";
	
	Запрос.УстановитьПараметр("КМ", КМ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТекстHTML = Новый ТекстовыйДокумент;
	
	ТекстHTML.ДобавитьСтроку("<TABLE>");
	
	Пока Выборка.Следующий() Цикл
		ТекстHTML.ДобавитьСтроку("<TR>");
		ДобавитьТекстHTML(ТекстHTML, Выборка.Ссылка, Выборка.Ссылка.Наименование );
		ТекстHTML.ДобавитьСтроку("</TR>");
	КонецЦикла;

	ТекстHTML.ДобавитьСтроку("</TABLE>");
	возврат ТекстHTML.ПолучитьТекст();
КонецФункции	

Процедура ДобавитьТекстHTML(ТекстHTML, Элемент, Текст) Экспорт
    // Ссылку будем формировать хитро:
    // Предполагаем что символ "-" не входит в имена объектов метаданных,
    // учавствующих в формировании html
    // Тогда ссылка будет иметь следующий вид:
    // Номенклатура-d341d377-b3b1-11dc-a100-0011d85708ff
    // Передавать нашу ссылку будем через атрибут id
    СсылкаНаЭлемент = Элемент.Метаданные().Имя+"-"
    +Элемент.Ссылка.УникальныйИдентификатор();
    ТекстHTML.ДобавитьСтроку("<A id=""" + СсылкаНаЭлемент + """ href= ""v8://"
    + Элемент + """ >"+Текст+"</A>");
КонецПроцедуры

Функция ОбъектПоСсылке(СсылкаНаЭлемент) Экспорт 
	Объект = Неопределено;
    Разделитель = Найти(СсылкаНаЭлемент,"-");
    Если Разделитель > 0 Тогда
        // Получаем тип элемента
        ТипЭлемента = Лев(СсылкаНаЭлемент,Разделитель-1);
        // Получаем УникальныйИдентификатор
        ГУИД = Сред(СсылкаНаЭлемент,Разделитель+1);
        Объект = Справочники[ТипЭлемента].ПолучитьСсылку(
     		Новый УникальныйИдентификатор(ГУИД));
	КонецЕсли;
	
	Возврат Объект;	
КонецФункции

Процедура ЗаписатьHTMLСтраницу(КодСтраницы, ИсходныйКод) Экспорт
	МенеджерЗаписи = РегистрыСведений.ШаблоныАналитики.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.КодСтраницы = КодСтраницы;
	МенеджерЗаписи.ИсходныйКодСтраницы = ИсходныйКод;
	МенеджерЗаписи.Записать();                            
КонецПроцедуры

Функция ПодготовитьHTMLСтраницу(КодСтраницы) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныАналитики.ИсходныйКодСтраницы КАК ИсходныйКодСтраницы,
		|	ШаблоныАналитики.КодСтраницы КАК КодСтраницы
		|ИЗ
		|	РегистрСведений.ШаблоныАналитики КАК ШаблоныАналитики
		|ГДЕ
		|	ШаблоныАналитики.КодСтраницы = &КодСтраницы";
	
	Запрос.УстановитьПараметр("КодСтраницы", КодСтраницы);
	РезультатЗапроса = Запрос.Выполнить();                                                  
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		страница = "<HTML><BODY>Новая страница</BODY></HTML>";
	Иначе
		страница = ВыборкаДетальныеЗаписи.Получить(0).ИсходныйКодСтраницы;
	КонецЕсли;
	
	Возврат страница;		
КонецФункции

&НаСервере
Функция НайтиСсылку(Элемент)                 
    Врем = Элемент;
    Пока Врем <> Неопределено Цикл
        Если НРег(Врем.tagName) = "a" Тогда
            Возврат Врем;
        КонецЕсли;
        Врем = Врем.parentElement;
    КонецЦикла;
    Возврат Неопределено;
КонецФункции    // НайтиСсылку(Элемент)

&НаКлиенте
Процедура НайтиИПоказатьОбъект(Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	Если СтрНачинаетсяС(ВРег(ДанныеСобытия.Href), "V8://") Тогда
		Объект = ОбъектПоСсылке(ДанныеСобытия.Element.id);
		ПоказатьЗначение(,Объект);
	
		//Надо отработать нажатие браузером
		ДанныеСобытия.Event.returnValue = Ложь;	      
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПараметрыСессии()
	параметры = Новый Структура();
	КМ = ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо;
	параметры.Вставить("КМ", КМ);
	Возврат параметры;
КонецФункции


/////////////////////////////////////////////////////////////////////////////////////////
// 
// Шаблоны страниц
Функция СтатистикаДляКМ(КодСтаницы, ЗНАЧ ТекущиеПроекты) Экспорт
	Шаблон = ПодготовитьHTMLСтраницу(КодСтаницы);
	Попытка
		Категории = Новый ЗаписьJSON();
		Категории.УстановитьСтроку();
		
		Обеспечено = Новый ЗаписьJSON();
		Обеспечено.УстановитьСтроку();
		Реализация = Новый ЗаписьJSON();
		Реализация.УстановитьСтроку();
		Оплата = Новый ЗаписьJSON();
		Оплата.УстановитьСтроку();
		
		Категории.ЗаписатьНачалоМассива();
		Обеспечено.ЗаписатьНачалоМассива();
		Реализация.ЗаписатьНачалоМассива();
		Оплата.ЗаписатьНачалоМассива();
		
		тзВыборка = ТекущиеПроекты.Выгрузить();
		тзВыборка.Свернуть("Проект", "Обеспечено, Реализация, ООбеспечено, Оплата");
	
		Для Каждого Проект Из тзВыборка Цикл 
			Категории.ЗаписатьЗначение(Проект.Проект.Наименование);
			Обеспечено.ЗаписатьЗначение(ОКР(?(Проект.Обеспечено <> 0, Проект.ООбеспечено / Проект.Обеспечено, 0) * 100, 0));
			Реализация.ЗаписатьЗначение(ОКР(?(Проект.Обеспечено <> 0, Проект.Реализация / Проект.Обеспечено, 0) * 100, 0));
			Оплата.ЗаписатьЗначение(ОКР(?(Проект.Обеспечено <> 0, Проект.Оплата / Проект.Обеспечено, 0) * 100, 0));
		КонецЦикла;
		
		Обеспечено.ЗаписатьКонецМассива();
		Реализация.ЗаписатьКонецМассива();
		Оплата.ЗаписатьКонецМассива();
		
		Категории.ЗаписатьКонецМассива();
//		КатегорииС = ;
		
		Серии = Новый ЗаписьJSON();
		Серии.УстановитьСтроку();
		Серии.ЗаписатьНачалоМассива();
		Серии.ЗаписатьНачалоОбъекта();
		Серии.ЗаписатьБезОбработки("name: 'Обеспечено', data: " + Обеспечено.Закрыть());
		Серии.ЗаписатьКонецОбъекта();
		
		Серии.ЗаписатьНачалоОбъекта();
		Серии.ЗаписатьБезОбработки("name: 'Реализация', data: " + Реализация.Закрыть());
		Серии.ЗаписатьКонецОбъекта();
		
		Серии.ЗаписатьНачалоОбъекта();
		Серии.ЗаписатьБезОбработки("name: 'Оплата', data: " + Оплата.Закрыть());
		Серии.ЗаписатьКонецОбъекта();
		
		Серии.ЗаписатьКонецМассива();
//		СерииС = ;
		
		//КатегорииС = "['18-012', '18-032', '18-222']";
		//СерииС =  "[{name: 'Обеспечено', data: [1, 0, 4]}, {name: 'Реализация', data: [5, 7, 3]}, {name: 'Прогноз', data: [5, 7, 3]}]";
		
		Шаблон = СтрЗаменить(Шаблон, "%%КАТЕГОРИИ%%", Категории.Закрыть());
		Шаблон = СтрЗаменить(Шаблон, "%%СЕРИИ%%", Серии.Закрыть());
	Исключение
		Сообщить("Ошибка:" + ОписаниеОшибки());
	КонецПопытки;	
	//HTMLДокумента = А_Аналитика.ОбработкаВыражений(РедакторHTMLДокумента);       
	Возврат Шаблон;
КонецФункции                                                                                 

Функция СтатистикаПоКМ(КодСтаницы, ЗНАЧ ТекущиеПроекты) Экспорт
	Шаблон = ПодготовитьHTMLСтраницу(КодСтаницы);
	Попытка
		Категории = Новый ЗаписьJSON();
		Категории.УстановитьСтроку();
		
		ООбеспечено = Новый ЗаписьJSON();
		ООбеспечено.УстановитьСтроку();
		ОГарантия = Новый ЗаписьJSON();
		ОГарантия.УстановитьСтроку();
		ОПрогноз = Новый ЗаписьJSON();
		ОПрогноз.УстановитьСтроку();
		
		Категории.ЗаписатьНачалоМассива();
		ООбеспечено.ЗаписатьНачалоМассива();
		ОГарантия.ЗаписатьНачалоМассива();
		ОПрогноз.ЗаписатьНачалоМассива();
		
		тзВыборка = ТекущиеПроекты.Выгрузить();
		тзВыборка.Свернуть("КлиентМенеджер", "ООбеспечено, ОГарантия, ОПрогноз");
	
		Для Каждого Проект Из тзВыборка Цикл 
			Категории.ЗаписатьЗначение(Проект.КлиентМенеджер);
			ООбеспечено.ЗаписатьЗначение(Проект.ООбеспечено);
			ОГарантия.ЗаписатьЗначение(Проект.ОГарантия);
			ОПрогноз.ЗаписатьЗначение(Проект.ОПрогноз);
		КонецЦикла;
		
		ООбеспечено.ЗаписатьКонецМассива();
		ОГарантия.ЗаписатьКонецМассива();
		ОПрогноз.ЗаписатьКонецМассива();
		
		Категории.ЗаписатьКонецМассива();
//		КатегорииС = ;
		
		Серии = Новый ЗаписьJSON();
		Серии.УстановитьСтроку();
		Серии.ЗаписатьНачалоМассива();
		Серии.ЗаписатьНачалоОбъекта();
		Серии.ЗаписатьБезОбработки("name: 'Обеспечено', data: " + ООбеспечено.Закрыть());
		Серии.ЗаписатьКонецОбъекта();
		
		Серии.ЗаписатьНачалоОбъекта();
		Серии.ЗаписатьБезОбработки("name: 'Гарантия', data: " + ОГарантия.Закрыть());
		Серии.ЗаписатьКонецОбъекта();
		
		Серии.ЗаписатьНачалоОбъекта();
		Серии.ЗаписатьБезОбработки("name: 'Прогноз', data: " + ОПрогноз.Закрыть());
		Серии.ЗаписатьКонецОбъекта();
		
		Серии.ЗаписатьКонецМассива();
//		СерииС = ;
		
		КатегорииС = "['18-012', '18-032', '18-222']";
		СерииС =  "[{name: 'Обеспечено', data: [1, 0, 4]}, {name: 'Гарантия', data: [5, 7, 3]}, {name: 'Прогноз', data: [5, 7, 3]}]";
		
		Шаблон = СтрЗаменить(Шаблон, "%%КАТЕГОРИИ%%", Категории.Закрыть());
		Шаблон = СтрЗаменить(Шаблон, "%%СЕРИИ%%", Серии.Закрыть());
	Исключение
		Сообщить("Ошибка:" + ОписаниеОшибки());
	КонецПопытки;	
	//HTMLДокумента = А_Аналитика.ОбработкаВыражений(РедакторHTMLДокумента);       
	Возврат Шаблон;
КонецФункции                                                                                 
