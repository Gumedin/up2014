#Область ОбработчикиФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПланРаботЗакрыт( ПредметПосещения )
	Если ТипЗнч( ПредметПосещения ) = Тип("ДокументСсылка.ПланРабот") 
	или  ТипЗнч( ПредметПосещения ) = Тип("ДокументСсылка.ПланРаботТиражный") Тогда
		Если ПредметПосещения.Закрыт Тогда
			Сообщить("План работ " + ПредметПосещения + " закрыт ");
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

//&НаСервереБезКонтекста
//Функция ВидимостьУточненияПредметаПосещения( ПредметПосещения )
//	Если ТипЗнч( ПредметПосещения ) = Тип("СправочникСсылка.ЗадачиПроектов")
//	или	 ТипЗнч( ПредметПосещения ) = Тип("ДокументСсылка.ПланРабот")
//	или	 ТипЗнч( ПредметПосещения ) = Тип("ДокументСсылка.ПланРаботТиражный") Тогда
//		Возврат Истина;
//	КонецЕсли;
//	Возврат Ложь;
//КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.Уточнение.Видимость = УП_РаботаСРабочимКалендаремКлиент.ВидимостьУточненияПредметаПосещения( Запись.ПредметПосещения );
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ПланРаботЗакрыт( Запись.ПредметПосещения ) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Оповестить( "ИзмененКонтрагентПосещения", Запись.ФизическоеЛицо, ЭтаФорма );

КонецПроцедуры

&НаКлиенте
Процедура ПредметПосещенияПриИзменении(Элемент)
	ОбновитьКонтрагентаПосещения();
	УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	ОбновитьКонтрагентаПосещения();
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитОбъекта( Об, ИмяРеквизита)
	Возврат Об[ИмяРеквизита];
КонецФункции


&НаКлиенте
Процедура ОбновитьКонтрагентаПосещения()
	Контрагент = КонтрагентПредмета( Запись.ПредметПосещения );
	Если Контрагент <> Неопределено Тогда
		Запись.Контрагент = Контрагент;
		Запись.Расходы 	  = РеквизитОбъекта( Запись.Контрагент, "Расходы");
		
		
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция КонтрагентПредмета( ПредметПосещения )
	Возврат КонтрагентПоПредмету( ПредметПосещения );
КонецФункции

&НаКлиенте
Процедура УточнениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокВыбораУточнение 	= УП_РаботаСРабочимКалендаремСервер.СписокУточненийПредметаПосещения( Запись.ПредметПосещения );
	
	ОписаниеОповещения 		= Новый ОписаниеОповещения("УточнениеНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбораУточнение, Элементы.Уточнение);
	
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Уточнение = Результат.Значение;
	Если ЗначениеЗаполнено(Уточнение) Тогда
		Модифицированность = Истина;
		Запись.Уточнение = Уточнение;
	КонецЕсли;
КонецПроцедуры


#Область ОбработкаЦвета

&НаКлиенте
Процедура ЦветПриИзменении(Элемент)
	
	ОбработкаИзмененияЦвета();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияЦвета()
	
	ЦветИндекс = УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьИндексЦвета( Цвет );
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбораЦвета = Новый СписокЗначений;
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет"), , , БиблиотекаКартинок.ЦветПоУмолчанию);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный"), , , БиблиотекаКартинок.ЦветКрасный);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий"), , , БиблиотекаКартинок.ЦветСиний);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый"), , , БиблиотекаКартинок.ЦветЖелтый);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый"), , , БиблиотекаКартинок.ЦветЗеленый);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый"), , , БиблиотекаКартинок.ЦветОранжевый);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦветНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбораЦвета, Элементы.Цвет);
	
КонецПроцедуры


&НаКлиенте
Процедура ЦветНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйЦвет = Результат.Значение;
	Если ЗначениеЗаполнено(ВыбранныйЦвет) Тогда
		Модифицированность = Истина;
		Цвет = ВыбранныйЦвет;
		Запись.Цвет = Цвет;
		
		ОбработкаИзмененияЦвета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПрочитатьЦвет();

КонецПроцедуры


&НаСервере
Процедура ПрочитатьЦвет()
	
	Цвет 		= Запись.Цвет;
	ЦветИндекс 	= УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьИндексЦвета(Цвет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасходыНаПроездКонтрагенту( Контрагент)
	Возврат Контрагент.Расходы;
КонецФункции

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Запись.Расходы = РасходыНаПроездКонтрагенту( Запись.Контрагент );
КонецПроцедуры


#КонецОбласти


