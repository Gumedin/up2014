
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Контрагент 			= Параметры.Контрагент;
	//ЭтаФорма.Заголовок = "Посещения по " + Контрагент;
	
	ПредметПосещения 			= Параметры.ПредметПосещения;
	Список.Параметры.УстановитьЗначениеПараметра( "ПредметПосещения", ПредметПосещения );
	
	//ПредметПосещения 			= Параметры.ПредметПосещения;
	ЭтаФорма.Заголовок = "Посещения по " + ПредметПосещения;
	
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора( Список.Отбор,
	//	"ПредметПосещения",
	//	ПредметПосещения,
	//	ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ФайлКартинки = Элементы.Список.ТекущиеДанные.ФайлКартинки;
		Если ЗначениеЗаполнено( ФайлКартинки ) Тогда
			АдресКартинки = НавигационнаяСсылкаКартинки(ФайлКартинки, УникальныйИдентификатор);
		Иначе
			АдресКартинки = "";
		КонецЕсли;
	Иначе
		АдресКартинки = "";
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

#Область ВыгрузкаЖурналаПосещений

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(
		ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМакетВыгрузки()
	Возврат Справочники.ПосещенияКонтрагентов.ПолучитьМакет("ВыгрузкаПосещенийПоПредмету");
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьШапку( ТабДок, Макет, ПредметПосещения )
	ОблШапка = Макет.ПолучитьОбласть( "Шапка");
	ОблШапка.Параметры.ПредметПосещения = ПредметПосещения;
	ТабДок.Вывести( ОблШапка);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФайлПодтверждения( Посещение )
	Возврат Посещение.ФайлКартинки;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПосещение( ТабДок, Макет, Посещение, Номер )
	ОблПосещение = Макет.ПолучитьОбласть( "Посещение");
	ЗаполнитьЗначенияСвойств( ОблПосещение.Параметры, Посещение );
	ОблПосещение.Параметры.Номер = Номер; 
	ФайлПодтверждения	= Посещение.ФайлКартинки;
	ЕстьПодтверждение 	= ЗначениеЗаполнено( ФайлПодтверждения);
	ОблПосещение.Параметры.ЕстьПодтверждение = ЕстьПодтверждение;
	ТабДок.Вывести( ОблПосещение);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПодвал( ТабДок, Макет, Посещения )
	ОблПодвал	= Макет.ПолучитьОбласть( "Подвал");
	Количество 	= 0;
	Часов		= 0;
	Для Каждого Посещение ИЗ Посещения Цикл
		Количество 	= Количество 	+ Посещение.Количество;
		Часов		= Часов 		+ Посещение.Часов;;
	КонецЦикла;
	ОблПодвал.Параметры.Количество 	= Количество; 
	ОблПодвал.Параметры.Часов 		= Часов; 
	ТабДок.Вывести( ОблПодвал );

КонецПроцедуры



&НаКлиенте
Процедура ВыгрузитьПосещения(ПапкаДляЭкспортаПолная)
	КаталогВыгрузки = Новый Файл(ПапкаДляЭкспортаПолная);
	Если НЕ КаталогВыгрузки.Существует() Тогда
		СоздатьКаталог( ПапкаДляЭкспортаПолная );
	КонецЕсли;
	
	Посещения 	= Элементы.Список.ВыделенныеСтроки;
	Макет  		= ПолучитьМакетВыгрузки();
	ТабДок 		= Новый ТабличныйДокумент;
	
	ЗаполнитьШапку( ТабДок, Макет, ПредметПосещения );
	//
	ПолучаемыеФайлы = Новый Массив;
	ПолученныеФайлы = Новый Массив;
	
	
	Для Каждого Посещение ИЗ Посещения Цикл
		Номер = Посещения.Найти( Посещение)+1;
		ЗаполнитьПосещение( ТабДок, Макет, Посещение, Номер );
		
		ФайлПодтверждения	= ПолучитьФайлПодтверждения( Посещение );
		ЕстьПодтверждение 	= ЗначениеЗаполнено( ФайлПодтверждения);
		Если ЕстьПодтверждение Тогда
			ДанныеФайла = ПолучитьДанныеФайла(ФайлПодтверждения, УникальныйИдентификатор);
			
			ПолноеИмяФайла = ПапкаДляЭкспортаПолная + Номер + ". " + ДанныеФайла.ИмяФайла;
			ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			//
			ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
			
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьПодвал( ТабДок, Макет, Посещения );
	
	Если ПолучаемыеФайлы.Количество() > 0 Тогда
		Если ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, , Ложь) Тогда
			Состояние(НСтр("ru = 'Файлы успешно сохранены '"));
		КонецЕсли;
	КонецЕсли;
	ИмяФайлаЖурнала = ПапкаДляЭкспортаПолная + "Журнал посещений.MXL";
	ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДок.АвтоМасштаб		  = Истина;
	ТабДок.Записать( ИмяФайлаЖурнала );
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПосещенияВКаталог(Команда)
	#Если ВебКлиент Тогда
		Возврат;
	#КонецЕсли
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.Каталог = "C:\";
	Если ВыборФайла.Выбрать() Тогда
		
		ПапкаДляЭкспорта = ФайловыеФункцииСлужебныйКлиент.НормализоватьКаталог(
			ВыборФайла.Каталог);
		
		ПапкаДляЭкспортаПолная = ПапкаДляЭкспорта
							   + СтрЗаменить(Строка(ПредметПосещения), ":", ".")
							   //+ "План работ"
		                       + ОбщегоНазначенияКлиентСервер.РазделительПути();
							   
		
		
		ВыгрузитьПосещения(ПапкаДляЭкспортаПолная);
	КонецЕсли;

КонецПроцедуры

#КОнецОбласти