&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(ДанныеФайлаКартинки) Тогда
		
		Если ЗначениеЗаполнено(ДанныеФайлаКартинки) Тогда
			
			ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
				ТекущийОбъект.Ссылка,
				ДанныеФайлаКартинки.ИмяБезРасширения,
				ДанныеФайлаКартинки.Расширение,
				ДанныеФайлаКартинки.ВремяИзменения,
				ДанныеФайлаКартинки.УниверсальноеВремяИзменения,
				АдресКартинки,
				"",
				"ПосещенияКонтрагентовПрисоединенныеФайлы");
			
			ТекущийОбъект.ФайлКартинки = ПрисоединенныйФайл;
			
			ДанныеФайлаКартинки = Неопределено;
		КонецЕсли;
		
		ТекущийОбъект.Записать();
		Прочитать();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();

КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НачальникПодразделения = ?(Параметры.Свойство("НачальникПодразделения"),
								Параметры.НачальникПодразделения, Ложь );
								
	Если НЕ Объект.Отработано Тогда
		Если Параметры.Свойство("Начало") Тогда
			Часов	=  0;
			Если Параметры.Свойство("Конец") Тогда
			// для начального размещения поситаем продолжительность посещения
				Часов	= (Параметры.Конец - Параметры.Начало)/3600;
			КонецЕсли;
			Объект.Дата 	= НачалоПосещения( Параметры.Начало );
			Объект.Часов	= ?(ЗначениеЗаполнено( Объект.Часов), Объект.Часов, Часов );
		КонецЕсли;
	КонецЕсли;	
	
	// устанавливаем заполненные реквизиты
	Если Параметры.Свойство("РеквизитыПосещения") Тогда
		РеквП	= Параметры.РеквизитыПосещения;
		Для Каждого Эл ИЗ РеквП Цикл
			// 2016 04 12 тольк если реквзит еще не заполнен
			Если НЕ ЗначениеЗаполнено( Объект[Эл.Ключ] ) Тогда
				Объект[Эл.Ключ] = Эл.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПрочитатьЦвет();
	
	// редактировать картинку можно только в записанном посещении
	//+СИТ 20180212 Сначала уберем доступность
	Элементы.ДобавитьИзображение.Доступность = Ложь;
	
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	// ... поля картинки и кнопок его панели
	//	ЕстьПравоРедактированияКартинки    = ПравоДоступа("Редактирование", Метаданные.Справочники.ПосещенияКонтрагентов.Реквизиты.ФайлКартинки);
	//	ЕстьПравоРедактированияКартинки = ЕстьПравоРедактированияКартинки И НЕ Объект.Отработано;
	//	
	//	Элементы.АдресКартинки.Доступность 						= ЕстьПравоРедактированияКартинки;
	//	Элементы.ДобавитьИзображение.Доступность 				= ЕстьПравоРедактированияКартинки;
	//	//Элементы.ИзменитьИзображение.Доступность 				= ЕстьПравоРедактированияКартинки;
	//	//Элементы.ОчиститьИзображение.Доступность 				= ЕстьПравоРедактированияКартинки;
	//	//Элементы.ВыбратьКартинкуИзПрисоединенныхФайлов.Видимость = ЕстьПравоРедактированияКартинки;
	//	
	//Иначе
	//	ПриСозданииЧтенииНаСервере();
	//	
	//КонецЕсли;
	//-СИТ
	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не Объект.ФайлКартинки.Пустая() Тогда
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
		Иначе
			АдресКартинки = "";
		Конецесли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	// дата начала точно в часах, с 9 до 17
	// 
	Час = Час( Объект.Дата );
	Если 		Час < 9 Тогда 
		Час = 9;
	ИначеЕсли 	Час > 17 Тогда
		Час = 17;
	КонецЕсли;
	//
	Объект.Дата = НачалоДня( Объект.Дата ) + 3600 * Час;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаПосещенияЗакрыта( Дата )
	Возврат ЗначениеЗаполнено( Дата ) И Дата < НачалоМесяцаПосещений();
КонецФункции

&НаКлиенте
Процедура УстановитьДоступность()
	ЭлементыДоступны = Истина;
	Если ДатаПосещенияЗакрыта( Объект.Дата ) Тогда
		ЭлементыДоступны = Ложь;
		//+СИТ 20180213
		//-Элементы.Отработано.Доступность = Ложь;
		Элементы.Отработано.Доступность = ОбменДанными;
		//-СИТ
	Иначе
		Элементы.Отработано.Доступность = Истина;
		ЭлементыДоступны = НЕ Объект.Отработано;
	КонецЕсли;
	
	Элементы.Дата.Доступность 				= ЭлементыДоступны;
	Элементы.Количество.Доступность 		= ЭлементыДоступны;
	Элементы.Часов.Доступность 				= ЭлементыДоступны;
	Элементы.Контрагент.Доступность 		= ЭлементыДоступны;
	Элементы.ФизическоеЛицо.Доступность 	= ЭлементыДоступны;
	Элементы.Подразделение.Доступность 		= ЭлементыДоступны;
	Элементы.ПредметПосещения.Доступность 	= ЭлементыДоступны;
	// 2017 05 26
	//Элементы.Расходы.Доступность 			= ЭлементыДоступны;
	//+СИТ 20180212
	//-Элементы.Расходы.Доступность 			= НЕ РеквизитОбъекта( Объект.Контрагент, "ПроездНеОплачивается");
	Элементы.Расходы.Доступность 			= ЭлементыДоступны И НЕ РеквизитОбъекта( Объект.Контрагент, "ПроездНеОплачивается");
	//-СИТ
	
	Элементы.Задание.Доступность 			= ЭлементыДоступны;
	Элементы.Результат.Доступность 			= ЭлементыДоступны;
	Элементы.Цвет.Доступность 				= ЭлементыДоступны;
	// 2016 09 20
	Элементы.Уточнение.Доступность 			= ЭлементыДоступны;
	
	//+СИТ 20180213
	Элементы.ОбменДанными.Доступность		= ?(ЧемРуководитТекущийПользователь().Найти(Объект.Подразделение) <> Неопределено, Истина, Ложь);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.ДобавитьИзображение.Доступность = НЕ Объект.Отработано;
	Иначе
		Элементы.ДобавитьИзображение.Доступность = Ложь;
	КонецЕсли;

	//-СИТ
КонецПроцедуры

//+СИТ
&НаСервере
Функция ЧемРуководитТекущийПользователь()
	ТПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ТПользовательСсылка = Справочники.Пользователи.НайтиПоНаименованию(ТПользователь);
	//Возврат ЧемРуководит(ТПользовательСсылка.ФизическоеЛицо);
	Возврат УП_КадрыСервер.ЧемРуководит( ТПользовательСсылка.ФизическоеЛицо );
КонецФункции
//-СИТ

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.Уточнение.Видимость = УП_РаботаСРабочимКалендаремКлиент.ВидимостьУточненияПредметаПосещения( Объект.ПредметПосещения);
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	//Оповестить( "ИзмененоПосещение", Объект.Ссылка, ЭтаФорма );
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Оповестить( "ИзмененоПосещение", Объект.ФизическоеЛицо, ЭтаФорма );

КонецПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентПредмета( ПредметПосещения )
	Возврат КонтрагентПоПредмету( ПредметПосещения );
КонецФункции

&НаКлиенте
Процедура УточнениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокВыбораУточнение 	= УП_РаботаСРабочимКалендаремСервер.СписокУточненийПредметаПосещения( Объект.ПредметПосещения );
	
	ОписаниеОповещения 		= Новый ОписаниеОповещения("УточнениеНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбораУточнение, Элементы.Уточнение);

КонецПроцедуры

&НаКлиенте
Процедура УточнениеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Уточнение = Результат.Значение;
	Если ЗначениеЗаполнено(Уточнение) Тогда
		Модифицированность = Истина;
		Объект.Уточнение = Уточнение;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьКонтрагентаПосещения()
	Контрагент = КонтрагентПредмета( Объект.ПредметПосещения );
	Если Контрагент <> Неопределено Тогда
		Объект.Контрагент 	= Контрагент;
		Объект.Расходы 		= РасходыПоКонтрагенту( Объект.Контрагент );
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредметПосещенияПриИзменении(Элемент)
	ОбновитьКонтрагентаПосещения();
	УстановитьВидимость();
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитОбъекта( Об, ИмяРеквизита)
	Возврат Об[ИмяРеквизита];
КонецФункции

&НаСервереБезКонтекста
Функция РасходыПоКонтрагенту( Контрагент )
	Если Контрагент.ПроездНеОплачивается Тогда
		Возврат 0;
	Иначе
		Возврат Контрагент.Расходы;
	КонецЕсли;
КонецФункции


&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Объект.Расходы 	= РасходыПоКонтрагенту( Объект.Контрагент );
КонецПроцедуры


// если предмет посещения ПланРабот или ПланРабот тиражный
// то при установке флажка ТребуетсяПодтверждение требуется наличие подтверждения 
// должен быть заполнен реквизит ФайлКартинки
&НаСервере
Функция МожноОтработатьПосещение()
	// снимать отметку можно всегда
	Если НЕ Объект.Отработано Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ОбменДанными Тогда
		Если ТипЗнч( Объект.ПредметПосещения ) = Тип("ДокументСсылка.ПланРабот")
		или	 ТипЗнч( Объект.ПредметПосещения ) = Тип("ДокументСсылка.ПланРаботТиражный") Тогда
			Если Объект.ПредметПосещения.ТребуетсяПодтверждение Тогда
				Если НЕ ЗначениеЗаполнено( Объект.ФайлКартинки ) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// можно
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ОтработаноПриИзменении(Элемент)
	Если МожноОтработатьПосещение() Тогда
	Иначе
		ПоказатьПредупреждение(,"Требуется подтверждение для " + Символы.ПС + 
										 Объект.ПредметПосещения, 10);
		Объект.Отработано = Ложь;
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	УстановитьЧасыПоКоличествуНоменклатуры( Объект.Уточнение, Объект.Количество, Объект.Часов);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЧасыПоКоличествуНоменклатуры( Уточнение, Количество, Часов);
	Если ТипЗнч( Уточнение ) = Тип("СправочникСсылка.Номенклатура") Тогда
		Продолжительность = Уточнение.Продолжительность;
		Если Продолжительность <> 0 Тогда
			Часов = Количество * Продолжительность;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



#Область ОбработкаЦвета

&НаКлиенте
Процедура ЦветПриИзменении(Элемент)
	
	ОбработкаИзмененияЦвета();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияЦвета()
	
	ЦветИндекс = УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьИндексЦвета( Цвет );
	
КонецПроцедуры

&НаКлиенте
Процедура ЦветНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбораЦвета = Новый СписокЗначений;
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет"), , , БиблиотекаКартинок.ЦветПоУмолчанию);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный"), , , БиблиотекаКартинок.ЦветКрасный);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий"), , , БиблиотекаКартинок.ЦветСиний);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый"), , , БиблиотекаКартинок.ЦветЖелтый);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый"), , , БиблиотекаКартинок.ЦветЗеленый);
	СписокВыбораЦвета.Добавить(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый"), , , БиблиотекаКартинок.ЦветОранжевый);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦветНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбораЦвета, Элементы.Цвет);
	
КонецПроцедуры


&НаКлиенте
Процедура ЦветНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйЦвет = Результат.Значение;
	Если ЗначениеЗаполнено(ВыбранныйЦвет) Тогда
		Модифицированность = Истина;
		Цвет = ВыбранныйЦвет;
		Объект.Цвет = Цвет;
		
		ОбработкаИзмененияЦвета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЦвет()
	
	Цвет 		= Объект.Цвет;
	ЦветИндекс 	= УП_РаботаСРабочимКалендаремКлиентСервер.ПолучитьИндексЦвета(Цвет);
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Изменение_Контрагента" Тогда
		ЭтаФорма.ОбновитьОтображениеДанных();
		

	ИначеЕсли ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
			
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		ВладелецФайла = РеквизитОбъекта( СсылкаНаФайл, "ВладелецФайла");
		Если ВладелецФайла = Объект.Ссылка Тогда
			
			Модифицированность = Истина;
			Объект.ФайлКартинки = СсылкаНаФайл;
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
		КонецЕсли;				
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	//+СИТ 20180213
	Объект.Подразделение =  ГдеРаботает( Объект.ФизическоеЛицо, Объект.Дата );
	УстановитьДоступность();
	//-СИТ
	ОбновитьКонтрагентаПосещения();
КонецПроцедуры

//+СИТ 20180213
&НаСервереБезКонтекста
Функция ГдеРаботает( ФизическоеЛицо, Дата )
	м = УП_КадрыСервер.ГдеРаботает( ФизическоеЛицо, Дата );
	Если м.Количество() > 0 Тогда 
		Возврат м[0];
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ЧемРуководит( ФизическоеЛицо )
	м = УП_КадрыСервер.ЧемРуководит( ФизическоеЛицо );
	Если м.Количество() > 0 Тогда 
		Возврат м[0];
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
//-СИТ

#Область ОбработкаПодтверждения

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции


&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Перем ИдентификаторФайла;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогВыбораФайла.Фильтр = УП_Клиент.ФильтрФайловИзображений();
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаДиалогЗавершение",
		ЭтотОбъект,
		Новый Структура("ИмяРеквизита", "ДанныеФайлаКартинки"));
		
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
		
	Иначе
		ВыборИзображения   = Истина;
		ИдентификаторФайла = Новый УникальныйИдентификатор;
		
		ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, УП_Клиент.ФильтрФайловИзображений());
		ВыборИзображения   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаДиалогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ВыбранныеФайлы[0];
	ДополнительныеПараметры.Вставить("ИмяФайла", ИмяФайла);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита] =
		Новый Структура("ИмяБезРасширения, Расширение, ВремяИзменения, УниверсальноеВремяИзменения");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаИнициализацияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	Файл = Новый Файл;
	Файл.НачатьИнициализацию(ОписаниеОповещения, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаИнициализацияФайла(Файл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Файл", Файл);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаСуществованияФайла",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ДополнительныеПараметры.Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаСуществованияФайла(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Файл не найден'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита], ДополнительныеПараметры.Файл);
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение =
		СтрЗаменить(ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].Расширение, ".", "");
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеФайлаПолучениеВремениИзменения(ВремяИзменения, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма[ДополнительныеПараметры.ИмяРеквизита].ВремяИзменения = ВремяИзменения;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавлениеФайлаПолучениеУниверсальногоВремениИзменения",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.Файл.НачатьПолучениеУниверсальногоВремениИзменения(ОписаниеОповещения);
	
КонецПроцедуры



&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.ФайлКартинки);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.ПосещенияКонтрагентовПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
	ДанныеФайлаКартинки = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("ФайлКартинки", "АдресКартинки",
		НСтр("ru='Отсутствует изображение для просмотра'"));
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(
			ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(
				ЭтаФорма.Объект[ИмяРеквизитаОбъекта],
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	Если ЗначениеЗаполнено( Объект.Ссылка ) Тогда
		// СтандартныеПодсистемы.ПрисоединенныеФайлы
		ПрисоединенныеФайлыКлиент.ОткрытьФормуВыбораФайлов( Объект.Ссылка, ЭтаФорма );
		// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч( ВыбранноеЗначение ) = Тип("СправочникСсылка.ПосещенияКонтрагентовПрисоединенныеФайлы") Тогда
        Объект.ФайлКартинки = ВыбранноеЗначение;
        АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор)
	КонецЕсли;
КонецПроцедуры

//+СИТ 20180213
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ОбменДанными.Загрузка = ОбменДанными;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОбменДаннымиПриИзменении(Элемент)
	УстановитьДоступность();
КонецПроцедуры
//-СИТ

#КонецОбласти