&НаСервереБезКонтекста
Функция ФактИтого( Инцидент )
	Возврат УП_Инциденты.ЗакрытыеЧасыПоИнциденту( Инцидент );
КонецФункции
	
&НаКлиенте
Процедура ПересчетОстаткаПлана( )
	КоличествоФакт 		= ФактИтого( Объект.Ссылка );
	КоличествоПлан		= ?(ЗначениеЗаполнено(Объект.КоличествоПланТекущий), Объект.КоличествоПланТекущий, Объект.КоличествоПлан);
	КоличествоОстаток 	= КоличествоПлан - КоличествоФакт;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьСостояниеИнцидента( Знач Инцидент )
	Возврат ОпределитьСостояниеИнцидента( Инцидент );
КонецФункции

&НаКлиенте
Процедура ОбновитьСостояние( )
	СостояниеИнцидента	= ПолучитьСостояниеИнцидента( Объект );
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсториюИнцидента(Инцидент  )
	Перем Порядок;
	
	ИсторияИнцидента.Параметры.УстановитьЗначениеПараметра( "Инцидент", Инцидент);
	
	// Порядок.
	Порядок = ИсторияИнцидента.КомпоновщикНастроек.Настройки.Порядок;
	Порядок.ИдентификаторПользовательскойНастройки = "ОсновнойПорядок";
	
	Порядок.Элементы.Очистить();
	
	ЭлементПорядка 						= Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле 				= Новый ПолеКомпоновкиДанных("Период");
	ЭлементПорядка.ТипУпорядочивания 	= НаправлениеСортировкиКомпоновкиДанных.Возр;
	ЭлементПорядка.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементПорядка.Использование 		= Истина;
	
КонецПроцедуры   

&НаСервереБезКонтекста
Функция ЭтоАвторИнцидента( АвторИнцидента )
	Возврат (АвторИнцидента = ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо);
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьПараметры( Инцидент, Поручить )
	 Возврат УП_Инциденты.ПодготовитьПараметрыИнцидента( Инцидент, Поручить );
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбновитьИсториюИнцидента(Объект.Ссылка);
КонецПроцедуры


//&НаКлиенте
//Процедура ПриОткрытииПослеПроверки( ПарамОпов ) Экспорт
//	Если Объект.ФизическоеЛицо.Пустая() Тогда Возврат; КонецЕсли;
//	
//	Элементы.Закрыт.Доступность = ЭтоАвторИнцидента( Объект.ФизическоеЛицо );
//	ОбновитьСостояние();
//	ПересчетОстаткаПлана();
//		
//КонецПроцедуры
	


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//ОписаниеОповещенияОЗавершении = 
	//		Новый ОписаниеОповещения("ПриОткрытииПослеПроверки", ЭтаФорма);
	
	Если Объект.ФизическоеЛицо.Пустая() Тогда
		ПоказатьПредупреждение(, 
		"Не указан ответственный. Укажите физическое лицо у пользователя!", 10);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Элементы.Закрыт.Доступность = ЭтоАвторИнцидента( Объект.ФизическоеЛицо );
	ОбновитьСостояние();
	ПересчетОстаткаПлана();
	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСобытиеИнцидента( Поручить )
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, "Сохраните инцидент!", 10);
		Возврат;
	КонецЕсли;
	Если Объект.Закрыт Тогда
		ПоказатьПредупреждение(, "Инцидент закрыт!", 10);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ИнцидентыИстория.ФормаЗаписи", 
				ПодготовитьПараметры( Объект.Ссылка, Поручить), 
				ЭтаФорма);
				
	// если инцидент был новый, то появляется ссылка
	 ОбновитьИсториюИнцидента(Объект.Ссылка);
				
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	СформироватьСобытиеИнцидента( Ложь );
КонецПроцедуры

&НаКлиенте
Процедура Поручить(Команда)
	СформироватьСобытиеИнцидента( Истина );
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	ОбновитьСостояние();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	ОбновитьСостояние();
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПланПриИзменении(Элемент)
	ОбновитьСостояние();
	ПересчетОстаткаПлана();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПланТекущийПриИзменении(Элемент)
	ОбновитьСостояние();
	ПересчетОстаткаПлана();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытПриИзменении(Элемент)
	ОбновитьСостояние();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьСостояниеИнцидента( ТекущийОбъект.Ссылка );
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИнцидентаПриИзменении(Элемент)
	ОбновитьСостояние();
	ПересчетОстаткаПлана();
	
КонецПроцедуры



